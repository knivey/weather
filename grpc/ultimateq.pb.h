// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ultimateq.proto

#ifndef PROTOBUF_INCLUDED_ultimateq_2eproto
#define PROTOBUF_INCLUDED_ultimateq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ultimateq_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[51]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ultimateq_2eproto();
namespace api {
class Access;
class AccessDefaultTypeInternal;
extern AccessDefaultTypeInternal _Access_default_instance_;
class AuthUserRequest;
class AuthUserRequestDefaultTypeInternal;
extern AuthUserRequestDefaultTypeInternal _AuthUserRequest_default_instance_;
class ChannelModes;
class ChannelModesDefaultTypeInternal;
extern ChannelModesDefaultTypeInternal _ChannelModes_default_instance_;
class ChannelModes_AddressMode;
class ChannelModes_AddressModeDefaultTypeInternal;
extern ChannelModes_AddressModeDefaultTypeInternal _ChannelModes_AddressMode_default_instance_;
class ChannelModes_AddressModesEntry_DoNotUse;
class ChannelModes_AddressModesEntry_DoNotUseDefaultTypeInternal;
extern ChannelModes_AddressModesEntry_DoNotUseDefaultTypeInternal _ChannelModes_AddressModesEntry_DoNotUse_default_instance_;
class ChannelModes_ArgModesEntry_DoNotUse;
class ChannelModes_ArgModesEntry_DoNotUseDefaultTypeInternal;
extern ChannelModes_ArgModesEntry_DoNotUseDefaultTypeInternal _ChannelModes_ArgModesEntry_DoNotUse_default_instance_;
class ChannelModes_ModesEntry_DoNotUse;
class ChannelModes_ModesEntry_DoNotUseDefaultTypeInternal;
extern ChannelModes_ModesEntry_DoNotUseDefaultTypeInternal _ChannelModes_ModesEntry_DoNotUse_default_instance_;
class ChannelQuery;
class ChannelQueryDefaultTypeInternal;
extern ChannelQueryDefaultTypeInternal _ChannelQuery_default_instance_;
class ChannelResponse;
class ChannelResponseDefaultTypeInternal;
extern ChannelResponseDefaultTypeInternal _ChannelResponse_default_instance_;
class Cmd;
class CmdDefaultTypeInternal;
extern CmdDefaultTypeInternal _Cmd_default_instance_;
class CmdEvent;
class CmdEventDefaultTypeInternal;
extern CmdEventDefaultTypeInternal _CmdEvent_default_instance_;
class CmdEventResponse;
class CmdEventResponseDefaultTypeInternal;
extern CmdEventResponseDefaultTypeInternal _CmdEventResponse_default_instance_;
class CmdEvent_ArgsEntry_DoNotUse;
class CmdEvent_ArgsEntry_DoNotUseDefaultTypeInternal;
extern CmdEvent_ArgsEntry_DoNotUseDefaultTypeInternal _CmdEvent_ArgsEntry_DoNotUse_default_instance_;
class CmdEvent_TargetStoredUsersEntry_DoNotUse;
class CmdEvent_TargetStoredUsersEntry_DoNotUseDefaultTypeInternal;
extern CmdEvent_TargetStoredUsersEntry_DoNotUseDefaultTypeInternal _CmdEvent_TargetStoredUsersEntry_DoNotUse_default_instance_;
class CmdEvent_TargetUsersEntry_DoNotUse;
class CmdEvent_TargetUsersEntry_DoNotUseDefaultTypeInternal;
extern CmdEvent_TargetUsersEntry_DoNotUseDefaultTypeInternal _CmdEvent_TargetUsersEntry_DoNotUse_default_instance_;
class CountResponse;
class CountResponseDefaultTypeInternal;
extern CountResponseDefaultTypeInternal _CountResponse_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class IRCEvent;
class IRCEventDefaultTypeInternal;
extern IRCEventDefaultTypeInternal _IRCEvent_default_instance_;
class IRCEventResponse;
class IRCEventResponseDefaultTypeInternal;
extern IRCEventResponseDefaultTypeInternal _IRCEventResponse_default_instance_;
class ListResponse;
class ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutRequest_HostUser;
class LogoutRequest_HostUserDefaultTypeInternal;
extern LogoutRequest_HostUserDefaultTypeInternal _LogoutRequest_HostUser_default_instance_;
class ModeKinds;
class ModeKindsDefaultTypeInternal;
extern ModeKindsDefaultTypeInternal _ModeKinds_default_instance_;
class ModeKinds_ChannelModesEntry_DoNotUse;
class ModeKinds_ChannelModesEntry_DoNotUseDefaultTypeInternal;
extern ModeKinds_ChannelModesEntry_DoNotUseDefaultTypeInternal _ModeKinds_ChannelModesEntry_DoNotUse_default_instance_;
class ModeKinds_UserPrefix;
class ModeKinds_UserPrefixDefaultTypeInternal;
extern ModeKinds_UserPrefixDefaultTypeInternal _ModeKinds_UserPrefix_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class NetworkInfoRequest;
class NetworkInfoRequestDefaultTypeInternal;
extern NetworkInfoRequestDefaultTypeInternal _NetworkInfoRequest_default_instance_;
class NetworkInfo_ExtrasEntry_DoNotUse;
class NetworkInfo_ExtrasEntry_DoNotUseDefaultTypeInternal;
extern NetworkInfo_ExtrasEntry_DoNotUseDefaultTypeInternal _NetworkInfo_ExtrasEntry_DoNotUse_default_instance_;
class NetworkQuery;
class NetworkQueryDefaultTypeInternal;
extern NetworkQueryDefaultTypeInternal _NetworkQuery_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class RegisterCmdRequest;
class RegisterCmdRequestDefaultTypeInternal;
extern RegisterCmdRequestDefaultTypeInternal _RegisterCmdRequest_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SelfResponse;
class SelfResponseDefaultTypeInternal;
extern SelfResponseDefaultTypeInternal _SelfResponse_default_instance_;
class StateChannel;
class StateChannelDefaultTypeInternal;
extern StateChannelDefaultTypeInternal _StateChannel_default_instance_;
class StateUser;
class StateUserDefaultTypeInternal;
extern StateUserDefaultTypeInternal _StateUser_default_instance_;
class StoredChannel;
class StoredChannelDefaultTypeInternal;
extern StoredChannelDefaultTypeInternal _StoredChannel_default_instance_;
class StoredChannel_DataEntry_DoNotUse;
class StoredChannel_DataEntry_DoNotUseDefaultTypeInternal;
extern StoredChannel_DataEntry_DoNotUseDefaultTypeInternal _StoredChannel_DataEntry_DoNotUse_default_instance_;
class StoredChannelsResponse;
class StoredChannelsResponseDefaultTypeInternal;
extern StoredChannelsResponseDefaultTypeInternal _StoredChannelsResponse_default_instance_;
class StoredUser;
class StoredUserDefaultTypeInternal;
extern StoredUserDefaultTypeInternal _StoredUser_default_instance_;
class StoredUser_AccessEntry_DoNotUse;
class StoredUser_AccessEntry_DoNotUseDefaultTypeInternal;
extern StoredUser_AccessEntry_DoNotUseDefaultTypeInternal _StoredUser_AccessEntry_DoNotUse_default_instance_;
class StoredUser_DataEntry_DoNotUse;
class StoredUser_DataEntry_DoNotUseDefaultTypeInternal;
extern StoredUser_DataEntry_DoNotUseDefaultTypeInternal _StoredUser_DataEntry_DoNotUse_default_instance_;
class StoredUsersResponse;
class StoredUsersResponseDefaultTypeInternal;
extern StoredUsersResponseDefaultTypeInternal _StoredUsersResponse_default_instance_;
class SubscriptionRequest;
class SubscriptionRequestDefaultTypeInternal;
extern SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
class UnregisterAllRequest;
class UnregisterAllRequestDefaultTypeInternal;
extern UnregisterAllRequestDefaultTypeInternal _UnregisterAllRequest_default_instance_;
class UnregisterRequest;
class UnregisterRequestDefaultTypeInternal;
extern UnregisterRequestDefaultTypeInternal _UnregisterRequest_default_instance_;
class UserModes;
class UserModesDefaultTypeInternal;
extern UserModesDefaultTypeInternal _UserModes_default_instance_;
class UserModesResponse;
class UserModesResponseDefaultTypeInternal;
extern UserModesResponseDefaultTypeInternal _UserModesResponse_default_instance_;
class UserResponse;
class UserResponseDefaultTypeInternal;
extern UserResponseDefaultTypeInternal _UserResponse_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::Access* Arena::CreateMaybeMessage<::api::Access>(Arena*);
template<> ::api::AuthUserRequest* Arena::CreateMaybeMessage<::api::AuthUserRequest>(Arena*);
template<> ::api::ChannelModes* Arena::CreateMaybeMessage<::api::ChannelModes>(Arena*);
template<> ::api::ChannelModes_AddressMode* Arena::CreateMaybeMessage<::api::ChannelModes_AddressMode>(Arena*);
template<> ::api::ChannelModes_AddressModesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::ChannelModes_AddressModesEntry_DoNotUse>(Arena*);
template<> ::api::ChannelModes_ArgModesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::ChannelModes_ArgModesEntry_DoNotUse>(Arena*);
template<> ::api::ChannelModes_ModesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::ChannelModes_ModesEntry_DoNotUse>(Arena*);
template<> ::api::ChannelQuery* Arena::CreateMaybeMessage<::api::ChannelQuery>(Arena*);
template<> ::api::ChannelResponse* Arena::CreateMaybeMessage<::api::ChannelResponse>(Arena*);
template<> ::api::Cmd* Arena::CreateMaybeMessage<::api::Cmd>(Arena*);
template<> ::api::CmdEvent* Arena::CreateMaybeMessage<::api::CmdEvent>(Arena*);
template<> ::api::CmdEventResponse* Arena::CreateMaybeMessage<::api::CmdEventResponse>(Arena*);
template<> ::api::CmdEvent_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::CmdEvent_ArgsEntry_DoNotUse>(Arena*);
template<> ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse* Arena::CreateMaybeMessage<::api::CmdEvent_TargetStoredUsersEntry_DoNotUse>(Arena*);
template<> ::api::CmdEvent_TargetUsersEntry_DoNotUse* Arena::CreateMaybeMessage<::api::CmdEvent_TargetUsersEntry_DoNotUse>(Arena*);
template<> ::api::CountResponse* Arena::CreateMaybeMessage<::api::CountResponse>(Arena*);
template<> ::api::Empty* Arena::CreateMaybeMessage<::api::Empty>(Arena*);
template<> ::api::IRCEvent* Arena::CreateMaybeMessage<::api::IRCEvent>(Arena*);
template<> ::api::IRCEventResponse* Arena::CreateMaybeMessage<::api::IRCEventResponse>(Arena*);
template<> ::api::ListResponse* Arena::CreateMaybeMessage<::api::ListResponse>(Arena*);
template<> ::api::LogoutRequest* Arena::CreateMaybeMessage<::api::LogoutRequest>(Arena*);
template<> ::api::LogoutRequest_HostUser* Arena::CreateMaybeMessage<::api::LogoutRequest_HostUser>(Arena*);
template<> ::api::ModeKinds* Arena::CreateMaybeMessage<::api::ModeKinds>(Arena*);
template<> ::api::ModeKinds_ChannelModesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::ModeKinds_ChannelModesEntry_DoNotUse>(Arena*);
template<> ::api::ModeKinds_UserPrefix* Arena::CreateMaybeMessage<::api::ModeKinds_UserPrefix>(Arena*);
template<> ::api::NetworkInfo* Arena::CreateMaybeMessage<::api::NetworkInfo>(Arena*);
template<> ::api::NetworkInfoRequest* Arena::CreateMaybeMessage<::api::NetworkInfoRequest>(Arena*);
template<> ::api::NetworkInfo_ExtrasEntry_DoNotUse* Arena::CreateMaybeMessage<::api::NetworkInfo_ExtrasEntry_DoNotUse>(Arena*);
template<> ::api::NetworkQuery* Arena::CreateMaybeMessage<::api::NetworkQuery>(Arena*);
template<> ::api::Query* Arena::CreateMaybeMessage<::api::Query>(Arena*);
template<> ::api::RegisterCmdRequest* Arena::CreateMaybeMessage<::api::RegisterCmdRequest>(Arena*);
template<> ::api::RegisterRequest* Arena::CreateMaybeMessage<::api::RegisterRequest>(Arena*);
template<> ::api::RegisterResponse* Arena::CreateMaybeMessage<::api::RegisterResponse>(Arena*);
template<> ::api::Result* Arena::CreateMaybeMessage<::api::Result>(Arena*);
template<> ::api::SelfResponse* Arena::CreateMaybeMessage<::api::SelfResponse>(Arena*);
template<> ::api::StateChannel* Arena::CreateMaybeMessage<::api::StateChannel>(Arena*);
template<> ::api::StateUser* Arena::CreateMaybeMessage<::api::StateUser>(Arena*);
template<> ::api::StoredChannel* Arena::CreateMaybeMessage<::api::StoredChannel>(Arena*);
template<> ::api::StoredChannel_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::StoredChannel_DataEntry_DoNotUse>(Arena*);
template<> ::api::StoredChannelsResponse* Arena::CreateMaybeMessage<::api::StoredChannelsResponse>(Arena*);
template<> ::api::StoredUser* Arena::CreateMaybeMessage<::api::StoredUser>(Arena*);
template<> ::api::StoredUser_AccessEntry_DoNotUse* Arena::CreateMaybeMessage<::api::StoredUser_AccessEntry_DoNotUse>(Arena*);
template<> ::api::StoredUser_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::StoredUser_DataEntry_DoNotUse>(Arena*);
template<> ::api::StoredUsersResponse* Arena::CreateMaybeMessage<::api::StoredUsersResponse>(Arena*);
template<> ::api::SubscriptionRequest* Arena::CreateMaybeMessage<::api::SubscriptionRequest>(Arena*);
template<> ::api::UnregisterAllRequest* Arena::CreateMaybeMessage<::api::UnregisterAllRequest>(Arena*);
template<> ::api::UnregisterRequest* Arena::CreateMaybeMessage<::api::UnregisterRequest>(Arena*);
template<> ::api::UserModes* Arena::CreateMaybeMessage<::api::UserModes>(Arena*);
template<> ::api::UserModesResponse* Arena::CreateMaybeMessage<::api::UserModesResponse>(Arena*);
template<> ::api::UserResponse* Arena::CreateMaybeMessage<::api::UserResponse>(Arena*);
template<> ::api::WriteRequest* Arena::CreateMaybeMessage<::api::WriteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

enum Cmd_Kind {
  Cmd_Kind_Privmsg = 0,
  Cmd_Kind_Notice = 1,
  Cmd_Kind_AnyKind = 2,
  Cmd_Kind_Cmd_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Cmd_Kind_Cmd_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Cmd_Kind_IsValid(int value);
const Cmd_Kind Cmd_Kind_Kind_MIN = Cmd_Kind_Privmsg;
const Cmd_Kind Cmd_Kind_Kind_MAX = Cmd_Kind_AnyKind;
const int Cmd_Kind_Kind_ARRAYSIZE = Cmd_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cmd_Kind_descriptor();
inline const ::std::string& Cmd_Kind_Name(Cmd_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cmd_Kind_descriptor(), value);
}
inline bool Cmd_Kind_Parse(
    const ::std::string& name, Cmd_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cmd_Kind>(
    Cmd_Kind_descriptor(), name, value);
}
enum Cmd_Scope {
  Cmd_Scope_Private = 0,
  Cmd_Scope_Public = 1,
  Cmd_Scope_AnyScope = 2,
  Cmd_Scope_Cmd_Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Cmd_Scope_Cmd_Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Cmd_Scope_IsValid(int value);
const Cmd_Scope Cmd_Scope_Scope_MIN = Cmd_Scope_Private;
const Cmd_Scope Cmd_Scope_Scope_MAX = Cmd_Scope_AnyScope;
const int Cmd_Scope_Scope_ARRAYSIZE = Cmd_Scope_Scope_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cmd_Scope_descriptor();
inline const ::std::string& Cmd_Scope_Name(Cmd_Scope value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cmd_Scope_descriptor(), value);
}
inline bool Cmd_Scope_Parse(
    const ::std::string& name, Cmd_Scope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cmd_Scope>(
    Cmd_Scope_descriptor(), name, value);
}
// ===================================================================

class Empty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.Empty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:api.Result)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ok_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class Query final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:api.Query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ListResponse) */ {
 public:
  ListResponse();
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ListResponse* other);
  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return CreateMaybeMessage<ListResponse>(nullptr);
  }

  ListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_list();

  // @@protoc_insertion_point(class_scope:api.ListResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class CountResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CountResponse) */ {
 public:
  CountResponse();
  virtual ~CountResponse();

  CountResponse(const CountResponse& from);

  inline CountResponse& operator=(const CountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountResponse(CountResponse&& from) noexcept
    : CountResponse() {
    *this = ::std::move(from);
  }

  inline CountResponse& operator=(CountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountResponse* internal_default_instance() {
    return reinterpret_cast<const CountResponse*>(
               &_CountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CountResponse* other);
  friend void swap(CountResponse& a, CountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountResponse* New() const final {
    return CreateMaybeMessage<CountResponse>(nullptr);
  }

  CountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountResponse& from);
  void MergeFrom(const CountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:api.CountResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class Access final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Access) */ {
 public:
  Access();
  virtual ~Access();

  Access(const Access& from);

  inline Access& operator=(const Access& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Access(Access&& from) noexcept
    : Access() {
    *this = ::std::move(from);
  }

  inline Access& operator=(Access&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Access& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Access* internal_default_instance() {
    return reinterpret_cast<const Access*>(
               &_Access_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Access* other);
  friend void swap(Access& a, Access& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Access* New() const final {
    return CreateMaybeMessage<Access>(nullptr);
  }

  Access* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Access>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Access& from);
  void MergeFrom(const Access& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Access* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint64 flags() const;
  void set_flags(::google::protobuf::uint64 value);

  // uint32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:api.Access)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 flags_;
  ::google::protobuf::uint32 level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ChannelModes_AddressMode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChannelModes.AddressMode) */ {
 public:
  ChannelModes_AddressMode();
  virtual ~ChannelModes_AddressMode();

  ChannelModes_AddressMode(const ChannelModes_AddressMode& from);

  inline ChannelModes_AddressMode& operator=(const ChannelModes_AddressMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelModes_AddressMode(ChannelModes_AddressMode&& from) noexcept
    : ChannelModes_AddressMode() {
    *this = ::std::move(from);
  }

  inline ChannelModes_AddressMode& operator=(ChannelModes_AddressMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChannelModes_AddressMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelModes_AddressMode* internal_default_instance() {
    return reinterpret_cast<const ChannelModes_AddressMode*>(
               &_ChannelModes_AddressMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ChannelModes_AddressMode* other);
  friend void swap(ChannelModes_AddressMode& a, ChannelModes_AddressMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelModes_AddressMode* New() const final {
    return CreateMaybeMessage<ChannelModes_AddressMode>(nullptr);
  }

  ChannelModes_AddressMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelModes_AddressMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelModes_AddressMode& from);
  void MergeFrom(const ChannelModes_AddressMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelModes_AddressMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mode_addresses = 1;
  int mode_addresses_size() const;
  void clear_mode_addresses();
  static const int kModeAddressesFieldNumber = 1;
  const ::std::string& mode_addresses(int index) const;
  ::std::string* mutable_mode_addresses(int index);
  void set_mode_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mode_addresses(int index, ::std::string&& value);
  #endif
  void set_mode_addresses(int index, const char* value);
  void set_mode_addresses(int index, const char* value, size_t size);
  ::std::string* add_mode_addresses();
  void add_mode_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_mode_addresses(::std::string&& value);
  #endif
  void add_mode_addresses(const char* value);
  void add_mode_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& mode_addresses() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_mode_addresses();

  // @@protoc_insertion_point(class_scope:api.ChannelModes.AddressMode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> mode_addresses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ChannelModes_ModesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ChannelModes_ModesEntry_DoNotUse, 
    ::std::string, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ChannelModes_ModesEntry_DoNotUse, 
    ::std::string, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  ChannelModes_ModesEntry_DoNotUse();
  ChannelModes_ModesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ChannelModes_ModesEntry_DoNotUse& other);
  static const ChannelModes_ModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChannelModes_ModesEntry_DoNotUse*>(&_ChannelModes_ModesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ChannelModes_ArgModesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ChannelModes_ArgModesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ChannelModes_ArgModesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ChannelModes_ArgModesEntry_DoNotUse();
  ChannelModes_ArgModesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ChannelModes_ArgModesEntry_DoNotUse& other);
  static const ChannelModes_ArgModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChannelModes_ArgModesEntry_DoNotUse*>(&_ChannelModes_ArgModesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ChannelModes_AddressModesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ChannelModes_AddressModesEntry_DoNotUse, 
    ::std::string, ::api::ChannelModes_AddressMode,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ChannelModes_AddressModesEntry_DoNotUse, 
    ::std::string, ::api::ChannelModes_AddressMode,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ChannelModes_AddressModesEntry_DoNotUse();
  ChannelModes_AddressModesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ChannelModes_AddressModesEntry_DoNotUse& other);
  static const ChannelModes_AddressModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChannelModes_AddressModesEntry_DoNotUse*>(&_ChannelModes_AddressModesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ChannelModes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChannelModes) */ {
 public:
  ChannelModes();
  virtual ~ChannelModes();

  ChannelModes(const ChannelModes& from);

  inline ChannelModes& operator=(const ChannelModes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelModes(ChannelModes&& from) noexcept
    : ChannelModes() {
    *this = ::std::move(from);
  }

  inline ChannelModes& operator=(ChannelModes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChannelModes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelModes* internal_default_instance() {
    return reinterpret_cast<const ChannelModes*>(
               &_ChannelModes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ChannelModes* other);
  friend void swap(ChannelModes& a, ChannelModes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelModes* New() const final {
    return CreateMaybeMessage<ChannelModes>(nullptr);
  }

  ChannelModes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelModes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelModes& from);
  void MergeFrom(const ChannelModes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelModes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelModes_AddressMode AddressMode;

  // accessors -------------------------------------------------------

  // map<string, bool> modes = 1;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, bool >&
      modes() const;
  ::google::protobuf::Map< ::std::string, bool >*
      mutable_modes();

  // map<string, string> arg_modes = 2;
  int arg_modes_size() const;
  void clear_arg_modes();
  static const int kArgModesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      arg_modes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_arg_modes();

  // map<string, .api.ChannelModes.AddressMode> address_modes = 3;
  int address_modes_size() const;
  void clear_address_modes();
  static const int kAddressModesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >&
      address_modes() const;
  ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >*
      mutable_address_modes();

  // .api.ModeKinds kinds = 5;
  bool has_kinds() const;
  void clear_kinds();
  static const int kKindsFieldNumber = 5;
  const ::api::ModeKinds& kinds() const;
  ::api::ModeKinds* release_kinds();
  ::api::ModeKinds* mutable_kinds();
  void set_allocated_kinds(::api::ModeKinds* kinds);

  // int32 addresses = 4;
  void clear_addresses();
  static const int kAddressesFieldNumber = 4;
  ::google::protobuf::int32 addresses() const;
  void set_addresses(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:api.ChannelModes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ChannelModes_ModesEntry_DoNotUse,
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 > modes_;
  ::google::protobuf::internal::MapField<
      ChannelModes_ArgModesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > arg_modes_;
  ::google::protobuf::internal::MapField<
      ChannelModes_AddressModesEntry_DoNotUse,
      ::std::string, ::api::ChannelModes_AddressMode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > address_modes_;
  ::api::ModeKinds* kinds_;
  ::google::protobuf::int32 addresses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class StateUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StateUser) */ {
 public:
  StateUser();
  virtual ~StateUser();

  StateUser(const StateUser& from);

  inline StateUser& operator=(const StateUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateUser(StateUser&& from) noexcept
    : StateUser() {
    *this = ::std::move(from);
  }

  inline StateUser& operator=(StateUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StateUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateUser* internal_default_instance() {
    return reinterpret_cast<const StateUser*>(
               &_StateUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(StateUser* other);
  friend void swap(StateUser& a, StateUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateUser* New() const final {
    return CreateMaybeMessage<StateUser>(nullptr);
  }

  StateUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateUser& from);
  void MergeFrom(const StateUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string realname = 2;
  void clear_realname();
  static const int kRealnameFieldNumber = 2;
  const ::std::string& realname() const;
  void set_realname(const ::std::string& value);
  #if LANG_CXX11
  void set_realname(::std::string&& value);
  #endif
  void set_realname(const char* value);
  void set_realname(const char* value, size_t size);
  ::std::string* mutable_realname();
  ::std::string* release_realname();
  void set_allocated_realname(::std::string* realname);

  // @@protoc_insertion_point(class_scope:api.StateUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class StateChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StateChannel) */ {
 public:
  StateChannel();
  virtual ~StateChannel();

  StateChannel(const StateChannel& from);

  inline StateChannel& operator=(const StateChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateChannel(StateChannel&& from) noexcept
    : StateChannel() {
    *this = ::std::move(from);
  }

  inline StateChannel& operator=(StateChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StateChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateChannel* internal_default_instance() {
    return reinterpret_cast<const StateChannel*>(
               &_StateChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StateChannel* other);
  friend void swap(StateChannel& a, StateChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateChannel* New() const final {
    return CreateMaybeMessage<StateChannel>(nullptr);
  }

  StateChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateChannel& from);
  void MergeFrom(const StateChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .api.ChannelModes modes = 3;
  bool has_modes() const;
  void clear_modes();
  static const int kModesFieldNumber = 3;
  const ::api::ChannelModes& modes() const;
  ::api::ChannelModes* release_modes();
  ::api::ChannelModes* mutable_modes();
  void set_allocated_modes(::api::ChannelModes* modes);

  // @@protoc_insertion_point(class_scope:api.StateChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::api::ChannelModes* modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class UserModes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserModes) */ {
 public:
  UserModes();
  virtual ~UserModes();

  UserModes(const UserModes& from);

  inline UserModes& operator=(const UserModes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserModes(UserModes&& from) noexcept
    : UserModes() {
    *this = ::std::move(from);
  }

  inline UserModes& operator=(UserModes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserModes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserModes* internal_default_instance() {
    return reinterpret_cast<const UserModes*>(
               &_UserModes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UserModes* other);
  friend void swap(UserModes& a, UserModes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserModes* New() const final {
    return CreateMaybeMessage<UserModes>(nullptr);
  }

  UserModes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserModes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserModes& from);
  void MergeFrom(const UserModes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserModes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.ModeKinds kinds = 1;
  bool has_kinds() const;
  void clear_kinds();
  static const int kKindsFieldNumber = 1;
  const ::api::ModeKinds& kinds() const;
  ::api::ModeKinds* release_kinds();
  ::api::ModeKinds* mutable_kinds();
  void set_allocated_kinds(::api::ModeKinds* kinds);

  // int32 modes = 2;
  void clear_modes();
  static const int kModesFieldNumber = 2;
  ::google::protobuf::int32 modes() const;
  void set_modes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:api.UserModes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::ModeKinds* kinds_;
  ::google::protobuf::int32 modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ModeKinds_UserPrefix final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ModeKinds.UserPrefix) */ {
 public:
  ModeKinds_UserPrefix();
  virtual ~ModeKinds_UserPrefix();

  ModeKinds_UserPrefix(const ModeKinds_UserPrefix& from);

  inline ModeKinds_UserPrefix& operator=(const ModeKinds_UserPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModeKinds_UserPrefix(ModeKinds_UserPrefix&& from) noexcept
    : ModeKinds_UserPrefix() {
    *this = ::std::move(from);
  }

  inline ModeKinds_UserPrefix& operator=(ModeKinds_UserPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ModeKinds_UserPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModeKinds_UserPrefix* internal_default_instance() {
    return reinterpret_cast<const ModeKinds_UserPrefix*>(
               &_ModeKinds_UserPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ModeKinds_UserPrefix* other);
  friend void swap(ModeKinds_UserPrefix& a, ModeKinds_UserPrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModeKinds_UserPrefix* New() const final {
    return CreateMaybeMessage<ModeKinds_UserPrefix>(nullptr);
  }

  ModeKinds_UserPrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModeKinds_UserPrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModeKinds_UserPrefix& from);
  void MergeFrom(const ModeKinds_UserPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeKinds_UserPrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string char = 2;
  void clear_char_();
  static const int kCharFieldNumber = 2;
  const ::std::string& char_() const;
  void set_char_(const ::std::string& value);
  #if LANG_CXX11
  void set_char_(::std::string&& value);
  #endif
  void set_char_(const char* value);
  void set_char_(const char* value, size_t size);
  ::std::string* mutable_char_();
  ::std::string* release_char_();
  void set_allocated_char_(::std::string* char_);

  // @@protoc_insertion_point(class_scope:api.ModeKinds.UserPrefix)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr char__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ModeKinds_ChannelModesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ModeKinds_ChannelModesEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ModeKinds_ChannelModesEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  ModeKinds_ChannelModesEntry_DoNotUse();
  ModeKinds_ChannelModesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ModeKinds_ChannelModesEntry_DoNotUse& other);
  static const ModeKinds_ChannelModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModeKinds_ChannelModesEntry_DoNotUse*>(&_ModeKinds_ChannelModesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ModeKinds final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ModeKinds) */ {
 public:
  ModeKinds();
  virtual ~ModeKinds();

  ModeKinds(const ModeKinds& from);

  inline ModeKinds& operator=(const ModeKinds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModeKinds(ModeKinds&& from) noexcept
    : ModeKinds() {
    *this = ::std::move(from);
  }

  inline ModeKinds& operator=(ModeKinds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ModeKinds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModeKinds* internal_default_instance() {
    return reinterpret_cast<const ModeKinds*>(
               &_ModeKinds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ModeKinds* other);
  friend void swap(ModeKinds& a, ModeKinds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModeKinds* New() const final {
    return CreateMaybeMessage<ModeKinds>(nullptr);
  }

  ModeKinds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModeKinds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModeKinds& from);
  void MergeFrom(const ModeKinds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeKinds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModeKinds_UserPrefix UserPrefix;

  // accessors -------------------------------------------------------

  // repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
  int user_prefixes_size() const;
  void clear_user_prefixes();
  static const int kUserPrefixesFieldNumber = 1;
  ::api::ModeKinds_UserPrefix* mutable_user_prefixes(int index);
  ::google::protobuf::RepeatedPtrField< ::api::ModeKinds_UserPrefix >*
      mutable_user_prefixes();
  const ::api::ModeKinds_UserPrefix& user_prefixes(int index) const;
  ::api::ModeKinds_UserPrefix* add_user_prefixes();
  const ::google::protobuf::RepeatedPtrField< ::api::ModeKinds_UserPrefix >&
      user_prefixes() const;

  // map<string, int32> channel_modes = 2;
  int channel_modes_size() const;
  void clear_channel_modes();
  static const int kChannelModesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      channel_modes() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_channel_modes();

  // @@protoc_insertion_point(class_scope:api.ModeKinds)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::ModeKinds_UserPrefix > user_prefixes_;
  ::google::protobuf::internal::MapField<
      ModeKinds_ChannelModesEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > channel_modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class NetworkInfo_ExtrasEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NetworkInfo_ExtrasEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<NetworkInfo_ExtrasEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NetworkInfo_ExtrasEntry_DoNotUse();
  NetworkInfo_ExtrasEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NetworkInfo_ExtrasEntry_DoNotUse& other);
  static const NetworkInfo_ExtrasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkInfo_ExtrasEntry_DoNotUse*>(&_NetworkInfo_ExtrasEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NetworkInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.NetworkInfo) */ {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(NetworkInfo* other);
  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(nullptr);
  }

  NetworkInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> extras = 18;
  int extras_size() const;
  void clear_extras();
  static const int kExtrasFieldNumber = 18;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      extras() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_extras();

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string ircd_version = 2;
  void clear_ircd_version();
  static const int kIrcdVersionFieldNumber = 2;
  const ::std::string& ircd_version() const;
  void set_ircd_version(const ::std::string& value);
  #if LANG_CXX11
  void set_ircd_version(::std::string&& value);
  #endif
  void set_ircd_version(const char* value);
  void set_ircd_version(const char* value, size_t size);
  ::std::string* mutable_ircd_version();
  ::std::string* release_ircd_version();
  void set_allocated_ircd_version(::std::string* ircd_version);

  // string usermodes = 3;
  void clear_usermodes();
  static const int kUsermodesFieldNumber = 3;
  const ::std::string& usermodes() const;
  void set_usermodes(const ::std::string& value);
  #if LANG_CXX11
  void set_usermodes(::std::string&& value);
  #endif
  void set_usermodes(const char* value);
  void set_usermodes(const char* value, size_t size);
  ::std::string* mutable_usermodes();
  ::std::string* release_usermodes();
  void set_allocated_usermodes(::std::string* usermodes);

  // string lchanmodes = 4;
  void clear_lchanmodes();
  static const int kLchanmodesFieldNumber = 4;
  const ::std::string& lchanmodes() const;
  void set_lchanmodes(const ::std::string& value);
  #if LANG_CXX11
  void set_lchanmodes(::std::string&& value);
  #endif
  void set_lchanmodes(const char* value);
  void set_lchanmodes(const char* value, size_t size);
  ::std::string* mutable_lchanmodes();
  ::std::string* release_lchanmodes();
  void set_allocated_lchanmodes(::std::string* lchanmodes);

  // string rfc = 5;
  void clear_rfc();
  static const int kRfcFieldNumber = 5;
  const ::std::string& rfc() const;
  void set_rfc(const ::std::string& value);
  #if LANG_CXX11
  void set_rfc(::std::string&& value);
  #endif
  void set_rfc(const char* value);
  void set_rfc(const char* value, size_t size);
  ::std::string* mutable_rfc();
  ::std::string* release_rfc();
  void set_allocated_rfc(::std::string* rfc);

  // string ircd = 6;
  void clear_ircd();
  static const int kIrcdFieldNumber = 6;
  const ::std::string& ircd() const;
  void set_ircd(const ::std::string& value);
  #if LANG_CXX11
  void set_ircd(::std::string&& value);
  #endif
  void set_ircd(const char* value);
  void set_ircd(const char* value, size_t size);
  ::std::string* mutable_ircd();
  ::std::string* release_ircd();
  void set_allocated_ircd(::std::string* ircd);

  // string casemapping = 7;
  void clear_casemapping();
  static const int kCasemappingFieldNumber = 7;
  const ::std::string& casemapping() const;
  void set_casemapping(const ::std::string& value);
  #if LANG_CXX11
  void set_casemapping(::std::string&& value);
  #endif
  void set_casemapping(const char* value);
  void set_casemapping(const char* value, size_t size);
  ::std::string* mutable_casemapping();
  ::std::string* release_casemapping();
  void set_allocated_casemapping(::std::string* casemapping);

  // string prefix = 8;
  void clear_prefix();
  static const int kPrefixFieldNumber = 8;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string chantypes = 9;
  void clear_chantypes();
  static const int kChantypesFieldNumber = 9;
  const ::std::string& chantypes() const;
  void set_chantypes(const ::std::string& value);
  #if LANG_CXX11
  void set_chantypes(::std::string&& value);
  #endif
  void set_chantypes(const char* value);
  void set_chantypes(const char* value, size_t size);
  ::std::string* mutable_chantypes();
  ::std::string* release_chantypes();
  void set_allocated_chantypes(::std::string* chantypes);

  // string chanmodes = 10;
  void clear_chanmodes();
  static const int kChanmodesFieldNumber = 10;
  const ::std::string& chanmodes() const;
  void set_chanmodes(const ::std::string& value);
  #if LANG_CXX11
  void set_chanmodes(::std::string&& value);
  #endif
  void set_chanmodes(const char* value);
  void set_chanmodes(const char* value, size_t size);
  ::std::string* mutable_chanmodes();
  ::std::string* release_chanmodes();
  void set_allocated_chanmodes(::std::string* chanmodes);

  // int32 chanlimit = 11;
  void clear_chanlimit();
  static const int kChanlimitFieldNumber = 11;
  ::google::protobuf::int32 chanlimit() const;
  void set_chanlimit(::google::protobuf::int32 value);

  // int32 channellen = 12;
  void clear_channellen();
  static const int kChannellenFieldNumber = 12;
  ::google::protobuf::int32 channellen() const;
  void set_channellen(::google::protobuf::int32 value);

  // int32 nicklen = 13;
  void clear_nicklen();
  static const int kNicklenFieldNumber = 13;
  ::google::protobuf::int32 nicklen() const;
  void set_nicklen(::google::protobuf::int32 value);

  // int32 topiclen = 14;
  void clear_topiclen();
  static const int kTopiclenFieldNumber = 14;
  ::google::protobuf::int32 topiclen() const;
  void set_topiclen(::google::protobuf::int32 value);

  // int32 awaylen = 15;
  void clear_awaylen();
  static const int kAwaylenFieldNumber = 15;
  ::google::protobuf::int32 awaylen() const;
  void set_awaylen(::google::protobuf::int32 value);

  // int32 kicklen = 16;
  void clear_kicklen();
  static const int kKicklenFieldNumber = 16;
  ::google::protobuf::int32 kicklen() const;
  void set_kicklen(::google::protobuf::int32 value);

  // int32 modes = 17;
  void clear_modes();
  static const int kModesFieldNumber = 17;
  ::google::protobuf::int32 modes() const;
  void set_modes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:api.NetworkInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      NetworkInfo_ExtrasEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > extras_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr ircd_version_;
  ::google::protobuf::internal::ArenaStringPtr usermodes_;
  ::google::protobuf::internal::ArenaStringPtr lchanmodes_;
  ::google::protobuf::internal::ArenaStringPtr rfc_;
  ::google::protobuf::internal::ArenaStringPtr ircd_;
  ::google::protobuf::internal::ArenaStringPtr casemapping_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr chantypes_;
  ::google::protobuf::internal::ArenaStringPtr chanmodes_;
  ::google::protobuf::int32 chanlimit_;
  ::google::protobuf::int32 channellen_;
  ::google::protobuf::int32 nicklen_;
  ::google::protobuf::int32 topiclen_;
  ::google::protobuf::int32 awaylen_;
  ::google::protobuf::int32 kicklen_;
  ::google::protobuf::int32 modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class StoredUser_AccessEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StoredUser_AccessEntry_DoNotUse, 
    ::std::string, ::api::Access,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<StoredUser_AccessEntry_DoNotUse, 
    ::std::string, ::api::Access,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StoredUser_AccessEntry_DoNotUse();
  StoredUser_AccessEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StoredUser_AccessEntry_DoNotUse& other);
  static const StoredUser_AccessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StoredUser_AccessEntry_DoNotUse*>(&_StoredUser_AccessEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StoredUser_DataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StoredUser_DataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<StoredUser_DataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StoredUser_DataEntry_DoNotUse();
  StoredUser_DataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StoredUser_DataEntry_DoNotUse& other);
  static const StoredUser_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StoredUser_DataEntry_DoNotUse*>(&_StoredUser_DataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StoredUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StoredUser) */ {
 public:
  StoredUser();
  virtual ~StoredUser();

  StoredUser(const StoredUser& from);

  inline StoredUser& operator=(const StoredUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredUser(StoredUser&& from) noexcept
    : StoredUser() {
    *this = ::std::move(from);
  }

  inline StoredUser& operator=(StoredUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StoredUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredUser* internal_default_instance() {
    return reinterpret_cast<const StoredUser*>(
               &_StoredUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(StoredUser* other);
  friend void swap(StoredUser& a, StoredUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredUser* New() const final {
    return CreateMaybeMessage<StoredUser>(nullptr);
  }

  StoredUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredUser& from);
  void MergeFrom(const StoredUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string masks = 3;
  int masks_size() const;
  void clear_masks();
  static const int kMasksFieldNumber = 3;
  const ::std::string& masks(int index) const;
  ::std::string* mutable_masks(int index);
  void set_masks(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_masks(int index, ::std::string&& value);
  #endif
  void set_masks(int index, const char* value);
  void set_masks(int index, const char* value, size_t size);
  ::std::string* add_masks();
  void add_masks(const ::std::string& value);
  #if LANG_CXX11
  void add_masks(::std::string&& value);
  #endif
  void add_masks(const char* value);
  void add_masks(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& masks() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_masks();

  // map<string, .api.Access> access = 4;
  int access_size() const;
  void clear_access();
  static const int kAccessFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::api::Access >&
      access() const;
  ::google::protobuf::Map< ::std::string, ::api::Access >*
      mutable_access();

  // map<string, string> data = 5;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      data() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_data();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:api.StoredUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> masks_;
  ::google::protobuf::internal::MapField<
      StoredUser_AccessEntry_DoNotUse,
      ::std::string, ::api::Access,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > access_;
  ::google::protobuf::internal::MapField<
      StoredUser_DataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > data_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class StoredChannel_DataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StoredChannel_DataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<StoredChannel_DataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StoredChannel_DataEntry_DoNotUse();
  StoredChannel_DataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StoredChannel_DataEntry_DoNotUse& other);
  static const StoredChannel_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StoredChannel_DataEntry_DoNotUse*>(&_StoredChannel_DataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StoredChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StoredChannel) */ {
 public:
  StoredChannel();
  virtual ~StoredChannel();

  StoredChannel(const StoredChannel& from);

  inline StoredChannel& operator=(const StoredChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredChannel(StoredChannel&& from) noexcept
    : StoredChannel() {
    *this = ::std::move(from);
  }

  inline StoredChannel& operator=(StoredChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StoredChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredChannel* internal_default_instance() {
    return reinterpret_cast<const StoredChannel*>(
               &_StoredChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(StoredChannel* other);
  friend void swap(StoredChannel& a, StoredChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredChannel* New() const final {
    return CreateMaybeMessage<StoredChannel>(nullptr);
  }

  StoredChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredChannel& from);
  void MergeFrom(const StoredChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      data() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_data();

  // string net = 1;
  void clear_net();
  static const int kNetFieldNumber = 1;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:api.StoredChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      StoredChannel_DataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > data_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class SelfResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SelfResponse) */ {
 public:
  SelfResponse();
  virtual ~SelfResponse();

  SelfResponse(const SelfResponse& from);

  inline SelfResponse& operator=(const SelfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelfResponse(SelfResponse&& from) noexcept
    : SelfResponse() {
    *this = ::std::move(from);
  }

  inline SelfResponse& operator=(SelfResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SelfResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfResponse* internal_default_instance() {
    return reinterpret_cast<const SelfResponse*>(
               &_SelfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(SelfResponse* other);
  friend void swap(SelfResponse& a, SelfResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelfResponse* New() const final {
    return CreateMaybeMessage<SelfResponse>(nullptr);
  }

  SelfResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SelfResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SelfResponse& from);
  void MergeFrom(const SelfResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.StateUser user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::api::StateUser& user() const;
  ::api::StateUser* release_user();
  ::api::StateUser* mutable_user();
  void set_allocated_user(::api::StateUser* user);

  // .api.ChannelModes modes = 2;
  bool has_modes() const;
  void clear_modes();
  static const int kModesFieldNumber = 2;
  const ::api::ChannelModes& modes() const;
  ::api::ChannelModes* release_modes();
  ::api::ChannelModes* mutable_modes();
  void set_allocated_modes(::api::ChannelModes* modes);

  // @@protoc_insertion_point(class_scope:api.SelfResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::StateUser* user_;
  ::api::ChannelModes* modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class NetworkQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.NetworkQuery) */ {
 public:
  NetworkQuery();
  virtual ~NetworkQuery();

  NetworkQuery(const NetworkQuery& from);

  inline NetworkQuery& operator=(const NetworkQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkQuery(NetworkQuery&& from) noexcept
    : NetworkQuery() {
    *this = ::std::move(from);
  }

  inline NetworkQuery& operator=(NetworkQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetworkQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkQuery* internal_default_instance() {
    return reinterpret_cast<const NetworkQuery*>(
               &_NetworkQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(NetworkQuery* other);
  friend void swap(NetworkQuery& a, NetworkQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkQuery* New() const final {
    return CreateMaybeMessage<NetworkQuery>(nullptr);
  }

  NetworkQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkQuery& from);
  void MergeFrom(const NetworkQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string net = 1;
  void clear_net();
  static const int kNetFieldNumber = 1;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // string query = 2;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:api.NetworkQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ChannelQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChannelQuery) */ {
 public:
  ChannelQuery();
  virtual ~ChannelQuery();

  ChannelQuery(const ChannelQuery& from);

  inline ChannelQuery& operator=(const ChannelQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelQuery(ChannelQuery&& from) noexcept
    : ChannelQuery() {
    *this = ::std::move(from);
  }

  inline ChannelQuery& operator=(ChannelQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChannelQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelQuery* internal_default_instance() {
    return reinterpret_cast<const ChannelQuery*>(
               &_ChannelQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ChannelQuery* other);
  friend void swap(ChannelQuery& a, ChannelQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelQuery* New() const final {
    return CreateMaybeMessage<ChannelQuery>(nullptr);
  }

  ChannelQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelQuery& from);
  void MergeFrom(const ChannelQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string net = 1;
  void clear_net();
  static const int kNetFieldNumber = 1;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // string channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string query = 3;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:api.ChannelQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class AuthUserRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AuthUserRequest) */ {
 public:
  AuthUserRequest();
  virtual ~AuthUserRequest();

  AuthUserRequest(const AuthUserRequest& from);

  inline AuthUserRequest& operator=(const AuthUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthUserRequest(AuthUserRequest&& from) noexcept
    : AuthUserRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserRequest& operator=(AuthUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserRequest*>(
               &_AuthUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(AuthUserRequest* other);
  friend void swap(AuthUserRequest& a, AuthUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthUserRequest* New() const final {
    return CreateMaybeMessage<AuthUserRequest>(nullptr);
  }

  AuthUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthUserRequest& from);
  void MergeFrom(const AuthUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string net = 1;
  void clear_net();
  static const int kNetFieldNumber = 1;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bool permanent = 5;
  void clear_permanent();
  static const int kPermanentFieldNumber = 5;
  bool permanent() const;
  void set_permanent(bool value);

  // @@protoc_insertion_point(class_scope:api.AuthUserRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  bool permanent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class UserResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserResponse) */ {
 public:
  UserResponse();
  virtual ~UserResponse();

  UserResponse(const UserResponse& from);

  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserResponse(UserResponse&& from) noexcept
    : UserResponse() {
    *this = ::std::move(from);
  }

  inline UserResponse& operator=(UserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserResponse* internal_default_instance() {
    return reinterpret_cast<const UserResponse*>(
               &_UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(UserResponse* other);
  friend void swap(UserResponse& a, UserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserResponse* New() const final {
    return CreateMaybeMessage<UserResponse>(nullptr);
  }

  UserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserResponse& from);
  void MergeFrom(const UserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.StateUser self = 1;
  bool has_self() const;
  void clear_self();
  static const int kSelfFieldNumber = 1;
  const ::api::StateUser& self() const;
  ::api::StateUser* release_self();
  ::api::StateUser* mutable_self();
  void set_allocated_self(::api::StateUser* self);

  // @@protoc_insertion_point(class_scope:api.UserResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::StateUser* self_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class UserModesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserModesResponse) */ {
 public:
  UserModesResponse();
  virtual ~UserModesResponse();

  UserModesResponse(const UserModesResponse& from);

  inline UserModesResponse& operator=(const UserModesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserModesResponse(UserModesResponse&& from) noexcept
    : UserModesResponse() {
    *this = ::std::move(from);
  }

  inline UserModesResponse& operator=(UserModesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserModesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserModesResponse* internal_default_instance() {
    return reinterpret_cast<const UserModesResponse*>(
               &_UserModesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(UserModesResponse* other);
  friend void swap(UserModesResponse& a, UserModesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserModesResponse* New() const final {
    return CreateMaybeMessage<UserModesResponse>(nullptr);
  }

  UserModesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserModesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserModesResponse& from);
  void MergeFrom(const UserModesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserModesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.ChannelModes modes = 1;
  bool has_modes() const;
  void clear_modes();
  static const int kModesFieldNumber = 1;
  const ::api::ChannelModes& modes() const;
  ::api::ChannelModes* release_modes();
  ::api::ChannelModes* mutable_modes();
  void set_allocated_modes(::api::ChannelModes* modes);

  // @@protoc_insertion_point(class_scope:api.UserModesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::ChannelModes* modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class ChannelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChannelResponse) */ {
 public:
  ChannelResponse();
  virtual ~ChannelResponse();

  ChannelResponse(const ChannelResponse& from);

  inline ChannelResponse& operator=(const ChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelResponse(ChannelResponse&& from) noexcept
    : ChannelResponse() {
    *this = ::std::move(from);
  }

  inline ChannelResponse& operator=(ChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelResponse*>(
               &_ChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ChannelResponse* other);
  friend void swap(ChannelResponse& a, ChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelResponse* New() const final {
    return CreateMaybeMessage<ChannelResponse>(nullptr);
  }

  ChannelResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelResponse& from);
  void MergeFrom(const ChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .api.ChannelModes modes = 3;
  bool has_modes() const;
  void clear_modes();
  static const int kModesFieldNumber = 3;
  const ::api::ChannelModes& modes() const;
  ::api::ChannelModes* release_modes();
  ::api::ChannelModes* mutable_modes();
  void set_allocated_modes(::api::ChannelModes* modes);

  // @@protoc_insertion_point(class_scope:api.ChannelResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::api::ChannelModes* modes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class StoredUsersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StoredUsersResponse) */ {
 public:
  StoredUsersResponse();
  virtual ~StoredUsersResponse();

  StoredUsersResponse(const StoredUsersResponse& from);

  inline StoredUsersResponse& operator=(const StoredUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredUsersResponse(StoredUsersResponse&& from) noexcept
    : StoredUsersResponse() {
    *this = ::std::move(from);
  }

  inline StoredUsersResponse& operator=(StoredUsersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StoredUsersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredUsersResponse* internal_default_instance() {
    return reinterpret_cast<const StoredUsersResponse*>(
               &_StoredUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(StoredUsersResponse* other);
  friend void swap(StoredUsersResponse& a, StoredUsersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredUsersResponse* New() const final {
    return CreateMaybeMessage<StoredUsersResponse>(nullptr);
  }

  StoredUsersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredUsersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredUsersResponse& from);
  void MergeFrom(const StoredUsersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredUsersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.StoredUser users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::api::StoredUser* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::api::StoredUser >*
      mutable_users();
  const ::api::StoredUser& users(int index) const;
  ::api::StoredUser* add_users();
  const ::google::protobuf::RepeatedPtrField< ::api::StoredUser >&
      users() const;

  // @@protoc_insertion_point(class_scope:api.StoredUsersResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::StoredUser > users_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class StoredChannelsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StoredChannelsResponse) */ {
 public:
  StoredChannelsResponse();
  virtual ~StoredChannelsResponse();

  StoredChannelsResponse(const StoredChannelsResponse& from);

  inline StoredChannelsResponse& operator=(const StoredChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredChannelsResponse(StoredChannelsResponse&& from) noexcept
    : StoredChannelsResponse() {
    *this = ::std::move(from);
  }

  inline StoredChannelsResponse& operator=(StoredChannelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StoredChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const StoredChannelsResponse*>(
               &_StoredChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(StoredChannelsResponse* other);
  friend void swap(StoredChannelsResponse& a, StoredChannelsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredChannelsResponse* New() const final {
    return CreateMaybeMessage<StoredChannelsResponse>(nullptr);
  }

  StoredChannelsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredChannelsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredChannelsResponse& from);
  void MergeFrom(const StoredChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredChannelsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.StoredChannel channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::api::StoredChannel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::api::StoredChannel >*
      mutable_channels();
  const ::api::StoredChannel& channels(int index) const;
  ::api::StoredChannel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::api::StoredChannel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:api.StoredChannelsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::StoredChannel > channels_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest_HostUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.LogoutRequest.HostUser) */ {
 public:
  LogoutRequest_HostUser();
  virtual ~LogoutRequest_HostUser();

  LogoutRequest_HostUser(const LogoutRequest_HostUser& from);

  inline LogoutRequest_HostUser& operator=(const LogoutRequest_HostUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequest_HostUser(LogoutRequest_HostUser&& from) noexcept
    : LogoutRequest_HostUser() {
    *this = ::std::move(from);
  }

  inline LogoutRequest_HostUser& operator=(LogoutRequest_HostUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogoutRequest_HostUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest_HostUser* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest_HostUser*>(
               &_LogoutRequest_HostUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(LogoutRequest_HostUser* other);
  friend void swap(LogoutRequest_HostUser& a, LogoutRequest_HostUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest_HostUser* New() const final {
    return CreateMaybeMessage<LogoutRequest_HostUser>(nullptr);
  }

  LogoutRequest_HostUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest_HostUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutRequest_HostUser& from);
  void MergeFrom(const LogoutRequest_HostUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest_HostUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string net = 1;
  void clear_net();
  static const int kNetFieldNumber = 1;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // @@protoc_insertion_point(class_scope:api.LogoutRequest.HostUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogoutRequest& default_instance();

  enum QueryCase {
    kHostUser = 1,
    kUsername = 2,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(LogoutRequest* other);
  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return CreateMaybeMessage<LogoutRequest>(nullptr);
  }

  LogoutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogoutRequest_HostUser HostUser;

  // accessors -------------------------------------------------------

  // .api.LogoutRequest.HostUser host_user = 1;
  bool has_host_user() const;
  void clear_host_user();
  static const int kHostUserFieldNumber = 1;
  const ::api::LogoutRequest_HostUser& host_user() const;
  ::api::LogoutRequest_HostUser* release_host_user();
  ::api::LogoutRequest_HostUser* mutable_host_user();
  void set_allocated_host_user(::api::LogoutRequest_HostUser* host_user);

  // string username = 2;
  private:
  bool has_username() const;
  public:
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:api.LogoutRequest)
 private:
  class HasBitSetters;
  void set_has_host_user();
  void set_has_username();

  inline bool has_query() const;
  inline void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryUnion {
    QueryUnion() {}
    ::api::LogoutRequest_HostUser* host_user_;
    ::google::protobuf::internal::ArenaStringPtr username_;
  } query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class NetworkInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.NetworkInfoRequest) */ {
 public:
  NetworkInfoRequest();
  virtual ~NetworkInfoRequest();

  NetworkInfoRequest(const NetworkInfoRequest& from);

  inline NetworkInfoRequest& operator=(const NetworkInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkInfoRequest(NetworkInfoRequest&& from) noexcept
    : NetworkInfoRequest() {
    *this = ::std::move(from);
  }

  inline NetworkInfoRequest& operator=(NetworkInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetworkInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkInfoRequest*>(
               &_NetworkInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(NetworkInfoRequest* other);
  friend void swap(NetworkInfoRequest& a, NetworkInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfoRequest* New() const final {
    return CreateMaybeMessage<NetworkInfoRequest>(nullptr);
  }

  NetworkInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkInfoRequest& from);
  void MergeFrom(const NetworkInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string net = 1;
  void clear_net();
  static const int kNetFieldNumber = 1;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // @@protoc_insertion_point(class_scope:api.NetworkInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class Cmd final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Cmd) */ {
 public:
  Cmd();
  virtual ~Cmd();

  Cmd(const Cmd& from);

  inline Cmd& operator=(const Cmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cmd(Cmd&& from) noexcept
    : Cmd() {
    *this = ::std::move(from);
  }

  inline Cmd& operator=(Cmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cmd* internal_default_instance() {
    return reinterpret_cast<const Cmd*>(
               &_Cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(Cmd* other);
  friend void swap(Cmd& a, Cmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cmd* New() const final {
    return CreateMaybeMessage<Cmd>(nullptr);
  }

  Cmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cmd& from);
  void MergeFrom(const Cmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Cmd_Kind Kind;
  static const Kind Privmsg =
    Cmd_Kind_Privmsg;
  static const Kind Notice =
    Cmd_Kind_Notice;
  static const Kind AnyKind =
    Cmd_Kind_AnyKind;
  static inline bool Kind_IsValid(int value) {
    return Cmd_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Cmd_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Cmd_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Cmd_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Cmd_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Cmd_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Cmd_Kind_Parse(name, value);
  }

  typedef Cmd_Scope Scope;
  static const Scope Private =
    Cmd_Scope_Private;
  static const Scope Public =
    Cmd_Scope_Public;
  static const Scope AnyScope =
    Cmd_Scope_AnyScope;
  static inline bool Scope_IsValid(int value) {
    return Cmd_Scope_IsValid(value);
  }
  static const Scope Scope_MIN =
    Cmd_Scope_Scope_MIN;
  static const Scope Scope_MAX =
    Cmd_Scope_Scope_MAX;
  static const int Scope_ARRAYSIZE =
    Cmd_Scope_Scope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scope_descriptor() {
    return Cmd_Scope_descriptor();
  }
  static inline const ::std::string& Scope_Name(Scope value) {
    return Cmd_Scope_Name(value);
  }
  static inline bool Scope_Parse(const ::std::string& name,
      Scope* value) {
    return Cmd_Scope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string args = 6;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 6;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_args();

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string req_flags = 9;
  void clear_req_flags();
  static const int kReqFlagsFieldNumber = 9;
  const ::std::string& req_flags() const;
  void set_req_flags(const ::std::string& value);
  #if LANG_CXX11
  void set_req_flags(::std::string&& value);
  #endif
  void set_req_flags(const char* value);
  void set_req_flags(const char* value, size_t size);
  ::std::string* mutable_req_flags();
  ::std::string* release_req_flags();
  void set_allocated_req_flags(::std::string* req_flags);

  // .api.Cmd.Kind kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  ::api::Cmd_Kind kind() const;
  void set_kind(::api::Cmd_Kind value);

  // .api.Cmd.Scope scope = 5;
  void clear_scope();
  static const int kScopeFieldNumber = 5;
  ::api::Cmd_Scope scope() const;
  void set_scope(::api::Cmd_Scope value);

  // bool require_auth = 7;
  void clear_require_auth();
  static const int kRequireAuthFieldNumber = 7;
  bool require_auth() const;
  void set_require_auth(bool value);

  // int32 req_level = 8;
  void clear_req_level();
  static const int kReqLevelFieldNumber = 8;
  ::google::protobuf::int32 req_level() const;
  void set_req_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:api.Cmd)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> args_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr req_flags_;
  int kind_;
  int scope_;
  bool require_auth_;
  ::google::protobuf::int32 req_level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class CmdEvent_TargetUsersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CmdEvent_TargetUsersEntry_DoNotUse, 
    ::std::string, ::api::StateUser,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<CmdEvent_TargetUsersEntry_DoNotUse, 
    ::std::string, ::api::StateUser,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CmdEvent_TargetUsersEntry_DoNotUse();
  CmdEvent_TargetUsersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CmdEvent_TargetUsersEntry_DoNotUse& other);
  static const CmdEvent_TargetUsersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CmdEvent_TargetUsersEntry_DoNotUse*>(&_CmdEvent_TargetUsersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CmdEvent_TargetStoredUsersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CmdEvent_TargetStoredUsersEntry_DoNotUse, 
    ::std::string, ::api::StoredUser,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<CmdEvent_TargetStoredUsersEntry_DoNotUse, 
    ::std::string, ::api::StoredUser,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CmdEvent_TargetStoredUsersEntry_DoNotUse();
  CmdEvent_TargetStoredUsersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CmdEvent_TargetStoredUsersEntry_DoNotUse& other);
  static const CmdEvent_TargetStoredUsersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CmdEvent_TargetStoredUsersEntry_DoNotUse*>(&_CmdEvent_TargetStoredUsersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CmdEvent_ArgsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CmdEvent_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<CmdEvent_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CmdEvent_ArgsEntry_DoNotUse();
  CmdEvent_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CmdEvent_ArgsEntry_DoNotUse& other);
  static const CmdEvent_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CmdEvent_ArgsEntry_DoNotUse*>(&_CmdEvent_ArgsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CmdEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CmdEvent) */ {
 public:
  CmdEvent();
  virtual ~CmdEvent();

  CmdEvent(const CmdEvent& from);

  inline CmdEvent& operator=(const CmdEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdEvent(CmdEvent&& from) noexcept
    : CmdEvent() {
    *this = ::std::move(from);
  }

  inline CmdEvent& operator=(CmdEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CmdEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdEvent* internal_default_instance() {
    return reinterpret_cast<const CmdEvent*>(
               &_CmdEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(CmdEvent* other);
  friend void swap(CmdEvent& a, CmdEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdEvent* New() const final {
    return CreateMaybeMessage<CmdEvent>(nullptr);
  }

  CmdEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdEvent& from);
  void MergeFrom(const CmdEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .api.StateUser> targetUsers = 7;
  int targetusers_size() const;
  void clear_targetusers();
  static const int kTargetUsersFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::api::StateUser >&
      targetusers() const;
  ::google::protobuf::Map< ::std::string, ::api::StateUser >*
      mutable_targetusers();

  // map<string, .api.StoredUser> targetStoredUsers = 8;
  int targetstoredusers_size() const;
  void clear_targetstoredusers();
  static const int kTargetStoredUsersFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::api::StoredUser >&
      targetstoredusers() const;
  ::google::protobuf::Map< ::std::string, ::api::StoredUser >*
      mutable_targetstoredusers();

  // repeated .api.StateUser targetVariadicUsers = 9;
  int targetvariadicusers_size() const;
  void clear_targetvariadicusers();
  static const int kTargetVariadicUsersFieldNumber = 9;
  ::api::StateUser* mutable_targetvariadicusers(int index);
  ::google::protobuf::RepeatedPtrField< ::api::StateUser >*
      mutable_targetvariadicusers();
  const ::api::StateUser& targetvariadicusers(int index) const;
  ::api::StateUser* add_targetvariadicusers();
  const ::google::protobuf::RepeatedPtrField< ::api::StateUser >&
      targetvariadicusers() const;

  // repeated .api.StoredUser targetVariadicStoredUsers = 10;
  int targetvariadicstoredusers_size() const;
  void clear_targetvariadicstoredusers();
  static const int kTargetVariadicStoredUsersFieldNumber = 10;
  ::api::StoredUser* mutable_targetvariadicstoredusers(int index);
  ::google::protobuf::RepeatedPtrField< ::api::StoredUser >*
      mutable_targetvariadicstoredusers();
  const ::api::StoredUser& targetvariadicstoredusers(int index) const;
  ::api::StoredUser* add_targetvariadicstoredusers();
  const ::google::protobuf::RepeatedPtrField< ::api::StoredUser >&
      targetvariadicstoredusers() const;

  // map<string, string> args = 11;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // .api.IRCEvent ircEvent = 1;
  bool has_ircevent() const;
  void clear_ircevent();
  static const int kIrcEventFieldNumber = 1;
  const ::api::IRCEvent& ircevent() const;
  ::api::IRCEvent* release_ircevent();
  ::api::IRCEvent* mutable_ircevent();
  void set_allocated_ircevent(::api::IRCEvent* ircevent);

  // .api.StateUser user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::api::StateUser& user() const;
  ::api::StateUser* release_user();
  ::api::StateUser* mutable_user();
  void set_allocated_user(::api::StateUser* user);

  // .api.StoredUser storedUser = 3;
  bool has_storeduser() const;
  void clear_storeduser();
  static const int kStoredUserFieldNumber = 3;
  const ::api::StoredUser& storeduser() const;
  ::api::StoredUser* release_storeduser();
  ::api::StoredUser* mutable_storeduser();
  void set_allocated_storeduser(::api::StoredUser* storeduser);

  // .api.UserModes userChanModes = 4;
  bool has_userchanmodes() const;
  void clear_userchanmodes();
  static const int kUserChanModesFieldNumber = 4;
  const ::api::UserModes& userchanmodes() const;
  ::api::UserModes* release_userchanmodes();
  ::api::UserModes* mutable_userchanmodes();
  void set_allocated_userchanmodes(::api::UserModes* userchanmodes);

  // .api.StateChannel channel = 5;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 5;
  const ::api::StateChannel& channel() const;
  ::api::StateChannel* release_channel();
  ::api::StateChannel* mutable_channel();
  void set_allocated_channel(::api::StateChannel* channel);

  // .api.StateChannel targetChannel = 6;
  bool has_targetchannel() const;
  void clear_targetchannel();
  static const int kTargetChannelFieldNumber = 6;
  const ::api::StateChannel& targetchannel() const;
  ::api::StateChannel* release_targetchannel();
  ::api::StateChannel* mutable_targetchannel();
  void set_allocated_targetchannel(::api::StateChannel* targetchannel);

  // @@protoc_insertion_point(class_scope:api.CmdEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CmdEvent_TargetUsersEntry_DoNotUse,
      ::std::string, ::api::StateUser,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > targetusers_;
  ::google::protobuf::internal::MapField<
      CmdEvent_TargetStoredUsersEntry_DoNotUse,
      ::std::string, ::api::StoredUser,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > targetstoredusers_;
  ::google::protobuf::RepeatedPtrField< ::api::StateUser > targetvariadicusers_;
  ::google::protobuf::RepeatedPtrField< ::api::StoredUser > targetvariadicstoredusers_;
  ::google::protobuf::internal::MapField<
      CmdEvent_ArgsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::api::IRCEvent* ircevent_;
  ::api::StateUser* user_;
  ::api::StoredUser* storeduser_;
  ::api::UserModes* userchanmodes_;
  ::api::StateChannel* channel_;
  ::api::StateChannel* targetchannel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class CmdEventResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CmdEventResponse) */ {
 public:
  CmdEventResponse();
  virtual ~CmdEventResponse();

  CmdEventResponse(const CmdEventResponse& from);

  inline CmdEventResponse& operator=(const CmdEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdEventResponse(CmdEventResponse&& from) noexcept
    : CmdEventResponse() {
    *this = ::std::move(from);
  }

  inline CmdEventResponse& operator=(CmdEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CmdEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdEventResponse* internal_default_instance() {
    return reinterpret_cast<const CmdEventResponse*>(
               &_CmdEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(CmdEventResponse* other);
  friend void swap(CmdEventResponse& a, CmdEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdEventResponse* New() const final {
    return CreateMaybeMessage<CmdEventResponse>(nullptr);
  }

  CmdEventResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdEventResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdEventResponse& from);
  void MergeFrom(const CmdEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .api.CmdEvent event = 3;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 3;
  const ::api::CmdEvent& event() const;
  ::api::CmdEvent* release_event();
  ::api::CmdEvent* mutable_event();
  void set_allocated_event(::api::CmdEvent* event);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:api.CmdEventResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::api::CmdEvent* event_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class IRCEventResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.IRCEventResponse) */ {
 public:
  IRCEventResponse();
  virtual ~IRCEventResponse();

  IRCEventResponse(const IRCEventResponse& from);

  inline IRCEventResponse& operator=(const IRCEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IRCEventResponse(IRCEventResponse&& from) noexcept
    : IRCEventResponse() {
    *this = ::std::move(from);
  }

  inline IRCEventResponse& operator=(IRCEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IRCEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IRCEventResponse* internal_default_instance() {
    return reinterpret_cast<const IRCEventResponse*>(
               &_IRCEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(IRCEventResponse* other);
  friend void swap(IRCEventResponse& a, IRCEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IRCEventResponse* New() const final {
    return CreateMaybeMessage<IRCEventResponse>(nullptr);
  }

  IRCEventResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IRCEventResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IRCEventResponse& from);
  void MergeFrom(const IRCEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRCEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.IRCEvent event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::api::IRCEvent& event() const;
  ::api::IRCEvent* release_event();
  ::api::IRCEvent* mutable_event();
  void set_allocated_event(::api::IRCEvent* event);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:api.IRCEventResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::IRCEvent* event_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class IRCEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.IRCEvent) */ {
 public:
  IRCEvent();
  virtual ~IRCEvent();

  IRCEvent(const IRCEvent& from);

  inline IRCEvent& operator=(const IRCEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IRCEvent(IRCEvent&& from) noexcept
    : IRCEvent() {
    *this = ::std::move(from);
  }

  inline IRCEvent& operator=(IRCEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IRCEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IRCEvent* internal_default_instance() {
    return reinterpret_cast<const IRCEvent*>(
               &_IRCEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(IRCEvent* other);
  friend void swap(IRCEvent& a, IRCEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IRCEvent* New() const final {
    return CreateMaybeMessage<IRCEvent>(nullptr);
  }

  IRCEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IRCEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IRCEvent& from);
  void MergeFrom(const IRCEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRCEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_args();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string sender = 2;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string net = 5;
  void clear_net();
  static const int kNetFieldNumber = 5;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // int64 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.IRCEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> args_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::int64 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class RegisterCmdRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RegisterCmdRequest) */ {
 public:
  RegisterCmdRequest();
  virtual ~RegisterCmdRequest();

  RegisterCmdRequest(const RegisterCmdRequest& from);

  inline RegisterCmdRequest& operator=(const RegisterCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterCmdRequest(RegisterCmdRequest&& from) noexcept
    : RegisterCmdRequest() {
    *this = ::std::move(from);
  }

  inline RegisterCmdRequest& operator=(RegisterCmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterCmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterCmdRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterCmdRequest*>(
               &_RegisterCmdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(RegisterCmdRequest* other);
  friend void swap(RegisterCmdRequest& a, RegisterCmdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterCmdRequest* New() const final {
    return CreateMaybeMessage<RegisterCmdRequest>(nullptr);
  }

  RegisterCmdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterCmdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterCmdRequest& from);
  void MergeFrom(const RegisterCmdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterCmdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // string network = 2;
  void clear_network();
  static const int kNetworkFieldNumber = 2;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // .api.Cmd cmd = 4;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 4;
  const ::api::Cmd& cmd() const;
  ::api::Cmd* release_cmd();
  ::api::Cmd* mutable_cmd();
  void set_allocated_cmd(::api::Cmd* cmd);

  // @@protoc_insertion_point(class_scope:api.RegisterCmdRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::api::Cmd* cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RegisterRequest) */ {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(RegisterRequest* other);
  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // string network = 2;
  void clear_network();
  static const int kNetworkFieldNumber = 2;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string event = 4;
  void clear_event();
  static const int kEventFieldNumber = 4;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // @@protoc_insertion_point(class_scope:api.RegisterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RegisterResponse) */ {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(RegisterResponse* other);
  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:api.RegisterResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscriptionRequest) */ {
 public:
  SubscriptionRequest();
  virtual ~SubscriptionRequest();

  SubscriptionRequest(const SubscriptionRequest& from);

  inline SubscriptionRequest& operator=(const SubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscriptionRequest(SubscriptionRequest&& from) noexcept
    : SubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline SubscriptionRequest& operator=(SubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionRequest*>(
               &_SubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(SubscriptionRequest* other);
  friend void swap(SubscriptionRequest& a, SubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionRequest* New() const final {
    return CreateMaybeMessage<SubscriptionRequest>(nullptr);
  }

  SubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscriptionRequest& from);
  void MergeFrom(const SubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ids = 2;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 2;
  ::google::protobuf::uint64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::uint64 value);
  void add_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ids();

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // @@protoc_insertion_point(class_scope:api.SubscriptionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class UnregisterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UnregisterRequest) */ {
 public:
  UnregisterRequest();
  virtual ~UnregisterRequest();

  UnregisterRequest(const UnregisterRequest& from);

  inline UnregisterRequest& operator=(const UnregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnregisterRequest(UnregisterRequest&& from) noexcept
    : UnregisterRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterRequest& operator=(UnregisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnregisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterRequest*>(
               &_UnregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(UnregisterRequest* other);
  friend void swap(UnregisterRequest& a, UnregisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnregisterRequest* New() const final {
    return CreateMaybeMessage<UnregisterRequest>(nullptr);
  }

  UnregisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnregisterRequest& from);
  void MergeFrom(const UnregisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:api.UnregisterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class UnregisterAllRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UnregisterAllRequest) */ {
 public:
  UnregisterAllRequest();
  virtual ~UnregisterAllRequest();

  UnregisterAllRequest(const UnregisterAllRequest& from);

  inline UnregisterAllRequest& operator=(const UnregisterAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnregisterAllRequest(UnregisterAllRequest&& from) noexcept
    : UnregisterAllRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterAllRequest& operator=(UnregisterAllRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnregisterAllRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterAllRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterAllRequest*>(
               &_UnregisterAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(UnregisterAllRequest* other);
  friend void swap(UnregisterAllRequest& a, UnregisterAllRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnregisterAllRequest* New() const final {
    return CreateMaybeMessage<UnregisterAllRequest>(nullptr);
  }

  UnregisterAllRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterAllRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnregisterAllRequest& from);
  void MergeFrom(const UnregisterAllRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterAllRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // @@protoc_insertion_point(class_scope:api.UnregisterAllRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(WriteRequest* other);
  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(nullptr);
  }

  WriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ext = 1;
  void clear_ext();
  static const int kExtFieldNumber = 1;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // string net = 2;
  void clear_net();
  static const int kNetFieldNumber = 2;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // bytes msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:api.WriteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ultimateq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Result

// bool ok = 1;
inline void Result::clear_ok() {
  ok_ = false;
}
inline bool Result::ok() const {
  // @@protoc_insertion_point(field_get:api.Result.ok)
  return ok_;
}
inline void Result::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:api.Result.ok)
}

// -------------------------------------------------------------------

// Query

// string query = 1;
inline void Query::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Query::query() const {
  // @@protoc_insertion_point(field_get:api.Query.query)
  return query_.GetNoArena();
}
inline void Query::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Query.query)
}
#if LANG_CXX11
inline void Query::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Query.query)
}
#endif
inline void Query::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Query.query)
}
inline void Query::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Query.query)
}
inline ::std::string* Query::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:api.Query.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query::release_query() {
  // @@protoc_insertion_point(field_release:api.Query.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_query(::std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:api.Query.query)
}

// -------------------------------------------------------------------

// ListResponse

// repeated string list = 1;
inline int ListResponse::list_size() const {
  return list_.size();
}
inline void ListResponse::clear_list() {
  list_.Clear();
}
inline const ::std::string& ListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:api.ListResponse.list)
  return list_.Get(index);
}
inline ::std::string* ListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:api.ListResponse.list)
  return list_.Mutable(index);
}
inline void ListResponse::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.ListResponse.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListResponse::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.ListResponse.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListResponse::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.ListResponse.list)
}
inline void ListResponse::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.ListResponse.list)
}
inline ::std::string* ListResponse::add_list() {
  // @@protoc_insertion_point(field_add_mutable:api.ListResponse.list)
  return list_.Add();
}
inline void ListResponse::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.ListResponse.list)
}
#if LANG_CXX11
inline void ListResponse::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.ListResponse.list)
}
#endif
inline void ListResponse::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.ListResponse.list)
}
inline void ListResponse::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.ListResponse.list)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ListResponse::list() const {
  // @@protoc_insertion_point(field_list:api.ListResponse.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:api.ListResponse.list)
  return &list_;
}

// -------------------------------------------------------------------

// CountResponse

// int32 count = 1;
inline void CountResponse::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 CountResponse::count() const {
  // @@protoc_insertion_point(field_get:api.CountResponse.count)
  return count_;
}
inline void CountResponse::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:api.CountResponse.count)
}

// -------------------------------------------------------------------

// Access

// uint32 level = 1;
inline void Access::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 Access::level() const {
  // @@protoc_insertion_point(field_get:api.Access.level)
  return level_;
}
inline void Access::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:api.Access.level)
}

// uint64 flags = 2;
inline void Access::clear_flags() {
  flags_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Access::flags() const {
  // @@protoc_insertion_point(field_get:api.Access.flags)
  return flags_;
}
inline void Access::set_flags(::google::protobuf::uint64 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:api.Access.flags)
}

// -------------------------------------------------------------------

// ChannelModes_AddressMode

// repeated string mode_addresses = 1;
inline int ChannelModes_AddressMode::mode_addresses_size() const {
  return mode_addresses_.size();
}
inline void ChannelModes_AddressMode::clear_mode_addresses() {
  mode_addresses_.Clear();
}
inline const ::std::string& ChannelModes_AddressMode::mode_addresses(int index) const {
  // @@protoc_insertion_point(field_get:api.ChannelModes.AddressMode.mode_addresses)
  return mode_addresses_.Get(index);
}
inline ::std::string* ChannelModes_AddressMode::mutable_mode_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:api.ChannelModes.AddressMode.mode_addresses)
  return mode_addresses_.Mutable(index);
}
inline void ChannelModes_AddressMode::set_mode_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.ChannelModes.AddressMode.mode_addresses)
  mode_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChannelModes_AddressMode::set_mode_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.ChannelModes.AddressMode.mode_addresses)
  mode_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChannelModes_AddressMode::set_mode_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mode_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.ChannelModes.AddressMode.mode_addresses)
}
inline void ChannelModes_AddressMode::set_mode_addresses(int index, const char* value, size_t size) {
  mode_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.ChannelModes.AddressMode.mode_addresses)
}
inline ::std::string* ChannelModes_AddressMode::add_mode_addresses() {
  // @@protoc_insertion_point(field_add_mutable:api.ChannelModes.AddressMode.mode_addresses)
  return mode_addresses_.Add();
}
inline void ChannelModes_AddressMode::add_mode_addresses(const ::std::string& value) {
  mode_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.ChannelModes.AddressMode.mode_addresses)
}
#if LANG_CXX11
inline void ChannelModes_AddressMode::add_mode_addresses(::std::string&& value) {
  mode_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.ChannelModes.AddressMode.mode_addresses)
}
#endif
inline void ChannelModes_AddressMode::add_mode_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mode_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.ChannelModes.AddressMode.mode_addresses)
}
inline void ChannelModes_AddressMode::add_mode_addresses(const char* value, size_t size) {
  mode_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.ChannelModes.AddressMode.mode_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ChannelModes_AddressMode::mode_addresses() const {
  // @@protoc_insertion_point(field_list:api.ChannelModes.AddressMode.mode_addresses)
  return mode_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ChannelModes_AddressMode::mutable_mode_addresses() {
  // @@protoc_insertion_point(field_mutable_list:api.ChannelModes.AddressMode.mode_addresses)
  return &mode_addresses_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChannelModes

// map<string, bool> modes = 1;
inline int ChannelModes::modes_size() const {
  return modes_.size();
}
inline void ChannelModes::clear_modes() {
  modes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, bool >&
ChannelModes::modes() const {
  // @@protoc_insertion_point(field_map:api.ChannelModes.modes)
  return modes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, bool >*
ChannelModes::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:api.ChannelModes.modes)
  return modes_.MutableMap();
}

// map<string, string> arg_modes = 2;
inline int ChannelModes::arg_modes_size() const {
  return arg_modes_.size();
}
inline void ChannelModes::clear_arg_modes() {
  arg_modes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ChannelModes::arg_modes() const {
  // @@protoc_insertion_point(field_map:api.ChannelModes.arg_modes)
  return arg_modes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ChannelModes::mutable_arg_modes() {
  // @@protoc_insertion_point(field_mutable_map:api.ChannelModes.arg_modes)
  return arg_modes_.MutableMap();
}

// map<string, .api.ChannelModes.AddressMode> address_modes = 3;
inline int ChannelModes::address_modes_size() const {
  return address_modes_.size();
}
inline void ChannelModes::clear_address_modes() {
  address_modes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >&
ChannelModes::address_modes() const {
  // @@protoc_insertion_point(field_map:api.ChannelModes.address_modes)
  return address_modes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >*
ChannelModes::mutable_address_modes() {
  // @@protoc_insertion_point(field_mutable_map:api.ChannelModes.address_modes)
  return address_modes_.MutableMap();
}

// int32 addresses = 4;
inline void ChannelModes::clear_addresses() {
  addresses_ = 0;
}
inline ::google::protobuf::int32 ChannelModes::addresses() const {
  // @@protoc_insertion_point(field_get:api.ChannelModes.addresses)
  return addresses_;
}
inline void ChannelModes::set_addresses(::google::protobuf::int32 value) {
  
  addresses_ = value;
  // @@protoc_insertion_point(field_set:api.ChannelModes.addresses)
}

// .api.ModeKinds kinds = 5;
inline bool ChannelModes::has_kinds() const {
  return this != internal_default_instance() && kinds_ != nullptr;
}
inline void ChannelModes::clear_kinds() {
  if (GetArenaNoVirtual() == nullptr && kinds_ != nullptr) {
    delete kinds_;
  }
  kinds_ = nullptr;
}
inline const ::api::ModeKinds& ChannelModes::kinds() const {
  const ::api::ModeKinds* p = kinds_;
  // @@protoc_insertion_point(field_get:api.ChannelModes.kinds)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::ModeKinds*>(
      &::api::_ModeKinds_default_instance_);
}
inline ::api::ModeKinds* ChannelModes::release_kinds() {
  // @@protoc_insertion_point(field_release:api.ChannelModes.kinds)
  
  ::api::ModeKinds* temp = kinds_;
  kinds_ = nullptr;
  return temp;
}
inline ::api::ModeKinds* ChannelModes::mutable_kinds() {
  
  if (kinds_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::ModeKinds>(GetArenaNoVirtual());
    kinds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ChannelModes.kinds)
  return kinds_;
}
inline void ChannelModes::set_allocated_kinds(::api::ModeKinds* kinds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kinds_;
  }
  if (kinds) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kinds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kinds, submessage_arena);
    }
    
  } else {
    
  }
  kinds_ = kinds;
  // @@protoc_insertion_point(field_set_allocated:api.ChannelModes.kinds)
}

// -------------------------------------------------------------------

// StateUser

// string host = 1;
inline void StateUser::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateUser::host() const {
  // @@protoc_insertion_point(field_get:api.StateUser.host)
  return host_.GetNoArena();
}
inline void StateUser::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StateUser.host)
}
#if LANG_CXX11
inline void StateUser::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StateUser.host)
}
#endif
inline void StateUser::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StateUser.host)
}
inline void StateUser::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StateUser.host)
}
inline ::std::string* StateUser::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:api.StateUser.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateUser::release_host() {
  // @@protoc_insertion_point(field_release:api.StateUser.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateUser::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:api.StateUser.host)
}

// string realname = 2;
inline void StateUser::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateUser::realname() const {
  // @@protoc_insertion_point(field_get:api.StateUser.realname)
  return realname_.GetNoArena();
}
inline void StateUser::set_realname(const ::std::string& value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StateUser.realname)
}
#if LANG_CXX11
inline void StateUser::set_realname(::std::string&& value) {
  
  realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StateUser.realname)
}
#endif
inline void StateUser::set_realname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StateUser.realname)
}
inline void StateUser::set_realname(const char* value, size_t size) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StateUser.realname)
}
inline ::std::string* StateUser::mutable_realname() {
  
  // @@protoc_insertion_point(field_mutable:api.StateUser.realname)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateUser::release_realname() {
  // @@protoc_insertion_point(field_release:api.StateUser.realname)
  
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateUser::set_allocated_realname(::std::string* realname) {
  if (realname != nullptr) {
    
  } else {
    
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:api.StateUser.realname)
}

// -------------------------------------------------------------------

// StateChannel

// string name = 1;
inline void StateChannel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateChannel::name() const {
  // @@protoc_insertion_point(field_get:api.StateChannel.name)
  return name_.GetNoArena();
}
inline void StateChannel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StateChannel.name)
}
#if LANG_CXX11
inline void StateChannel::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StateChannel.name)
}
#endif
inline void StateChannel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StateChannel.name)
}
inline void StateChannel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StateChannel.name)
}
inline ::std::string* StateChannel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.StateChannel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateChannel::release_name() {
  // @@protoc_insertion_point(field_release:api.StateChannel.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateChannel::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.StateChannel.name)
}

// string topic = 2;
inline void StateChannel::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateChannel::topic() const {
  // @@protoc_insertion_point(field_get:api.StateChannel.topic)
  return topic_.GetNoArena();
}
inline void StateChannel::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StateChannel.topic)
}
#if LANG_CXX11
inline void StateChannel::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StateChannel.topic)
}
#endif
inline void StateChannel::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StateChannel.topic)
}
inline void StateChannel::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StateChannel.topic)
}
inline ::std::string* StateChannel::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:api.StateChannel.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateChannel::release_topic() {
  // @@protoc_insertion_point(field_release:api.StateChannel.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateChannel::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:api.StateChannel.topic)
}

// .api.ChannelModes modes = 3;
inline bool StateChannel::has_modes() const {
  return this != internal_default_instance() && modes_ != nullptr;
}
inline void StateChannel::clear_modes() {
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
}
inline const ::api::ChannelModes& StateChannel::modes() const {
  const ::api::ChannelModes* p = modes_;
  // @@protoc_insertion_point(field_get:api.StateChannel.modes)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::ChannelModes*>(
      &::api::_ChannelModes_default_instance_);
}
inline ::api::ChannelModes* StateChannel::release_modes() {
  // @@protoc_insertion_point(field_release:api.StateChannel.modes)
  
  ::api::ChannelModes* temp = modes_;
  modes_ = nullptr;
  return temp;
}
inline ::api::ChannelModes* StateChannel::mutable_modes() {
  
  if (modes_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::ChannelModes>(GetArenaNoVirtual());
    modes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.StateChannel.modes)
  return modes_;
}
inline void StateChannel::set_allocated_modes(::api::ChannelModes* modes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modes_;
  }
  if (modes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modes, submessage_arena);
    }
    
  } else {
    
  }
  modes_ = modes;
  // @@protoc_insertion_point(field_set_allocated:api.StateChannel.modes)
}

// -------------------------------------------------------------------

// UserModes

// .api.ModeKinds kinds = 1;
inline bool UserModes::has_kinds() const {
  return this != internal_default_instance() && kinds_ != nullptr;
}
inline void UserModes::clear_kinds() {
  if (GetArenaNoVirtual() == nullptr && kinds_ != nullptr) {
    delete kinds_;
  }
  kinds_ = nullptr;
}
inline const ::api::ModeKinds& UserModes::kinds() const {
  const ::api::ModeKinds* p = kinds_;
  // @@protoc_insertion_point(field_get:api.UserModes.kinds)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::ModeKinds*>(
      &::api::_ModeKinds_default_instance_);
}
inline ::api::ModeKinds* UserModes::release_kinds() {
  // @@protoc_insertion_point(field_release:api.UserModes.kinds)
  
  ::api::ModeKinds* temp = kinds_;
  kinds_ = nullptr;
  return temp;
}
inline ::api::ModeKinds* UserModes::mutable_kinds() {
  
  if (kinds_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::ModeKinds>(GetArenaNoVirtual());
    kinds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserModes.kinds)
  return kinds_;
}
inline void UserModes::set_allocated_kinds(::api::ModeKinds* kinds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kinds_;
  }
  if (kinds) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kinds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kinds, submessage_arena);
    }
    
  } else {
    
  }
  kinds_ = kinds;
  // @@protoc_insertion_point(field_set_allocated:api.UserModes.kinds)
}

// int32 modes = 2;
inline void UserModes::clear_modes() {
  modes_ = 0;
}
inline ::google::protobuf::int32 UserModes::modes() const {
  // @@protoc_insertion_point(field_get:api.UserModes.modes)
  return modes_;
}
inline void UserModes::set_modes(::google::protobuf::int32 value) {
  
  modes_ = value;
  // @@protoc_insertion_point(field_set:api.UserModes.modes)
}

// -------------------------------------------------------------------

// ModeKinds_UserPrefix

// string symbol = 1;
inline void ModeKinds_UserPrefix::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModeKinds_UserPrefix::symbol() const {
  // @@protoc_insertion_point(field_get:api.ModeKinds.UserPrefix.symbol)
  return symbol_.GetNoArena();
}
inline void ModeKinds_UserPrefix::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ModeKinds.UserPrefix.symbol)
}
#if LANG_CXX11
inline void ModeKinds_UserPrefix::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ModeKinds.UserPrefix.symbol)
}
#endif
inline void ModeKinds_UserPrefix::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ModeKinds.UserPrefix.symbol)
}
inline void ModeKinds_UserPrefix::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ModeKinds.UserPrefix.symbol)
}
inline ::std::string* ModeKinds_UserPrefix::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:api.ModeKinds.UserPrefix.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModeKinds_UserPrefix::release_symbol() {
  // @@protoc_insertion_point(field_release:api.ModeKinds.UserPrefix.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModeKinds_UserPrefix::set_allocated_symbol(::std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:api.ModeKinds.UserPrefix.symbol)
}

// string char = 2;
inline void ModeKinds_UserPrefix::clear_char_() {
  char__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModeKinds_UserPrefix::char_() const {
  // @@protoc_insertion_point(field_get:api.ModeKinds.UserPrefix.char)
  return char__.GetNoArena();
}
inline void ModeKinds_UserPrefix::set_char_(const ::std::string& value) {
  
  char__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ModeKinds.UserPrefix.char)
}
#if LANG_CXX11
inline void ModeKinds_UserPrefix::set_char_(::std::string&& value) {
  
  char__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ModeKinds.UserPrefix.char)
}
#endif
inline void ModeKinds_UserPrefix::set_char_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  char__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ModeKinds.UserPrefix.char)
}
inline void ModeKinds_UserPrefix::set_char_(const char* value, size_t size) {
  
  char__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ModeKinds.UserPrefix.char)
}
inline ::std::string* ModeKinds_UserPrefix::mutable_char_() {
  
  // @@protoc_insertion_point(field_mutable:api.ModeKinds.UserPrefix.char)
  return char__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModeKinds_UserPrefix::release_char_() {
  // @@protoc_insertion_point(field_release:api.ModeKinds.UserPrefix.char)
  
  return char__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModeKinds_UserPrefix::set_allocated_char_(::std::string* char_) {
  if (char_ != nullptr) {
    
  } else {
    
  }
  char__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), char_);
  // @@protoc_insertion_point(field_set_allocated:api.ModeKinds.UserPrefix.char)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModeKinds

// repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
inline int ModeKinds::user_prefixes_size() const {
  return user_prefixes_.size();
}
inline void ModeKinds::clear_user_prefixes() {
  user_prefixes_.Clear();
}
inline ::api::ModeKinds_UserPrefix* ModeKinds::mutable_user_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:api.ModeKinds.user_prefixes)
  return user_prefixes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::ModeKinds_UserPrefix >*
ModeKinds::mutable_user_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:api.ModeKinds.user_prefixes)
  return &user_prefixes_;
}
inline const ::api::ModeKinds_UserPrefix& ModeKinds::user_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:api.ModeKinds.user_prefixes)
  return user_prefixes_.Get(index);
}
inline ::api::ModeKinds_UserPrefix* ModeKinds::add_user_prefixes() {
  // @@protoc_insertion_point(field_add:api.ModeKinds.user_prefixes)
  return user_prefixes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::ModeKinds_UserPrefix >&
ModeKinds::user_prefixes() const {
  // @@protoc_insertion_point(field_list:api.ModeKinds.user_prefixes)
  return user_prefixes_;
}

// map<string, int32> channel_modes = 2;
inline int ModeKinds::channel_modes_size() const {
  return channel_modes_.size();
}
inline void ModeKinds::clear_channel_modes() {
  channel_modes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
ModeKinds::channel_modes() const {
  // @@protoc_insertion_point(field_map:api.ModeKinds.channel_modes)
  return channel_modes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
ModeKinds::mutable_channel_modes() {
  // @@protoc_insertion_point(field_mutable_map:api.ModeKinds.channel_modes)
  return channel_modes_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkInfo

// string server_name = 1;
inline void NetworkInfo::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::server_name() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.server_name)
  return server_name_.GetNoArena();
}
inline void NetworkInfo::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.server_name)
}
#if LANG_CXX11
inline void NetworkInfo::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.server_name)
}
#endif
inline void NetworkInfo::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.server_name)
}
inline void NetworkInfo::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.server_name)
}
inline ::std::string* NetworkInfo::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_server_name() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.server_name)
}

// string ircd_version = 2;
inline void NetworkInfo::clear_ircd_version() {
  ircd_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::ircd_version() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.ircd_version)
  return ircd_version_.GetNoArena();
}
inline void NetworkInfo::set_ircd_version(const ::std::string& value) {
  
  ircd_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.ircd_version)
}
#if LANG_CXX11
inline void NetworkInfo::set_ircd_version(::std::string&& value) {
  
  ircd_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.ircd_version)
}
#endif
inline void NetworkInfo::set_ircd_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ircd_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.ircd_version)
}
inline void NetworkInfo::set_ircd_version(const char* value, size_t size) {
  
  ircd_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.ircd_version)
}
inline ::std::string* NetworkInfo::mutable_ircd_version() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.ircd_version)
  return ircd_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_ircd_version() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.ircd_version)
  
  return ircd_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_ircd_version(::std::string* ircd_version) {
  if (ircd_version != nullptr) {
    
  } else {
    
  }
  ircd_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ircd_version);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.ircd_version)
}

// string usermodes = 3;
inline void NetworkInfo::clear_usermodes() {
  usermodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::usermodes() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.usermodes)
  return usermodes_.GetNoArena();
}
inline void NetworkInfo::set_usermodes(const ::std::string& value) {
  
  usermodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.usermodes)
}
#if LANG_CXX11
inline void NetworkInfo::set_usermodes(::std::string&& value) {
  
  usermodes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.usermodes)
}
#endif
inline void NetworkInfo::set_usermodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usermodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.usermodes)
}
inline void NetworkInfo::set_usermodes(const char* value, size_t size) {
  
  usermodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.usermodes)
}
inline ::std::string* NetworkInfo::mutable_usermodes() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.usermodes)
  return usermodes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_usermodes() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.usermodes)
  
  return usermodes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_usermodes(::std::string* usermodes) {
  if (usermodes != nullptr) {
    
  } else {
    
  }
  usermodes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usermodes);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.usermodes)
}

// string lchanmodes = 4;
inline void NetworkInfo::clear_lchanmodes() {
  lchanmodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::lchanmodes() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.lchanmodes)
  return lchanmodes_.GetNoArena();
}
inline void NetworkInfo::set_lchanmodes(const ::std::string& value) {
  
  lchanmodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.lchanmodes)
}
#if LANG_CXX11
inline void NetworkInfo::set_lchanmodes(::std::string&& value) {
  
  lchanmodes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.lchanmodes)
}
#endif
inline void NetworkInfo::set_lchanmodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lchanmodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.lchanmodes)
}
inline void NetworkInfo::set_lchanmodes(const char* value, size_t size) {
  
  lchanmodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.lchanmodes)
}
inline ::std::string* NetworkInfo::mutable_lchanmodes() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.lchanmodes)
  return lchanmodes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_lchanmodes() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.lchanmodes)
  
  return lchanmodes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_lchanmodes(::std::string* lchanmodes) {
  if (lchanmodes != nullptr) {
    
  } else {
    
  }
  lchanmodes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lchanmodes);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.lchanmodes)
}

// string rfc = 5;
inline void NetworkInfo::clear_rfc() {
  rfc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::rfc() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.rfc)
  return rfc_.GetNoArena();
}
inline void NetworkInfo::set_rfc(const ::std::string& value) {
  
  rfc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.rfc)
}
#if LANG_CXX11
inline void NetworkInfo::set_rfc(::std::string&& value) {
  
  rfc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.rfc)
}
#endif
inline void NetworkInfo::set_rfc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rfc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.rfc)
}
inline void NetworkInfo::set_rfc(const char* value, size_t size) {
  
  rfc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.rfc)
}
inline ::std::string* NetworkInfo::mutable_rfc() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.rfc)
  return rfc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_rfc() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.rfc)
  
  return rfc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_rfc(::std::string* rfc) {
  if (rfc != nullptr) {
    
  } else {
    
  }
  rfc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rfc);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.rfc)
}

// string ircd = 6;
inline void NetworkInfo::clear_ircd() {
  ircd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::ircd() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.ircd)
  return ircd_.GetNoArena();
}
inline void NetworkInfo::set_ircd(const ::std::string& value) {
  
  ircd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.ircd)
}
#if LANG_CXX11
inline void NetworkInfo::set_ircd(::std::string&& value) {
  
  ircd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.ircd)
}
#endif
inline void NetworkInfo::set_ircd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ircd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.ircd)
}
inline void NetworkInfo::set_ircd(const char* value, size_t size) {
  
  ircd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.ircd)
}
inline ::std::string* NetworkInfo::mutable_ircd() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.ircd)
  return ircd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_ircd() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.ircd)
  
  return ircd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_ircd(::std::string* ircd) {
  if (ircd != nullptr) {
    
  } else {
    
  }
  ircd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ircd);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.ircd)
}

// string casemapping = 7;
inline void NetworkInfo::clear_casemapping() {
  casemapping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::casemapping() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.casemapping)
  return casemapping_.GetNoArena();
}
inline void NetworkInfo::set_casemapping(const ::std::string& value) {
  
  casemapping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.casemapping)
}
#if LANG_CXX11
inline void NetworkInfo::set_casemapping(::std::string&& value) {
  
  casemapping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.casemapping)
}
#endif
inline void NetworkInfo::set_casemapping(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  casemapping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.casemapping)
}
inline void NetworkInfo::set_casemapping(const char* value, size_t size) {
  
  casemapping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.casemapping)
}
inline ::std::string* NetworkInfo::mutable_casemapping() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.casemapping)
  return casemapping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_casemapping() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.casemapping)
  
  return casemapping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_casemapping(::std::string* casemapping) {
  if (casemapping != nullptr) {
    
  } else {
    
  }
  casemapping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), casemapping);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.casemapping)
}

// string prefix = 8;
inline void NetworkInfo::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::prefix() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.prefix)
  return prefix_.GetNoArena();
}
inline void NetworkInfo::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.prefix)
}
#if LANG_CXX11
inline void NetworkInfo::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.prefix)
}
#endif
inline void NetworkInfo::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.prefix)
}
inline void NetworkInfo::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.prefix)
}
inline ::std::string* NetworkInfo::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_prefix() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_prefix(::std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.prefix)
}

// string chantypes = 9;
inline void NetworkInfo::clear_chantypes() {
  chantypes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::chantypes() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.chantypes)
  return chantypes_.GetNoArena();
}
inline void NetworkInfo::set_chantypes(const ::std::string& value) {
  
  chantypes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.chantypes)
}
#if LANG_CXX11
inline void NetworkInfo::set_chantypes(::std::string&& value) {
  
  chantypes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.chantypes)
}
#endif
inline void NetworkInfo::set_chantypes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chantypes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.chantypes)
}
inline void NetworkInfo::set_chantypes(const char* value, size_t size) {
  
  chantypes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.chantypes)
}
inline ::std::string* NetworkInfo::mutable_chantypes() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.chantypes)
  return chantypes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_chantypes() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.chantypes)
  
  return chantypes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_chantypes(::std::string* chantypes) {
  if (chantypes != nullptr) {
    
  } else {
    
  }
  chantypes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chantypes);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.chantypes)
}

// string chanmodes = 10;
inline void NetworkInfo::clear_chanmodes() {
  chanmodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::chanmodes() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.chanmodes)
  return chanmodes_.GetNoArena();
}
inline void NetworkInfo::set_chanmodes(const ::std::string& value) {
  
  chanmodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfo.chanmodes)
}
#if LANG_CXX11
inline void NetworkInfo::set_chanmodes(::std::string&& value) {
  
  chanmodes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfo.chanmodes)
}
#endif
inline void NetworkInfo::set_chanmodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chanmodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfo.chanmodes)
}
inline void NetworkInfo::set_chanmodes(const char* value, size_t size) {
  
  chanmodes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfo.chanmodes)
}
inline ::std::string* NetworkInfo::mutable_chanmodes() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfo.chanmodes)
  return chanmodes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_chanmodes() {
  // @@protoc_insertion_point(field_release:api.NetworkInfo.chanmodes)
  
  return chanmodes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_chanmodes(::std::string* chanmodes) {
  if (chanmodes != nullptr) {
    
  } else {
    
  }
  chanmodes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chanmodes);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfo.chanmodes)
}

// int32 chanlimit = 11;
inline void NetworkInfo::clear_chanlimit() {
  chanlimit_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::chanlimit() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.chanlimit)
  return chanlimit_;
}
inline void NetworkInfo::set_chanlimit(::google::protobuf::int32 value) {
  
  chanlimit_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.chanlimit)
}

// int32 channellen = 12;
inline void NetworkInfo::clear_channellen() {
  channellen_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::channellen() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.channellen)
  return channellen_;
}
inline void NetworkInfo::set_channellen(::google::protobuf::int32 value) {
  
  channellen_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.channellen)
}

// int32 nicklen = 13;
inline void NetworkInfo::clear_nicklen() {
  nicklen_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::nicklen() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.nicklen)
  return nicklen_;
}
inline void NetworkInfo::set_nicklen(::google::protobuf::int32 value) {
  
  nicklen_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.nicklen)
}

// int32 topiclen = 14;
inline void NetworkInfo::clear_topiclen() {
  topiclen_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::topiclen() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.topiclen)
  return topiclen_;
}
inline void NetworkInfo::set_topiclen(::google::protobuf::int32 value) {
  
  topiclen_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.topiclen)
}

// int32 awaylen = 15;
inline void NetworkInfo::clear_awaylen() {
  awaylen_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::awaylen() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.awaylen)
  return awaylen_;
}
inline void NetworkInfo::set_awaylen(::google::protobuf::int32 value) {
  
  awaylen_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.awaylen)
}

// int32 kicklen = 16;
inline void NetworkInfo::clear_kicklen() {
  kicklen_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::kicklen() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.kicklen)
  return kicklen_;
}
inline void NetworkInfo::set_kicklen(::google::protobuf::int32 value) {
  
  kicklen_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.kicklen)
}

// int32 modes = 17;
inline void NetworkInfo::clear_modes() {
  modes_ = 0;
}
inline ::google::protobuf::int32 NetworkInfo::modes() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfo.modes)
  return modes_;
}
inline void NetworkInfo::set_modes(::google::protobuf::int32 value) {
  
  modes_ = value;
  // @@protoc_insertion_point(field_set:api.NetworkInfo.modes)
}

// map<string, string> extras = 18;
inline int NetworkInfo::extras_size() const {
  return extras_.size();
}
inline void NetworkInfo::clear_extras() {
  extras_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NetworkInfo::extras() const {
  // @@protoc_insertion_point(field_map:api.NetworkInfo.extras)
  return extras_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NetworkInfo::mutable_extras() {
  // @@protoc_insertion_point(field_mutable_map:api.NetworkInfo.extras)
  return extras_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StoredUser

// string username = 1;
inline void StoredUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredUser::username() const {
  // @@protoc_insertion_point(field_get:api.StoredUser.username)
  return username_.GetNoArena();
}
inline void StoredUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StoredUser.username)
}
#if LANG_CXX11
inline void StoredUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StoredUser.username)
}
#endif
inline void StoredUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StoredUser.username)
}
inline void StoredUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StoredUser.username)
}
inline ::std::string* StoredUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:api.StoredUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredUser::release_username() {
  // @@protoc_insertion_point(field_release:api.StoredUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredUser::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:api.StoredUser.username)
}

// bytes password = 2;
inline void StoredUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredUser::password() const {
  // @@protoc_insertion_point(field_get:api.StoredUser.password)
  return password_.GetNoArena();
}
inline void StoredUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StoredUser.password)
}
#if LANG_CXX11
inline void StoredUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StoredUser.password)
}
#endif
inline void StoredUser::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StoredUser.password)
}
inline void StoredUser::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StoredUser.password)
}
inline ::std::string* StoredUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:api.StoredUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredUser::release_password() {
  // @@protoc_insertion_point(field_release:api.StoredUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredUser::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:api.StoredUser.password)
}

// repeated string masks = 3;
inline int StoredUser::masks_size() const {
  return masks_.size();
}
inline void StoredUser::clear_masks() {
  masks_.Clear();
}
inline const ::std::string& StoredUser::masks(int index) const {
  // @@protoc_insertion_point(field_get:api.StoredUser.masks)
  return masks_.Get(index);
}
inline ::std::string* StoredUser::mutable_masks(int index) {
  // @@protoc_insertion_point(field_mutable:api.StoredUser.masks)
  return masks_.Mutable(index);
}
inline void StoredUser::set_masks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.StoredUser.masks)
  masks_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StoredUser::set_masks(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.StoredUser.masks)
  masks_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StoredUser::set_masks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  masks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.StoredUser.masks)
}
inline void StoredUser::set_masks(int index, const char* value, size_t size) {
  masks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.StoredUser.masks)
}
inline ::std::string* StoredUser::add_masks() {
  // @@protoc_insertion_point(field_add_mutable:api.StoredUser.masks)
  return masks_.Add();
}
inline void StoredUser::add_masks(const ::std::string& value) {
  masks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.StoredUser.masks)
}
#if LANG_CXX11
inline void StoredUser::add_masks(::std::string&& value) {
  masks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.StoredUser.masks)
}
#endif
inline void StoredUser::add_masks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  masks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.StoredUser.masks)
}
inline void StoredUser::add_masks(const char* value, size_t size) {
  masks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.StoredUser.masks)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StoredUser::masks() const {
  // @@protoc_insertion_point(field_list:api.StoredUser.masks)
  return masks_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StoredUser::mutable_masks() {
  // @@protoc_insertion_point(field_mutable_list:api.StoredUser.masks)
  return &masks_;
}

// map<string, .api.Access> access = 4;
inline int StoredUser::access_size() const {
  return access_.size();
}
inline void StoredUser::clear_access() {
  access_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::api::Access >&
StoredUser::access() const {
  // @@protoc_insertion_point(field_map:api.StoredUser.access)
  return access_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::api::Access >*
StoredUser::mutable_access() {
  // @@protoc_insertion_point(field_mutable_map:api.StoredUser.access)
  return access_.MutableMap();
}

// map<string, string> data = 5;
inline int StoredUser::data_size() const {
  return data_.size();
}
inline void StoredUser::clear_data() {
  data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
StoredUser::data() const {
  // @@protoc_insertion_point(field_map:api.StoredUser.data)
  return data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
StoredUser::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:api.StoredUser.data)
  return data_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StoredChannel

// string net = 1;
inline void StoredChannel::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredChannel::net() const {
  // @@protoc_insertion_point(field_get:api.StoredChannel.net)
  return net_.GetNoArena();
}
inline void StoredChannel::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StoredChannel.net)
}
#if LANG_CXX11
inline void StoredChannel::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StoredChannel.net)
}
#endif
inline void StoredChannel::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StoredChannel.net)
}
inline void StoredChannel::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StoredChannel.net)
}
inline ::std::string* StoredChannel::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.StoredChannel.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredChannel::release_net() {
  // @@protoc_insertion_point(field_release:api.StoredChannel.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredChannel::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.StoredChannel.net)
}

// string name = 2;
inline void StoredChannel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredChannel::name() const {
  // @@protoc_insertion_point(field_get:api.StoredChannel.name)
  return name_.GetNoArena();
}
inline void StoredChannel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StoredChannel.name)
}
#if LANG_CXX11
inline void StoredChannel::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StoredChannel.name)
}
#endif
inline void StoredChannel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StoredChannel.name)
}
inline void StoredChannel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StoredChannel.name)
}
inline ::std::string* StoredChannel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.StoredChannel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredChannel::release_name() {
  // @@protoc_insertion_point(field_release:api.StoredChannel.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredChannel::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.StoredChannel.name)
}

// map<string, string> data = 3;
inline int StoredChannel::data_size() const {
  return data_.size();
}
inline void StoredChannel::clear_data() {
  data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
StoredChannel::data() const {
  // @@protoc_insertion_point(field_map:api.StoredChannel.data)
  return data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
StoredChannel::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:api.StoredChannel.data)
  return data_.MutableMap();
}

// -------------------------------------------------------------------

// SelfResponse

// .api.StateUser user = 1;
inline bool SelfResponse::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline void SelfResponse::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::api::StateUser& SelfResponse::user() const {
  const ::api::StateUser* p = user_;
  // @@protoc_insertion_point(field_get:api.SelfResponse.user)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::StateUser*>(
      &::api::_StateUser_default_instance_);
}
inline ::api::StateUser* SelfResponse::release_user() {
  // @@protoc_insertion_point(field_release:api.SelfResponse.user)
  
  ::api::StateUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::api::StateUser* SelfResponse::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::StateUser>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SelfResponse.user)
  return user_;
}
inline void SelfResponse::set_allocated_user(::api::StateUser* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:api.SelfResponse.user)
}

// .api.ChannelModes modes = 2;
inline bool SelfResponse::has_modes() const {
  return this != internal_default_instance() && modes_ != nullptr;
}
inline void SelfResponse::clear_modes() {
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
}
inline const ::api::ChannelModes& SelfResponse::modes() const {
  const ::api::ChannelModes* p = modes_;
  // @@protoc_insertion_point(field_get:api.SelfResponse.modes)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::ChannelModes*>(
      &::api::_ChannelModes_default_instance_);
}
inline ::api::ChannelModes* SelfResponse::release_modes() {
  // @@protoc_insertion_point(field_release:api.SelfResponse.modes)
  
  ::api::ChannelModes* temp = modes_;
  modes_ = nullptr;
  return temp;
}
inline ::api::ChannelModes* SelfResponse::mutable_modes() {
  
  if (modes_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::ChannelModes>(GetArenaNoVirtual());
    modes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SelfResponse.modes)
  return modes_;
}
inline void SelfResponse::set_allocated_modes(::api::ChannelModes* modes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modes_;
  }
  if (modes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modes, submessage_arena);
    }
    
  } else {
    
  }
  modes_ = modes;
  // @@protoc_insertion_point(field_set_allocated:api.SelfResponse.modes)
}

// -------------------------------------------------------------------

// NetworkQuery

// string net = 1;
inline void NetworkQuery::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkQuery::net() const {
  // @@protoc_insertion_point(field_get:api.NetworkQuery.net)
  return net_.GetNoArena();
}
inline void NetworkQuery::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkQuery.net)
}
#if LANG_CXX11
inline void NetworkQuery::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkQuery.net)
}
#endif
inline void NetworkQuery::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkQuery.net)
}
inline void NetworkQuery::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkQuery.net)
}
inline ::std::string* NetworkQuery::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkQuery.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkQuery::release_net() {
  // @@protoc_insertion_point(field_release:api.NetworkQuery.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkQuery::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkQuery.net)
}

// string query = 2;
inline void NetworkQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkQuery::query() const {
  // @@protoc_insertion_point(field_get:api.NetworkQuery.query)
  return query_.GetNoArena();
}
inline void NetworkQuery::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkQuery.query)
}
#if LANG_CXX11
inline void NetworkQuery::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkQuery.query)
}
#endif
inline void NetworkQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkQuery.query)
}
inline void NetworkQuery::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkQuery.query)
}
inline ::std::string* NetworkQuery::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkQuery::release_query() {
  // @@protoc_insertion_point(field_release:api.NetworkQuery.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkQuery::set_allocated_query(::std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkQuery.query)
}

// -------------------------------------------------------------------

// ChannelQuery

// string net = 1;
inline void ChannelQuery::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelQuery::net() const {
  // @@protoc_insertion_point(field_get:api.ChannelQuery.net)
  return net_.GetNoArena();
}
inline void ChannelQuery::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelQuery.net)
}
#if LANG_CXX11
inline void ChannelQuery::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelQuery.net)
}
#endif
inline void ChannelQuery::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelQuery.net)
}
inline void ChannelQuery::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelQuery.net)
}
inline ::std::string* ChannelQuery::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelQuery.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelQuery::release_net() {
  // @@protoc_insertion_point(field_release:api.ChannelQuery.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelQuery::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelQuery.net)
}

// string channel = 2;
inline void ChannelQuery::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelQuery::channel() const {
  // @@protoc_insertion_point(field_get:api.ChannelQuery.channel)
  return channel_.GetNoArena();
}
inline void ChannelQuery::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelQuery.channel)
}
#if LANG_CXX11
inline void ChannelQuery::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelQuery.channel)
}
#endif
inline void ChannelQuery::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelQuery.channel)
}
inline void ChannelQuery::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelQuery.channel)
}
inline ::std::string* ChannelQuery::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelQuery.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelQuery::release_channel() {
  // @@protoc_insertion_point(field_release:api.ChannelQuery.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelQuery::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelQuery.channel)
}

// string query = 3;
inline void ChannelQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelQuery::query() const {
  // @@protoc_insertion_point(field_get:api.ChannelQuery.query)
  return query_.GetNoArena();
}
inline void ChannelQuery::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelQuery.query)
}
#if LANG_CXX11
inline void ChannelQuery::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelQuery.query)
}
#endif
inline void ChannelQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelQuery.query)
}
inline void ChannelQuery::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelQuery.query)
}
inline ::std::string* ChannelQuery::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelQuery::release_query() {
  // @@protoc_insertion_point(field_release:api.ChannelQuery.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelQuery::set_allocated_query(::std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelQuery.query)
}

// -------------------------------------------------------------------

// AuthUserRequest

// string net = 1;
inline void AuthUserRequest::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthUserRequest::net() const {
  // @@protoc_insertion_point(field_get:api.AuthUserRequest.net)
  return net_.GetNoArena();
}
inline void AuthUserRequest::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AuthUserRequest.net)
}
#if LANG_CXX11
inline void AuthUserRequest::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AuthUserRequest.net)
}
#endif
inline void AuthUserRequest::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AuthUserRequest.net)
}
inline void AuthUserRequest::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AuthUserRequest.net)
}
inline ::std::string* AuthUserRequest::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.AuthUserRequest.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthUserRequest::release_net() {
  // @@protoc_insertion_point(field_release:api.AuthUserRequest.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserRequest::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.AuthUserRequest.net)
}

// string host = 2;
inline void AuthUserRequest::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthUserRequest::host() const {
  // @@protoc_insertion_point(field_get:api.AuthUserRequest.host)
  return host_.GetNoArena();
}
inline void AuthUserRequest::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AuthUserRequest.host)
}
#if LANG_CXX11
inline void AuthUserRequest::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AuthUserRequest.host)
}
#endif
inline void AuthUserRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AuthUserRequest.host)
}
inline void AuthUserRequest::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AuthUserRequest.host)
}
inline ::std::string* AuthUserRequest::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:api.AuthUserRequest.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthUserRequest::release_host() {
  // @@protoc_insertion_point(field_release:api.AuthUserRequest.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserRequest::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:api.AuthUserRequest.host)
}

// string username = 3;
inline void AuthUserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthUserRequest::username() const {
  // @@protoc_insertion_point(field_get:api.AuthUserRequest.username)
  return username_.GetNoArena();
}
inline void AuthUserRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AuthUserRequest.username)
}
#if LANG_CXX11
inline void AuthUserRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AuthUserRequest.username)
}
#endif
inline void AuthUserRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AuthUserRequest.username)
}
inline void AuthUserRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AuthUserRequest.username)
}
inline ::std::string* AuthUserRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:api.AuthUserRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:api.AuthUserRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserRequest::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:api.AuthUserRequest.username)
}

// string password = 4;
inline void AuthUserRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthUserRequest::password() const {
  // @@protoc_insertion_point(field_get:api.AuthUserRequest.password)
  return password_.GetNoArena();
}
inline void AuthUserRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AuthUserRequest.password)
}
#if LANG_CXX11
inline void AuthUserRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AuthUserRequest.password)
}
#endif
inline void AuthUserRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AuthUserRequest.password)
}
inline void AuthUserRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AuthUserRequest.password)
}
inline ::std::string* AuthUserRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:api.AuthUserRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:api.AuthUserRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:api.AuthUserRequest.password)
}

// bool permanent = 5;
inline void AuthUserRequest::clear_permanent() {
  permanent_ = false;
}
inline bool AuthUserRequest::permanent() const {
  // @@protoc_insertion_point(field_get:api.AuthUserRequest.permanent)
  return permanent_;
}
inline void AuthUserRequest::set_permanent(bool value) {
  
  permanent_ = value;
  // @@protoc_insertion_point(field_set:api.AuthUserRequest.permanent)
}

// -------------------------------------------------------------------

// UserResponse

// .api.StateUser self = 1;
inline bool UserResponse::has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline void UserResponse::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::api::StateUser& UserResponse::self() const {
  const ::api::StateUser* p = self_;
  // @@protoc_insertion_point(field_get:api.UserResponse.self)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::StateUser*>(
      &::api::_StateUser_default_instance_);
}
inline ::api::StateUser* UserResponse::release_self() {
  // @@protoc_insertion_point(field_release:api.UserResponse.self)
  
  ::api::StateUser* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::api::StateUser* UserResponse::mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::StateUser>(GetArenaNoVirtual());
    self_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserResponse.self)
  return self_;
}
inline void UserResponse::set_allocated_self(::api::StateUser* self) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:api.UserResponse.self)
}

// -------------------------------------------------------------------

// UserModesResponse

// .api.ChannelModes modes = 1;
inline bool UserModesResponse::has_modes() const {
  return this != internal_default_instance() && modes_ != nullptr;
}
inline void UserModesResponse::clear_modes() {
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
}
inline const ::api::ChannelModes& UserModesResponse::modes() const {
  const ::api::ChannelModes* p = modes_;
  // @@protoc_insertion_point(field_get:api.UserModesResponse.modes)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::ChannelModes*>(
      &::api::_ChannelModes_default_instance_);
}
inline ::api::ChannelModes* UserModesResponse::release_modes() {
  // @@protoc_insertion_point(field_release:api.UserModesResponse.modes)
  
  ::api::ChannelModes* temp = modes_;
  modes_ = nullptr;
  return temp;
}
inline ::api::ChannelModes* UserModesResponse::mutable_modes() {
  
  if (modes_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::ChannelModes>(GetArenaNoVirtual());
    modes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserModesResponse.modes)
  return modes_;
}
inline void UserModesResponse::set_allocated_modes(::api::ChannelModes* modes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modes_;
  }
  if (modes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modes, submessage_arena);
    }
    
  } else {
    
  }
  modes_ = modes;
  // @@protoc_insertion_point(field_set_allocated:api.UserModesResponse.modes)
}

// -------------------------------------------------------------------

// ChannelResponse

// string name = 1;
inline void ChannelResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelResponse::name() const {
  // @@protoc_insertion_point(field_get:api.ChannelResponse.name)
  return name_.GetNoArena();
}
inline void ChannelResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelResponse.name)
}
#if LANG_CXX11
inline void ChannelResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelResponse.name)
}
#endif
inline void ChannelResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelResponse.name)
}
inline void ChannelResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelResponse.name)
}
inline ::std::string* ChannelResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelResponse::release_name() {
  // @@protoc_insertion_point(field_release:api.ChannelResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelResponse::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelResponse.name)
}

// string topic = 2;
inline void ChannelResponse::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelResponse::topic() const {
  // @@protoc_insertion_point(field_get:api.ChannelResponse.topic)
  return topic_.GetNoArena();
}
inline void ChannelResponse::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelResponse.topic)
}
#if LANG_CXX11
inline void ChannelResponse::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelResponse.topic)
}
#endif
inline void ChannelResponse::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelResponse.topic)
}
inline void ChannelResponse::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelResponse.topic)
}
inline ::std::string* ChannelResponse::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelResponse.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelResponse::release_topic() {
  // @@protoc_insertion_point(field_release:api.ChannelResponse.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelResponse::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelResponse.topic)
}

// .api.ChannelModes modes = 3;
inline bool ChannelResponse::has_modes() const {
  return this != internal_default_instance() && modes_ != nullptr;
}
inline void ChannelResponse::clear_modes() {
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
}
inline const ::api::ChannelModes& ChannelResponse::modes() const {
  const ::api::ChannelModes* p = modes_;
  // @@protoc_insertion_point(field_get:api.ChannelResponse.modes)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::ChannelModes*>(
      &::api::_ChannelModes_default_instance_);
}
inline ::api::ChannelModes* ChannelResponse::release_modes() {
  // @@protoc_insertion_point(field_release:api.ChannelResponse.modes)
  
  ::api::ChannelModes* temp = modes_;
  modes_ = nullptr;
  return temp;
}
inline ::api::ChannelModes* ChannelResponse::mutable_modes() {
  
  if (modes_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::ChannelModes>(GetArenaNoVirtual());
    modes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ChannelResponse.modes)
  return modes_;
}
inline void ChannelResponse::set_allocated_modes(::api::ChannelModes* modes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modes_;
  }
  if (modes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modes, submessage_arena);
    }
    
  } else {
    
  }
  modes_ = modes;
  // @@protoc_insertion_point(field_set_allocated:api.ChannelResponse.modes)
}

// -------------------------------------------------------------------

// StoredUsersResponse

// repeated .api.StoredUser users = 1;
inline int StoredUsersResponse::users_size() const {
  return users_.size();
}
inline void StoredUsersResponse::clear_users() {
  users_.Clear();
}
inline ::api::StoredUser* StoredUsersResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:api.StoredUsersResponse.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::StoredUser >*
StoredUsersResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:api.StoredUsersResponse.users)
  return &users_;
}
inline const ::api::StoredUser& StoredUsersResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:api.StoredUsersResponse.users)
  return users_.Get(index);
}
inline ::api::StoredUser* StoredUsersResponse::add_users() {
  // @@protoc_insertion_point(field_add:api.StoredUsersResponse.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::StoredUser >&
StoredUsersResponse::users() const {
  // @@protoc_insertion_point(field_list:api.StoredUsersResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// StoredChannelsResponse

// repeated .api.StoredChannel channels = 1;
inline int StoredChannelsResponse::channels_size() const {
  return channels_.size();
}
inline void StoredChannelsResponse::clear_channels() {
  channels_.Clear();
}
inline ::api::StoredChannel* StoredChannelsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:api.StoredChannelsResponse.channels)
  return channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::StoredChannel >*
StoredChannelsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:api.StoredChannelsResponse.channels)
  return &channels_;
}
inline const ::api::StoredChannel& StoredChannelsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:api.StoredChannelsResponse.channels)
  return channels_.Get(index);
}
inline ::api::StoredChannel* StoredChannelsResponse::add_channels() {
  // @@protoc_insertion_point(field_add:api.StoredChannelsResponse.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::StoredChannel >&
StoredChannelsResponse::channels() const {
  // @@protoc_insertion_point(field_list:api.StoredChannelsResponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// LogoutRequest_HostUser

// string net = 1;
inline void LogoutRequest_HostUser::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRequest_HostUser::net() const {
  // @@protoc_insertion_point(field_get:api.LogoutRequest.HostUser.net)
  return net_.GetNoArena();
}
inline void LogoutRequest_HostUser::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogoutRequest.HostUser.net)
}
#if LANG_CXX11
inline void LogoutRequest_HostUser::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogoutRequest.HostUser.net)
}
#endif
inline void LogoutRequest_HostUser::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogoutRequest.HostUser.net)
}
inline void LogoutRequest_HostUser::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogoutRequest.HostUser.net)
}
inline ::std::string* LogoutRequest_HostUser::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.LogoutRequest.HostUser.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest_HostUser::release_net() {
  // @@protoc_insertion_point(field_release:api.LogoutRequest.HostUser.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest_HostUser::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.LogoutRequest.HostUser.net)
}

// string host = 2;
inline void LogoutRequest_HostUser::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRequest_HostUser::host() const {
  // @@protoc_insertion_point(field_get:api.LogoutRequest.HostUser.host)
  return host_.GetNoArena();
}
inline void LogoutRequest_HostUser::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogoutRequest.HostUser.host)
}
#if LANG_CXX11
inline void LogoutRequest_HostUser::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogoutRequest.HostUser.host)
}
#endif
inline void LogoutRequest_HostUser::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogoutRequest.HostUser.host)
}
inline void LogoutRequest_HostUser::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogoutRequest.HostUser.host)
}
inline ::std::string* LogoutRequest_HostUser::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:api.LogoutRequest.HostUser.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest_HostUser::release_host() {
  // @@protoc_insertion_point(field_release:api.LogoutRequest.HostUser.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest_HostUser::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:api.LogoutRequest.HostUser.host)
}

// -------------------------------------------------------------------

// LogoutRequest

// .api.LogoutRequest.HostUser host_user = 1;
inline bool LogoutRequest::has_host_user() const {
  return query_case() == kHostUser;
}
inline void LogoutRequest::set_has_host_user() {
  _oneof_case_[0] = kHostUser;
}
inline void LogoutRequest::clear_host_user() {
  if (has_host_user()) {
    delete query_.host_user_;
    clear_has_query();
  }
}
inline ::api::LogoutRequest_HostUser* LogoutRequest::release_host_user() {
  // @@protoc_insertion_point(field_release:api.LogoutRequest.host_user)
  if (has_host_user()) {
    clear_has_query();
      ::api::LogoutRequest_HostUser* temp = query_.host_user_;
    query_.host_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::api::LogoutRequest_HostUser& LogoutRequest::host_user() const {
  // @@protoc_insertion_point(field_get:api.LogoutRequest.host_user)
  return has_host_user()
      ? *query_.host_user_
      : *reinterpret_cast< ::api::LogoutRequest_HostUser*>(&::api::_LogoutRequest_HostUser_default_instance_);
}
inline ::api::LogoutRequest_HostUser* LogoutRequest::mutable_host_user() {
  if (!has_host_user()) {
    clear_query();
    set_has_host_user();
    query_.host_user_ = CreateMaybeMessage< ::api::LogoutRequest_HostUser >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:api.LogoutRequest.host_user)
  return query_.host_user_;
}

// string username = 2;
inline bool LogoutRequest::has_username() const {
  return query_case() == kUsername;
}
inline void LogoutRequest::set_has_username() {
  _oneof_case_[0] = kUsername;
}
inline void LogoutRequest::clear_username() {
  if (has_username()) {
    query_.username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_query();
  }
}
inline const ::std::string& LogoutRequest::username() const {
  // @@protoc_insertion_point(field_get:api.LogoutRequest.username)
  if (has_username()) {
    return query_.username_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void LogoutRequest::set_username(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.LogoutRequest.username)
  if (!has_username()) {
    clear_query();
    set_has_username();
    query_.username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogoutRequest.username)
}
#if LANG_CXX11
inline void LogoutRequest::set_username(::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.LogoutRequest.username)
  if (!has_username()) {
    clear_query();
    set_has_username();
    query_.username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogoutRequest.username)
}
#endif
inline void LogoutRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_username()) {
    clear_query();
    set_has_username();
    query_.username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogoutRequest.username)
}
inline void LogoutRequest::set_username(const char* value, size_t size) {
  if (!has_username()) {
    clear_query();
    set_has_username();
    query_.username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogoutRequest.username)
}
inline ::std::string* LogoutRequest::mutable_username() {
  if (!has_username()) {
    clear_query();
    set_has_username();
    query_.username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:api.LogoutRequest.username)
  return query_.username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest::release_username() {
  // @@protoc_insertion_point(field_release:api.LogoutRequest.username)
  if (has_username()) {
    clear_has_query();
    return query_.username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LogoutRequest::set_allocated_username(::std::string* username) {
  if (has_query()) {
    clear_query();
  }
  if (username != nullptr) {
    set_has_username();
    query_.username_.UnsafeSetDefault(username);
  }
  // @@protoc_insertion_point(field_set_allocated:api.LogoutRequest.username)
}

inline bool LogoutRequest::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void LogoutRequest::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline LogoutRequest::QueryCase LogoutRequest::query_case() const {
  return LogoutRequest::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NetworkInfoRequest

// string net = 1;
inline void NetworkInfoRequest::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfoRequest::net() const {
  // @@protoc_insertion_point(field_get:api.NetworkInfoRequest.net)
  return net_.GetNoArena();
}
inline void NetworkInfoRequest::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.NetworkInfoRequest.net)
}
#if LANG_CXX11
inline void NetworkInfoRequest::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.NetworkInfoRequest.net)
}
#endif
inline void NetworkInfoRequest::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.NetworkInfoRequest.net)
}
inline void NetworkInfoRequest::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.NetworkInfoRequest.net)
}
inline ::std::string* NetworkInfoRequest::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.NetworkInfoRequest.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfoRequest::release_net() {
  // @@protoc_insertion_point(field_release:api.NetworkInfoRequest.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfoRequest::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.NetworkInfoRequest.net)
}

// -------------------------------------------------------------------

// Cmd

// string ext = 1;
inline void Cmd::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cmd::ext() const {
  // @@protoc_insertion_point(field_get:api.Cmd.ext)
  return ext_.GetNoArena();
}
inline void Cmd::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Cmd.ext)
}
#if LANG_CXX11
inline void Cmd::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Cmd.ext)
}
#endif
inline void Cmd::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Cmd.ext)
}
inline void Cmd::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Cmd.ext)
}
inline ::std::string* Cmd::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.Cmd.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cmd::release_ext() {
  // @@protoc_insertion_point(field_release:api.Cmd.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cmd::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.Cmd.ext)
}

// string name = 2;
inline void Cmd::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cmd::name() const {
  // @@protoc_insertion_point(field_get:api.Cmd.name)
  return name_.GetNoArena();
}
inline void Cmd::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Cmd.name)
}
#if LANG_CXX11
inline void Cmd::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Cmd.name)
}
#endif
inline void Cmd::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Cmd.name)
}
inline void Cmd::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Cmd.name)
}
inline ::std::string* Cmd::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Cmd.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cmd::release_name() {
  // @@protoc_insertion_point(field_release:api.Cmd.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cmd::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Cmd.name)
}

// string desc = 3;
inline void Cmd::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cmd::desc() const {
  // @@protoc_insertion_point(field_get:api.Cmd.desc)
  return desc_.GetNoArena();
}
inline void Cmd::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Cmd.desc)
}
#if LANG_CXX11
inline void Cmd::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Cmd.desc)
}
#endif
inline void Cmd::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Cmd.desc)
}
inline void Cmd::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Cmd.desc)
}
inline ::std::string* Cmd::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:api.Cmd.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cmd::release_desc() {
  // @@protoc_insertion_point(field_release:api.Cmd.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cmd::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:api.Cmd.desc)
}

// .api.Cmd.Kind kind = 4;
inline void Cmd::clear_kind() {
  kind_ = 0;
}
inline ::api::Cmd_Kind Cmd::kind() const {
  // @@protoc_insertion_point(field_get:api.Cmd.kind)
  return static_cast< ::api::Cmd_Kind >(kind_);
}
inline void Cmd::set_kind(::api::Cmd_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:api.Cmd.kind)
}

// .api.Cmd.Scope scope = 5;
inline void Cmd::clear_scope() {
  scope_ = 0;
}
inline ::api::Cmd_Scope Cmd::scope() const {
  // @@protoc_insertion_point(field_get:api.Cmd.scope)
  return static_cast< ::api::Cmd_Scope >(scope_);
}
inline void Cmd::set_scope(::api::Cmd_Scope value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:api.Cmd.scope)
}

// repeated string args = 6;
inline int Cmd::args_size() const {
  return args_.size();
}
inline void Cmd::clear_args() {
  args_.Clear();
}
inline const ::std::string& Cmd::args(int index) const {
  // @@protoc_insertion_point(field_get:api.Cmd.args)
  return args_.Get(index);
}
inline ::std::string* Cmd::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:api.Cmd.args)
  return args_.Mutable(index);
}
inline void Cmd::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.Cmd.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cmd::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.Cmd.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cmd::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.Cmd.args)
}
inline void Cmd::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.Cmd.args)
}
inline ::std::string* Cmd::add_args() {
  // @@protoc_insertion_point(field_add_mutable:api.Cmd.args)
  return args_.Add();
}
inline void Cmd::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.Cmd.args)
}
#if LANG_CXX11
inline void Cmd::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.Cmd.args)
}
#endif
inline void Cmd::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.Cmd.args)
}
inline void Cmd::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.Cmd.args)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Cmd::args() const {
  // @@protoc_insertion_point(field_list:api.Cmd.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Cmd::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:api.Cmd.args)
  return &args_;
}

// bool require_auth = 7;
inline void Cmd::clear_require_auth() {
  require_auth_ = false;
}
inline bool Cmd::require_auth() const {
  // @@protoc_insertion_point(field_get:api.Cmd.require_auth)
  return require_auth_;
}
inline void Cmd::set_require_auth(bool value) {
  
  require_auth_ = value;
  // @@protoc_insertion_point(field_set:api.Cmd.require_auth)
}

// int32 req_level = 8;
inline void Cmd::clear_req_level() {
  req_level_ = 0;
}
inline ::google::protobuf::int32 Cmd::req_level() const {
  // @@protoc_insertion_point(field_get:api.Cmd.req_level)
  return req_level_;
}
inline void Cmd::set_req_level(::google::protobuf::int32 value) {
  
  req_level_ = value;
  // @@protoc_insertion_point(field_set:api.Cmd.req_level)
}

// string req_flags = 9;
inline void Cmd::clear_req_flags() {
  req_flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cmd::req_flags() const {
  // @@protoc_insertion_point(field_get:api.Cmd.req_flags)
  return req_flags_.GetNoArena();
}
inline void Cmd::set_req_flags(const ::std::string& value) {
  
  req_flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Cmd.req_flags)
}
#if LANG_CXX11
inline void Cmd::set_req_flags(::std::string&& value) {
  
  req_flags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Cmd.req_flags)
}
#endif
inline void Cmd::set_req_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Cmd.req_flags)
}
inline void Cmd::set_req_flags(const char* value, size_t size) {
  
  req_flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Cmd.req_flags)
}
inline ::std::string* Cmd::mutable_req_flags() {
  
  // @@protoc_insertion_point(field_mutable:api.Cmd.req_flags)
  return req_flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cmd::release_req_flags() {
  // @@protoc_insertion_point(field_release:api.Cmd.req_flags)
  
  return req_flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cmd::set_allocated_req_flags(::std::string* req_flags) {
  if (req_flags != nullptr) {
    
  } else {
    
  }
  req_flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_flags);
  // @@protoc_insertion_point(field_set_allocated:api.Cmd.req_flags)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CmdEvent

// .api.IRCEvent ircEvent = 1;
inline bool CmdEvent::has_ircevent() const {
  return this != internal_default_instance() && ircevent_ != nullptr;
}
inline void CmdEvent::clear_ircevent() {
  if (GetArenaNoVirtual() == nullptr && ircevent_ != nullptr) {
    delete ircevent_;
  }
  ircevent_ = nullptr;
}
inline const ::api::IRCEvent& CmdEvent::ircevent() const {
  const ::api::IRCEvent* p = ircevent_;
  // @@protoc_insertion_point(field_get:api.CmdEvent.ircEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::IRCEvent*>(
      &::api::_IRCEvent_default_instance_);
}
inline ::api::IRCEvent* CmdEvent::release_ircevent() {
  // @@protoc_insertion_point(field_release:api.CmdEvent.ircEvent)
  
  ::api::IRCEvent* temp = ircevent_;
  ircevent_ = nullptr;
  return temp;
}
inline ::api::IRCEvent* CmdEvent::mutable_ircevent() {
  
  if (ircevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::IRCEvent>(GetArenaNoVirtual());
    ircevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.ircEvent)
  return ircevent_;
}
inline void CmdEvent::set_allocated_ircevent(::api::IRCEvent* ircevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ircevent_;
  }
  if (ircevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ircevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ircevent, submessage_arena);
    }
    
  } else {
    
  }
  ircevent_ = ircevent;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEvent.ircEvent)
}

// .api.StateUser user = 2;
inline bool CmdEvent::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline void CmdEvent::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::api::StateUser& CmdEvent::user() const {
  const ::api::StateUser* p = user_;
  // @@protoc_insertion_point(field_get:api.CmdEvent.user)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::StateUser*>(
      &::api::_StateUser_default_instance_);
}
inline ::api::StateUser* CmdEvent::release_user() {
  // @@protoc_insertion_point(field_release:api.CmdEvent.user)
  
  ::api::StateUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::api::StateUser* CmdEvent::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::StateUser>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.user)
  return user_;
}
inline void CmdEvent::set_allocated_user(::api::StateUser* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEvent.user)
}

// .api.StoredUser storedUser = 3;
inline bool CmdEvent::has_storeduser() const {
  return this != internal_default_instance() && storeduser_ != nullptr;
}
inline void CmdEvent::clear_storeduser() {
  if (GetArenaNoVirtual() == nullptr && storeduser_ != nullptr) {
    delete storeduser_;
  }
  storeduser_ = nullptr;
}
inline const ::api::StoredUser& CmdEvent::storeduser() const {
  const ::api::StoredUser* p = storeduser_;
  // @@protoc_insertion_point(field_get:api.CmdEvent.storedUser)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::StoredUser*>(
      &::api::_StoredUser_default_instance_);
}
inline ::api::StoredUser* CmdEvent::release_storeduser() {
  // @@protoc_insertion_point(field_release:api.CmdEvent.storedUser)
  
  ::api::StoredUser* temp = storeduser_;
  storeduser_ = nullptr;
  return temp;
}
inline ::api::StoredUser* CmdEvent::mutable_storeduser() {
  
  if (storeduser_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::StoredUser>(GetArenaNoVirtual());
    storeduser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.storedUser)
  return storeduser_;
}
inline void CmdEvent::set_allocated_storeduser(::api::StoredUser* storeduser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete storeduser_;
  }
  if (storeduser) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storeduser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storeduser, submessage_arena);
    }
    
  } else {
    
  }
  storeduser_ = storeduser;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEvent.storedUser)
}

// .api.UserModes userChanModes = 4;
inline bool CmdEvent::has_userchanmodes() const {
  return this != internal_default_instance() && userchanmodes_ != nullptr;
}
inline void CmdEvent::clear_userchanmodes() {
  if (GetArenaNoVirtual() == nullptr && userchanmodes_ != nullptr) {
    delete userchanmodes_;
  }
  userchanmodes_ = nullptr;
}
inline const ::api::UserModes& CmdEvent::userchanmodes() const {
  const ::api::UserModes* p = userchanmodes_;
  // @@protoc_insertion_point(field_get:api.CmdEvent.userChanModes)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::UserModes*>(
      &::api::_UserModes_default_instance_);
}
inline ::api::UserModes* CmdEvent::release_userchanmodes() {
  // @@protoc_insertion_point(field_release:api.CmdEvent.userChanModes)
  
  ::api::UserModes* temp = userchanmodes_;
  userchanmodes_ = nullptr;
  return temp;
}
inline ::api::UserModes* CmdEvent::mutable_userchanmodes() {
  
  if (userchanmodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::UserModes>(GetArenaNoVirtual());
    userchanmodes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.userChanModes)
  return userchanmodes_;
}
inline void CmdEvent::set_allocated_userchanmodes(::api::UserModes* userchanmodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userchanmodes_;
  }
  if (userchanmodes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userchanmodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, userchanmodes, submessage_arena);
    }
    
  } else {
    
  }
  userchanmodes_ = userchanmodes;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEvent.userChanModes)
}

// .api.StateChannel channel = 5;
inline bool CmdEvent::has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline void CmdEvent::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::api::StateChannel& CmdEvent::channel() const {
  const ::api::StateChannel* p = channel_;
  // @@protoc_insertion_point(field_get:api.CmdEvent.channel)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::StateChannel*>(
      &::api::_StateChannel_default_instance_);
}
inline ::api::StateChannel* CmdEvent::release_channel() {
  // @@protoc_insertion_point(field_release:api.CmdEvent.channel)
  
  ::api::StateChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::api::StateChannel* CmdEvent::mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::StateChannel>(GetArenaNoVirtual());
    channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.channel)
  return channel_;
}
inline void CmdEvent::set_allocated_channel(::api::StateChannel* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEvent.channel)
}

// .api.StateChannel targetChannel = 6;
inline bool CmdEvent::has_targetchannel() const {
  return this != internal_default_instance() && targetchannel_ != nullptr;
}
inline void CmdEvent::clear_targetchannel() {
  if (GetArenaNoVirtual() == nullptr && targetchannel_ != nullptr) {
    delete targetchannel_;
  }
  targetchannel_ = nullptr;
}
inline const ::api::StateChannel& CmdEvent::targetchannel() const {
  const ::api::StateChannel* p = targetchannel_;
  // @@protoc_insertion_point(field_get:api.CmdEvent.targetChannel)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::StateChannel*>(
      &::api::_StateChannel_default_instance_);
}
inline ::api::StateChannel* CmdEvent::release_targetchannel() {
  // @@protoc_insertion_point(field_release:api.CmdEvent.targetChannel)
  
  ::api::StateChannel* temp = targetchannel_;
  targetchannel_ = nullptr;
  return temp;
}
inline ::api::StateChannel* CmdEvent::mutable_targetchannel() {
  
  if (targetchannel_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::StateChannel>(GetArenaNoVirtual());
    targetchannel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.targetChannel)
  return targetchannel_;
}
inline void CmdEvent::set_allocated_targetchannel(::api::StateChannel* targetchannel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete targetchannel_;
  }
  if (targetchannel) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      targetchannel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetchannel, submessage_arena);
    }
    
  } else {
    
  }
  targetchannel_ = targetchannel;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEvent.targetChannel)
}

// map<string, .api.StateUser> targetUsers = 7;
inline int CmdEvent::targetusers_size() const {
  return targetusers_.size();
}
inline void CmdEvent::clear_targetusers() {
  targetusers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::api::StateUser >&
CmdEvent::targetusers() const {
  // @@protoc_insertion_point(field_map:api.CmdEvent.targetUsers)
  return targetusers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::api::StateUser >*
CmdEvent::mutable_targetusers() {
  // @@protoc_insertion_point(field_mutable_map:api.CmdEvent.targetUsers)
  return targetusers_.MutableMap();
}

// map<string, .api.StoredUser> targetStoredUsers = 8;
inline int CmdEvent::targetstoredusers_size() const {
  return targetstoredusers_.size();
}
inline void CmdEvent::clear_targetstoredusers() {
  targetstoredusers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::api::StoredUser >&
CmdEvent::targetstoredusers() const {
  // @@protoc_insertion_point(field_map:api.CmdEvent.targetStoredUsers)
  return targetstoredusers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::api::StoredUser >*
CmdEvent::mutable_targetstoredusers() {
  // @@protoc_insertion_point(field_mutable_map:api.CmdEvent.targetStoredUsers)
  return targetstoredusers_.MutableMap();
}

// repeated .api.StateUser targetVariadicUsers = 9;
inline int CmdEvent::targetvariadicusers_size() const {
  return targetvariadicusers_.size();
}
inline void CmdEvent::clear_targetvariadicusers() {
  targetvariadicusers_.Clear();
}
inline ::api::StateUser* CmdEvent::mutable_targetvariadicusers(int index) {
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.targetVariadicUsers)
  return targetvariadicusers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::StateUser >*
CmdEvent::mutable_targetvariadicusers() {
  // @@protoc_insertion_point(field_mutable_list:api.CmdEvent.targetVariadicUsers)
  return &targetvariadicusers_;
}
inline const ::api::StateUser& CmdEvent::targetvariadicusers(int index) const {
  // @@protoc_insertion_point(field_get:api.CmdEvent.targetVariadicUsers)
  return targetvariadicusers_.Get(index);
}
inline ::api::StateUser* CmdEvent::add_targetvariadicusers() {
  // @@protoc_insertion_point(field_add:api.CmdEvent.targetVariadicUsers)
  return targetvariadicusers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::StateUser >&
CmdEvent::targetvariadicusers() const {
  // @@protoc_insertion_point(field_list:api.CmdEvent.targetVariadicUsers)
  return targetvariadicusers_;
}

// repeated .api.StoredUser targetVariadicStoredUsers = 10;
inline int CmdEvent::targetvariadicstoredusers_size() const {
  return targetvariadicstoredusers_.size();
}
inline void CmdEvent::clear_targetvariadicstoredusers() {
  targetvariadicstoredusers_.Clear();
}
inline ::api::StoredUser* CmdEvent::mutable_targetvariadicstoredusers(int index) {
  // @@protoc_insertion_point(field_mutable:api.CmdEvent.targetVariadicStoredUsers)
  return targetvariadicstoredusers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::StoredUser >*
CmdEvent::mutable_targetvariadicstoredusers() {
  // @@protoc_insertion_point(field_mutable_list:api.CmdEvent.targetVariadicStoredUsers)
  return &targetvariadicstoredusers_;
}
inline const ::api::StoredUser& CmdEvent::targetvariadicstoredusers(int index) const {
  // @@protoc_insertion_point(field_get:api.CmdEvent.targetVariadicStoredUsers)
  return targetvariadicstoredusers_.Get(index);
}
inline ::api::StoredUser* CmdEvent::add_targetvariadicstoredusers() {
  // @@protoc_insertion_point(field_add:api.CmdEvent.targetVariadicStoredUsers)
  return targetvariadicstoredusers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::StoredUser >&
CmdEvent::targetvariadicstoredusers() const {
  // @@protoc_insertion_point(field_list:api.CmdEvent.targetVariadicStoredUsers)
  return targetvariadicstoredusers_;
}

// map<string, string> args = 11;
inline int CmdEvent::args_size() const {
  return args_.size();
}
inline void CmdEvent::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CmdEvent::args() const {
  // @@protoc_insertion_point(field_map:api.CmdEvent.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CmdEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:api.CmdEvent.args)
  return args_.MutableMap();
}

// -------------------------------------------------------------------

// CmdEventResponse

// uint64 id = 1;
inline void CmdEventResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CmdEventResponse::id() const {
  // @@protoc_insertion_point(field_get:api.CmdEventResponse.id)
  return id_;
}
inline void CmdEventResponse::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:api.CmdEventResponse.id)
}

// string name = 2;
inline void CmdEventResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdEventResponse::name() const {
  // @@protoc_insertion_point(field_get:api.CmdEventResponse.name)
  return name_.GetNoArena();
}
inline void CmdEventResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CmdEventResponse.name)
}
#if LANG_CXX11
inline void CmdEventResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CmdEventResponse.name)
}
#endif
inline void CmdEventResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CmdEventResponse.name)
}
inline void CmdEventResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CmdEventResponse.name)
}
inline ::std::string* CmdEventResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.CmdEventResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdEventResponse::release_name() {
  // @@protoc_insertion_point(field_release:api.CmdEventResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdEventResponse::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.CmdEventResponse.name)
}

// .api.CmdEvent event = 3;
inline bool CmdEventResponse::has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline void CmdEventResponse::clear_event() {
  if (GetArenaNoVirtual() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::api::CmdEvent& CmdEventResponse::event() const {
  const ::api::CmdEvent* p = event_;
  // @@protoc_insertion_point(field_get:api.CmdEventResponse.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::CmdEvent*>(
      &::api::_CmdEvent_default_instance_);
}
inline ::api::CmdEvent* CmdEventResponse::release_event() {
  // @@protoc_insertion_point(field_release:api.CmdEventResponse.event)
  
  ::api::CmdEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::api::CmdEvent* CmdEventResponse::mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::CmdEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CmdEventResponse.event)
  return event_;
}
inline void CmdEventResponse::set_allocated_event(::api::CmdEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:api.CmdEventResponse.event)
}

// -------------------------------------------------------------------

// IRCEventResponse

// uint64 id = 1;
inline void IRCEventResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IRCEventResponse::id() const {
  // @@protoc_insertion_point(field_get:api.IRCEventResponse.id)
  return id_;
}
inline void IRCEventResponse::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:api.IRCEventResponse.id)
}

// .api.IRCEvent event = 2;
inline bool IRCEventResponse::has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline void IRCEventResponse::clear_event() {
  if (GetArenaNoVirtual() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::api::IRCEvent& IRCEventResponse::event() const {
  const ::api::IRCEvent* p = event_;
  // @@protoc_insertion_point(field_get:api.IRCEventResponse.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::IRCEvent*>(
      &::api::_IRCEvent_default_instance_);
}
inline ::api::IRCEvent* IRCEventResponse::release_event() {
  // @@protoc_insertion_point(field_release:api.IRCEventResponse.event)
  
  ::api::IRCEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::api::IRCEvent* IRCEventResponse::mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::IRCEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.IRCEventResponse.event)
  return event_;
}
inline void IRCEventResponse::set_allocated_event(::api::IRCEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:api.IRCEventResponse.event)
}

// -------------------------------------------------------------------

// IRCEvent

// string name = 1;
inline void IRCEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IRCEvent::name() const {
  // @@protoc_insertion_point(field_get:api.IRCEvent.name)
  return name_.GetNoArena();
}
inline void IRCEvent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IRCEvent.name)
}
#if LANG_CXX11
inline void IRCEvent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IRCEvent.name)
}
#endif
inline void IRCEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IRCEvent.name)
}
inline void IRCEvent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IRCEvent.name)
}
inline ::std::string* IRCEvent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.IRCEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IRCEvent::release_name() {
  // @@protoc_insertion_point(field_release:api.IRCEvent.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IRCEvent::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.IRCEvent.name)
}

// string sender = 2;
inline void IRCEvent::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IRCEvent::sender() const {
  // @@protoc_insertion_point(field_get:api.IRCEvent.sender)
  return sender_.GetNoArena();
}
inline void IRCEvent::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IRCEvent.sender)
}
#if LANG_CXX11
inline void IRCEvent::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IRCEvent.sender)
}
#endif
inline void IRCEvent::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IRCEvent.sender)
}
inline void IRCEvent::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IRCEvent.sender)
}
inline ::std::string* IRCEvent::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:api.IRCEvent.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IRCEvent::release_sender() {
  // @@protoc_insertion_point(field_release:api.IRCEvent.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IRCEvent::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:api.IRCEvent.sender)
}

// repeated string args = 3;
inline int IRCEvent::args_size() const {
  return args_.size();
}
inline void IRCEvent::clear_args() {
  args_.Clear();
}
inline const ::std::string& IRCEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:api.IRCEvent.args)
  return args_.Get(index);
}
inline ::std::string* IRCEvent::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:api.IRCEvent.args)
  return args_.Mutable(index);
}
inline void IRCEvent::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.IRCEvent.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void IRCEvent::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.IRCEvent.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void IRCEvent::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.IRCEvent.args)
}
inline void IRCEvent::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.IRCEvent.args)
}
inline ::std::string* IRCEvent::add_args() {
  // @@protoc_insertion_point(field_add_mutable:api.IRCEvent.args)
  return args_.Add();
}
inline void IRCEvent::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.IRCEvent.args)
}
#if LANG_CXX11
inline void IRCEvent::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.IRCEvent.args)
}
#endif
inline void IRCEvent::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.IRCEvent.args)
}
inline void IRCEvent::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.IRCEvent.args)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
IRCEvent::args() const {
  // @@protoc_insertion_point(field_list:api.IRCEvent.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
IRCEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:api.IRCEvent.args)
  return &args_;
}

// int64 time = 4;
inline void IRCEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IRCEvent::time() const {
  // @@protoc_insertion_point(field_get:api.IRCEvent.time)
  return time_;
}
inline void IRCEvent::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:api.IRCEvent.time)
}

// string net = 5;
inline void IRCEvent::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IRCEvent::net() const {
  // @@protoc_insertion_point(field_get:api.IRCEvent.net)
  return net_.GetNoArena();
}
inline void IRCEvent::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IRCEvent.net)
}
#if LANG_CXX11
inline void IRCEvent::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IRCEvent.net)
}
#endif
inline void IRCEvent::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IRCEvent.net)
}
inline void IRCEvent::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IRCEvent.net)
}
inline ::std::string* IRCEvent::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.IRCEvent.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IRCEvent::release_net() {
  // @@protoc_insertion_point(field_release:api.IRCEvent.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IRCEvent::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.IRCEvent.net)
}

// -------------------------------------------------------------------

// RegisterCmdRequest

// string ext = 1;
inline void RegisterCmdRequest::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterCmdRequest::ext() const {
  // @@protoc_insertion_point(field_get:api.RegisterCmdRequest.ext)
  return ext_.GetNoArena();
}
inline void RegisterCmdRequest::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterCmdRequest.ext)
}
#if LANG_CXX11
inline void RegisterCmdRequest::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterCmdRequest.ext)
}
#endif
inline void RegisterCmdRequest::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterCmdRequest.ext)
}
inline void RegisterCmdRequest::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterCmdRequest.ext)
}
inline ::std::string* RegisterCmdRequest::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterCmdRequest.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterCmdRequest::release_ext() {
  // @@protoc_insertion_point(field_release:api.RegisterCmdRequest.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterCmdRequest::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterCmdRequest.ext)
}

// string network = 2;
inline void RegisterCmdRequest::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterCmdRequest::network() const {
  // @@protoc_insertion_point(field_get:api.RegisterCmdRequest.network)
  return network_.GetNoArena();
}
inline void RegisterCmdRequest::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterCmdRequest.network)
}
#if LANG_CXX11
inline void RegisterCmdRequest::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterCmdRequest.network)
}
#endif
inline void RegisterCmdRequest::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterCmdRequest.network)
}
inline void RegisterCmdRequest::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterCmdRequest.network)
}
inline ::std::string* RegisterCmdRequest::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterCmdRequest.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterCmdRequest::release_network() {
  // @@protoc_insertion_point(field_release:api.RegisterCmdRequest.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterCmdRequest::set_allocated_network(::std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterCmdRequest.network)
}

// string channel = 3;
inline void RegisterCmdRequest::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterCmdRequest::channel() const {
  // @@protoc_insertion_point(field_get:api.RegisterCmdRequest.channel)
  return channel_.GetNoArena();
}
inline void RegisterCmdRequest::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterCmdRequest.channel)
}
#if LANG_CXX11
inline void RegisterCmdRequest::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterCmdRequest.channel)
}
#endif
inline void RegisterCmdRequest::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterCmdRequest.channel)
}
inline void RegisterCmdRequest::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterCmdRequest.channel)
}
inline ::std::string* RegisterCmdRequest::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterCmdRequest.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterCmdRequest::release_channel() {
  // @@protoc_insertion_point(field_release:api.RegisterCmdRequest.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterCmdRequest::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterCmdRequest.channel)
}

// .api.Cmd cmd = 4;
inline bool RegisterCmdRequest::has_cmd() const {
  return this != internal_default_instance() && cmd_ != nullptr;
}
inline void RegisterCmdRequest::clear_cmd() {
  if (GetArenaNoVirtual() == nullptr && cmd_ != nullptr) {
    delete cmd_;
  }
  cmd_ = nullptr;
}
inline const ::api::Cmd& RegisterCmdRequest::cmd() const {
  const ::api::Cmd* p = cmd_;
  // @@protoc_insertion_point(field_get:api.RegisterCmdRequest.cmd)
  return p != nullptr ? *p : *reinterpret_cast<const ::api::Cmd*>(
      &::api::_Cmd_default_instance_);
}
inline ::api::Cmd* RegisterCmdRequest::release_cmd() {
  // @@protoc_insertion_point(field_release:api.RegisterCmdRequest.cmd)
  
  ::api::Cmd* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::api::Cmd* RegisterCmdRequest::mutable_cmd() {
  
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Cmd>(GetArenaNoVirtual());
    cmd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.RegisterCmdRequest.cmd)
  return cmd_;
}
inline void RegisterCmdRequest::set_allocated_cmd(::api::Cmd* cmd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cmd_;
  }
  if (cmd) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    
  } else {
    
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:api.RegisterCmdRequest.cmd)
}

// -------------------------------------------------------------------

// RegisterRequest

// string ext = 1;
inline void RegisterRequest::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::ext() const {
  // @@protoc_insertion_point(field_get:api.RegisterRequest.ext)
  return ext_.GetNoArena();
}
inline void RegisterRequest::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterRequest.ext)
}
#if LANG_CXX11
inline void RegisterRequest::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterRequest.ext)
}
#endif
inline void RegisterRequest::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterRequest.ext)
}
inline void RegisterRequest::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterRequest.ext)
}
inline ::std::string* RegisterRequest::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterRequest.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_ext() {
  // @@protoc_insertion_point(field_release:api.RegisterRequest.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterRequest.ext)
}

// string network = 2;
inline void RegisterRequest::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::network() const {
  // @@protoc_insertion_point(field_get:api.RegisterRequest.network)
  return network_.GetNoArena();
}
inline void RegisterRequest::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterRequest.network)
}
#if LANG_CXX11
inline void RegisterRequest::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterRequest.network)
}
#endif
inline void RegisterRequest::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterRequest.network)
}
inline void RegisterRequest::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterRequest.network)
}
inline ::std::string* RegisterRequest::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterRequest.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_network() {
  // @@protoc_insertion_point(field_release:api.RegisterRequest.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_network(::std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterRequest.network)
}

// string channel = 3;
inline void RegisterRequest::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::channel() const {
  // @@protoc_insertion_point(field_get:api.RegisterRequest.channel)
  return channel_.GetNoArena();
}
inline void RegisterRequest::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterRequest.channel)
}
#if LANG_CXX11
inline void RegisterRequest::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterRequest.channel)
}
#endif
inline void RegisterRequest::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterRequest.channel)
}
inline void RegisterRequest::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterRequest.channel)
}
inline ::std::string* RegisterRequest::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterRequest.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_channel() {
  // @@protoc_insertion_point(field_release:api.RegisterRequest.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterRequest.channel)
}

// string event = 4;
inline void RegisterRequest::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::event() const {
  // @@protoc_insertion_point(field_get:api.RegisterRequest.event)
  return event_.GetNoArena();
}
inline void RegisterRequest::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RegisterRequest.event)
}
#if LANG_CXX11
inline void RegisterRequest::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RegisterRequest.event)
}
#endif
inline void RegisterRequest::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RegisterRequest.event)
}
inline void RegisterRequest::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RegisterRequest.event)
}
inline ::std::string* RegisterRequest::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:api.RegisterRequest.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_event() {
  // @@protoc_insertion_point(field_release:api.RegisterRequest.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_event(::std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:api.RegisterRequest.event)
}

// -------------------------------------------------------------------

// RegisterResponse

// uint64 id = 1;
inline void RegisterResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegisterResponse::id() const {
  // @@protoc_insertion_point(field_get:api.RegisterResponse.id)
  return id_;
}
inline void RegisterResponse::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:api.RegisterResponse.id)
}

// -------------------------------------------------------------------

// SubscriptionRequest

// string ext = 1;
inline void SubscriptionRequest::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionRequest::ext() const {
  // @@protoc_insertion_point(field_get:api.SubscriptionRequest.ext)
  return ext_.GetNoArena();
}
inline void SubscriptionRequest::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscriptionRequest.ext)
}
#if LANG_CXX11
inline void SubscriptionRequest::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscriptionRequest.ext)
}
#endif
inline void SubscriptionRequest::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscriptionRequest.ext)
}
inline void SubscriptionRequest::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscriptionRequest.ext)
}
inline ::std::string* SubscriptionRequest::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscriptionRequest.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionRequest::release_ext() {
  // @@protoc_insertion_point(field_release:api.SubscriptionRequest.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionRequest::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.SubscriptionRequest.ext)
}

// repeated uint64 ids = 2;
inline int SubscriptionRequest::ids_size() const {
  return ids_.size();
}
inline void SubscriptionRequest::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint64 SubscriptionRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:api.SubscriptionRequest.ids)
  return ids_.Get(index);
}
inline void SubscriptionRequest::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SubscriptionRequest.ids)
}
inline void SubscriptionRequest::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:api.SubscriptionRequest.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SubscriptionRequest::ids() const {
  // @@protoc_insertion_point(field_list:api.SubscriptionRequest.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SubscriptionRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:api.SubscriptionRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// UnregisterRequest

// string ext = 1;
inline void UnregisterRequest::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnregisterRequest::ext() const {
  // @@protoc_insertion_point(field_get:api.UnregisterRequest.ext)
  return ext_.GetNoArena();
}
inline void UnregisterRequest::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UnregisterRequest.ext)
}
#if LANG_CXX11
inline void UnregisterRequest::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UnregisterRequest.ext)
}
#endif
inline void UnregisterRequest::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UnregisterRequest.ext)
}
inline void UnregisterRequest::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UnregisterRequest.ext)
}
inline ::std::string* UnregisterRequest::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.UnregisterRequest.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnregisterRequest::release_ext() {
  // @@protoc_insertion_point(field_release:api.UnregisterRequest.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnregisterRequest::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.UnregisterRequest.ext)
}

// uint64 id = 2;
inline void UnregisterRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnregisterRequest::id() const {
  // @@protoc_insertion_point(field_get:api.UnregisterRequest.id)
  return id_;
}
inline void UnregisterRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:api.UnregisterRequest.id)
}

// -------------------------------------------------------------------

// UnregisterAllRequest

// string ext = 1;
inline void UnregisterAllRequest::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnregisterAllRequest::ext() const {
  // @@protoc_insertion_point(field_get:api.UnregisterAllRequest.ext)
  return ext_.GetNoArena();
}
inline void UnregisterAllRequest::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UnregisterAllRequest.ext)
}
#if LANG_CXX11
inline void UnregisterAllRequest::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UnregisterAllRequest.ext)
}
#endif
inline void UnregisterAllRequest::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UnregisterAllRequest.ext)
}
inline void UnregisterAllRequest::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UnregisterAllRequest.ext)
}
inline ::std::string* UnregisterAllRequest::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.UnregisterAllRequest.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnregisterAllRequest::release_ext() {
  // @@protoc_insertion_point(field_release:api.UnregisterAllRequest.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnregisterAllRequest::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.UnregisterAllRequest.ext)
}

// -------------------------------------------------------------------

// WriteRequest

// string ext = 1;
inline void WriteRequest::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::ext() const {
  // @@protoc_insertion_point(field_get:api.WriteRequest.ext)
  return ext_.GetNoArena();
}
inline void WriteRequest::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.WriteRequest.ext)
}
#if LANG_CXX11
inline void WriteRequest::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.WriteRequest.ext)
}
#endif
inline void WriteRequest::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.WriteRequest.ext)
}
inline void WriteRequest::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.WriteRequest.ext)
}
inline ::std::string* WriteRequest::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:api.WriteRequest.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_ext() {
  // @@protoc_insertion_point(field_release:api.WriteRequest.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_ext(::std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:api.WriteRequest.ext)
}

// string net = 2;
inline void WriteRequest::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::net() const {
  // @@protoc_insertion_point(field_get:api.WriteRequest.net)
  return net_.GetNoArena();
}
inline void WriteRequest::set_net(const ::std::string& value) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.WriteRequest.net)
}
#if LANG_CXX11
inline void WriteRequest::set_net(::std::string&& value) {
  
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.WriteRequest.net)
}
#endif
inline void WriteRequest::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.WriteRequest.net)
}
inline void WriteRequest::set_net(const char* value, size_t size) {
  
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.WriteRequest.net)
}
inline ::std::string* WriteRequest::mutable_net() {
  
  // @@protoc_insertion_point(field_mutable:api.WriteRequest.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_net() {
  // @@protoc_insertion_point(field_release:api.WriteRequest.net)
  
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_net(::std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:api.WriteRequest.net)
}

// bytes msg = 3;
inline void WriteRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::msg() const {
  // @@protoc_insertion_point(field_get:api.WriteRequest.msg)
  return msg_.GetNoArena();
}
inline void WriteRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.WriteRequest.msg)
}
#if LANG_CXX11
inline void WriteRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.WriteRequest.msg)
}
#endif
inline void WriteRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.WriteRequest.msg)
}
inline void WriteRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.WriteRequest.msg)
}
inline ::std::string* WriteRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:api.WriteRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_msg() {
  // @@protoc_insertion_point(field_release:api.WriteRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:api.WriteRequest.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::Cmd_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::Cmd_Kind>() {
  return ::api::Cmd_Kind_descriptor();
}
template <> struct is_proto_enum< ::api::Cmd_Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::Cmd_Scope>() {
  return ::api::Cmd_Scope_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ultimateq_2eproto
