// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ultimateq.proto

#include "ultimateq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Access_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelModes_AddressMode_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelModes_ArgModesEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelModes_ModesEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdEvent_ArgsEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cmd_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IRCEvent_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogoutRequest_HostUser_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ModeKinds_ChannelModesEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ModeKinds_UserPrefix_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkInfo_ExtrasEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StateUser_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StoredChannel_DataEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StoredUser_DataEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChannelModes_AddressModesEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CmdEvent_TargetStoredUsersEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CmdEvent_TargetUsersEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StateChannel_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoredChannel_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoredUser_AccessEntry_DoNotUse_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserModes_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ModeKinds_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StoredUser_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ChannelModes_ultimateq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ultimateq_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_CmdEvent_ultimateq_2eproto;
namespace api {
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
class QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Query> _instance;
} _Query_default_instance_;
class ListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListResponse> _instance;
} _ListResponse_default_instance_;
class CountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountResponse> _instance;
} _CountResponse_default_instance_;
class AccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Access> _instance;
} _Access_default_instance_;
class ChannelModes_AddressModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelModes_AddressMode> _instance;
} _ChannelModes_AddressMode_default_instance_;
class ChannelModes_ModesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelModes_ModesEntry_DoNotUse> _instance;
} _ChannelModes_ModesEntry_DoNotUse_default_instance_;
class ChannelModes_ArgModesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelModes_ArgModesEntry_DoNotUse> _instance;
} _ChannelModes_ArgModesEntry_DoNotUse_default_instance_;
class ChannelModes_AddressModesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelModes_AddressModesEntry_DoNotUse> _instance;
} _ChannelModes_AddressModesEntry_DoNotUse_default_instance_;
class ChannelModesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelModes> _instance;
} _ChannelModes_default_instance_;
class StateUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateUser> _instance;
} _StateUser_default_instance_;
class StateChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateChannel> _instance;
} _StateChannel_default_instance_;
class UserModesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserModes> _instance;
} _UserModes_default_instance_;
class ModeKinds_UserPrefixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModeKinds_UserPrefix> _instance;
} _ModeKinds_UserPrefix_default_instance_;
class ModeKinds_ChannelModesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModeKinds_ChannelModesEntry_DoNotUse> _instance;
} _ModeKinds_ChannelModesEntry_DoNotUse_default_instance_;
class ModeKindsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModeKinds> _instance;
} _ModeKinds_default_instance_;
class NetworkInfo_ExtrasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkInfo_ExtrasEntry_DoNotUse> _instance;
} _NetworkInfo_ExtrasEntry_DoNotUse_default_instance_;
class NetworkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkInfo> _instance;
} _NetworkInfo_default_instance_;
class StoredUser_AccessEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredUser_AccessEntry_DoNotUse> _instance;
} _StoredUser_AccessEntry_DoNotUse_default_instance_;
class StoredUser_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredUser_DataEntry_DoNotUse> _instance;
} _StoredUser_DataEntry_DoNotUse_default_instance_;
class StoredUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredUser> _instance;
} _StoredUser_default_instance_;
class StoredChannel_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredChannel_DataEntry_DoNotUse> _instance;
} _StoredChannel_DataEntry_DoNotUse_default_instance_;
class StoredChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredChannel> _instance;
} _StoredChannel_default_instance_;
class SelfResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SelfResponse> _instance;
} _SelfResponse_default_instance_;
class NetworkQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkQuery> _instance;
} _NetworkQuery_default_instance_;
class ChannelQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelQuery> _instance;
} _ChannelQuery_default_instance_;
class AuthUserRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthUserRequest> _instance;
} _AuthUserRequest_default_instance_;
class UserResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserResponse> _instance;
} _UserResponse_default_instance_;
class UserModesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserModesResponse> _instance;
} _UserModesResponse_default_instance_;
class ChannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelResponse> _instance;
} _ChannelResponse_default_instance_;
class StoredUsersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredUsersResponse> _instance;
} _StoredUsersResponse_default_instance_;
class StoredChannelsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredChannelsResponse> _instance;
} _StoredChannelsResponse_default_instance_;
class LogoutRequest_HostUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutRequest_HostUser> _instance;
} _LogoutRequest_HostUser_default_instance_;
class LogoutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutRequest> _instance;
  const ::api::LogoutRequest_HostUser* host_user_;
  ::google::protobuf::internal::ArenaStringPtr username_;
} _LogoutRequest_default_instance_;
class NetworkInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkInfoRequest> _instance;
} _NetworkInfoRequest_default_instance_;
class CmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cmd> _instance;
} _Cmd_default_instance_;
class CmdEvent_TargetUsersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdEvent_TargetUsersEntry_DoNotUse> _instance;
} _CmdEvent_TargetUsersEntry_DoNotUse_default_instance_;
class CmdEvent_TargetStoredUsersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdEvent_TargetStoredUsersEntry_DoNotUse> _instance;
} _CmdEvent_TargetStoredUsersEntry_DoNotUse_default_instance_;
class CmdEvent_ArgsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdEvent_ArgsEntry_DoNotUse> _instance;
} _CmdEvent_ArgsEntry_DoNotUse_default_instance_;
class CmdEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdEvent> _instance;
} _CmdEvent_default_instance_;
class CmdEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdEventResponse> _instance;
} _CmdEventResponse_default_instance_;
class IRCEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IRCEventResponse> _instance;
} _IRCEventResponse_default_instance_;
class IRCEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IRCEvent> _instance;
} _IRCEvent_default_instance_;
class RegisterCmdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterCmdRequest> _instance;
} _RegisterCmdRequest_default_instance_;
class RegisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterRequest> _instance;
} _RegisterRequest_default_instance_;
class RegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterResponse> _instance;
} _RegisterResponse_default_instance_;
class SubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscriptionRequest> _instance;
} _SubscriptionRequest_default_instance_;
class UnregisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnregisterRequest> _instance;
} _UnregisterRequest_default_instance_;
class UnregisterAllRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnregisterAllRequest> _instance;
} _UnregisterAllRequest_default_instance_;
class WriteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteRequest> _instance;
} _WriteRequest_default_instance_;
}  // namespace api
static void InitDefaultsEmpty_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Empty_default_instance_;
    new (ptr) ::api::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty_ultimateq_2eproto}, {}};

static void InitDefaultsResult_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Result_default_instance_;
    new (ptr) ::api::Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Result_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResult_ultimateq_2eproto}, {}};

static void InitDefaultsQuery_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Query_default_instance_;
    new (ptr) ::api::Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Query_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuery_ultimateq_2eproto}, {}};

static void InitDefaultsListResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ListResponse_default_instance_;
    new (ptr) ::api::ListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListResponse_ultimateq_2eproto}, {}};

static void InitDefaultsCountResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CountResponse_default_instance_;
    new (ptr) ::api::CountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CountResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCountResponse_ultimateq_2eproto}, {}};

static void InitDefaultsAccess_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Access_default_instance_;
    new (ptr) ::api::Access();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Access::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Access_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccess_ultimateq_2eproto}, {}};

static void InitDefaultsChannelModes_AddressMode_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelModes_AddressMode_default_instance_;
    new (ptr) ::api::ChannelModes_AddressMode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ChannelModes_AddressMode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelModes_AddressMode_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelModes_AddressMode_ultimateq_2eproto}, {}};

static void InitDefaultsChannelModes_ModesEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelModes_ModesEntry_DoNotUse_default_instance_;
    new (ptr) ::api::ChannelModes_ModesEntry_DoNotUse();
  }
  ::api::ChannelModes_ModesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelModes_ModesEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelModes_ModesEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsChannelModes_ArgModesEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelModes_ArgModesEntry_DoNotUse_default_instance_;
    new (ptr) ::api::ChannelModes_ArgModesEntry_DoNotUse();
  }
  ::api::ChannelModes_ArgModesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelModes_ArgModesEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelModes_ArgModesEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsChannelModes_AddressModesEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelModes_AddressModesEntry_DoNotUse_default_instance_;
    new (ptr) ::api::ChannelModes_AddressModesEntry_DoNotUse();
  }
  ::api::ChannelModes_AddressModesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChannelModes_AddressModesEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChannelModes_AddressModesEntry_DoNotUse_ultimateq_2eproto}, {
      &scc_info_ChannelModes_AddressMode_ultimateq_2eproto.base,}};

static void InitDefaultsChannelModes_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelModes_default_instance_;
    new (ptr) ::api::ChannelModes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ChannelModes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ChannelModes_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsChannelModes_ultimateq_2eproto}, {
      &scc_info_ChannelModes_ModesEntry_DoNotUse_ultimateq_2eproto.base,
      &scc_info_ChannelModes_ArgModesEntry_DoNotUse_ultimateq_2eproto.base,
      &scc_info_ChannelModes_AddressModesEntry_DoNotUse_ultimateq_2eproto.base,
      &scc_info_ModeKinds_ultimateq_2eproto.base,}};

static void InitDefaultsStateUser_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StateUser_default_instance_;
    new (ptr) ::api::StateUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::StateUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StateUser_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStateUser_ultimateq_2eproto}, {}};

static void InitDefaultsStateChannel_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StateChannel_default_instance_;
    new (ptr) ::api::StateChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::StateChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StateChannel_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStateChannel_ultimateq_2eproto}, {
      &scc_info_ChannelModes_ultimateq_2eproto.base,}};

static void InitDefaultsUserModes_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UserModes_default_instance_;
    new (ptr) ::api::UserModes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UserModes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserModes_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserModes_ultimateq_2eproto}, {
      &scc_info_ModeKinds_ultimateq_2eproto.base,}};

static void InitDefaultsModeKinds_UserPrefix_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ModeKinds_UserPrefix_default_instance_;
    new (ptr) ::api::ModeKinds_UserPrefix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ModeKinds_UserPrefix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModeKinds_UserPrefix_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModeKinds_UserPrefix_ultimateq_2eproto}, {}};

static void InitDefaultsModeKinds_ChannelModesEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ModeKinds_ChannelModesEntry_DoNotUse_default_instance_;
    new (ptr) ::api::ModeKinds_ChannelModesEntry_DoNotUse();
  }
  ::api::ModeKinds_ChannelModesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModeKinds_ChannelModesEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModeKinds_ChannelModesEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsModeKinds_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ModeKinds_default_instance_;
    new (ptr) ::api::ModeKinds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ModeKinds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ModeKinds_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsModeKinds_ultimateq_2eproto}, {
      &scc_info_ModeKinds_UserPrefix_ultimateq_2eproto.base,
      &scc_info_ModeKinds_ChannelModesEntry_DoNotUse_ultimateq_2eproto.base,}};

static void InitDefaultsNetworkInfo_ExtrasEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NetworkInfo_ExtrasEntry_DoNotUse_default_instance_;
    new (ptr) ::api::NetworkInfo_ExtrasEntry_DoNotUse();
  }
  ::api::NetworkInfo_ExtrasEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkInfo_ExtrasEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkInfo_ExtrasEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsNetworkInfo_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NetworkInfo_default_instance_;
    new (ptr) ::api::NetworkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::NetworkInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NetworkInfo_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNetworkInfo_ultimateq_2eproto}, {
      &scc_info_NetworkInfo_ExtrasEntry_DoNotUse_ultimateq_2eproto.base,}};

static void InitDefaultsStoredUser_AccessEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredUser_AccessEntry_DoNotUse_default_instance_;
    new (ptr) ::api::StoredUser_AccessEntry_DoNotUse();
  }
  ::api::StoredUser_AccessEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredUser_AccessEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredUser_AccessEntry_DoNotUse_ultimateq_2eproto}, {
      &scc_info_Access_ultimateq_2eproto.base,}};

static void InitDefaultsStoredUser_DataEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredUser_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::api::StoredUser_DataEntry_DoNotUse();
  }
  ::api::StoredUser_DataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StoredUser_DataEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoredUser_DataEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsStoredUser_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredUser_default_instance_;
    new (ptr) ::api::StoredUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::StoredUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StoredUser_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStoredUser_ultimateq_2eproto}, {
      &scc_info_StoredUser_AccessEntry_DoNotUse_ultimateq_2eproto.base,
      &scc_info_StoredUser_DataEntry_DoNotUse_ultimateq_2eproto.base,}};

static void InitDefaultsStoredChannel_DataEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredChannel_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::api::StoredChannel_DataEntry_DoNotUse();
  }
  ::api::StoredChannel_DataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StoredChannel_DataEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoredChannel_DataEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsStoredChannel_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredChannel_default_instance_;
    new (ptr) ::api::StoredChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::StoredChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredChannel_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredChannel_ultimateq_2eproto}, {
      &scc_info_StoredChannel_DataEntry_DoNotUse_ultimateq_2eproto.base,}};

static void InitDefaultsSelfResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SelfResponse_default_instance_;
    new (ptr) ::api::SelfResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::SelfResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SelfResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSelfResponse_ultimateq_2eproto}, {
      &scc_info_StateUser_ultimateq_2eproto.base,
      &scc_info_ChannelModes_ultimateq_2eproto.base,}};

static void InitDefaultsNetworkQuery_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NetworkQuery_default_instance_;
    new (ptr) ::api::NetworkQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::NetworkQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkQuery_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkQuery_ultimateq_2eproto}, {}};

static void InitDefaultsChannelQuery_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelQuery_default_instance_;
    new (ptr) ::api::ChannelQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ChannelQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelQuery_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelQuery_ultimateq_2eproto}, {}};

static void InitDefaultsAuthUserRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AuthUserRequest_default_instance_;
    new (ptr) ::api::AuthUserRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AuthUserRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthUserRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthUserRequest_ultimateq_2eproto}, {}};

static void InitDefaultsUserResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UserResponse_default_instance_;
    new (ptr) ::api::UserResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UserResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserResponse_ultimateq_2eproto}, {
      &scc_info_StateUser_ultimateq_2eproto.base,}};

static void InitDefaultsUserModesResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UserModesResponse_default_instance_;
    new (ptr) ::api::UserModesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UserModesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserModesResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserModesResponse_ultimateq_2eproto}, {
      &scc_info_ChannelModes_ultimateq_2eproto.base,}};

static void InitDefaultsChannelResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ChannelResponse_default_instance_;
    new (ptr) ::api::ChannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ChannelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChannelResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChannelResponse_ultimateq_2eproto}, {
      &scc_info_ChannelModes_ultimateq_2eproto.base,}};

static void InitDefaultsStoredUsersResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredUsersResponse_default_instance_;
    new (ptr) ::api::StoredUsersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::StoredUsersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredUsersResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredUsersResponse_ultimateq_2eproto}, {
      &scc_info_StoredUser_ultimateq_2eproto.base,}};

static void InitDefaultsStoredChannelsResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_StoredChannelsResponse_default_instance_;
    new (ptr) ::api::StoredChannelsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::StoredChannelsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredChannelsResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredChannelsResponse_ultimateq_2eproto}, {
      &scc_info_StoredChannel_ultimateq_2eproto.base,}};

static void InitDefaultsLogoutRequest_HostUser_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LogoutRequest_HostUser_default_instance_;
    new (ptr) ::api::LogoutRequest_HostUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::LogoutRequest_HostUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogoutRequest_HostUser_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogoutRequest_HostUser_ultimateq_2eproto}, {}};

static void InitDefaultsLogoutRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LogoutRequest_default_instance_;
    new (ptr) ::api::LogoutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::LogoutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogoutRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogoutRequest_ultimateq_2eproto}, {
      &scc_info_LogoutRequest_HostUser_ultimateq_2eproto.base,}};

static void InitDefaultsNetworkInfoRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NetworkInfoRequest_default_instance_;
    new (ptr) ::api::NetworkInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::NetworkInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkInfoRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkInfoRequest_ultimateq_2eproto}, {}};

static void InitDefaultsCmd_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Cmd_default_instance_;
    new (ptr) ::api::Cmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Cmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Cmd_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmd_ultimateq_2eproto}, {}};

static void InitDefaultsCmdEvent_TargetUsersEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CmdEvent_TargetUsersEntry_DoNotUse_default_instance_;
    new (ptr) ::api::CmdEvent_TargetUsersEntry_DoNotUse();
  }
  ::api::CmdEvent_TargetUsersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdEvent_TargetUsersEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdEvent_TargetUsersEntry_DoNotUse_ultimateq_2eproto}, {
      &scc_info_StateUser_ultimateq_2eproto.base,}};

static void InitDefaultsCmdEvent_TargetStoredUsersEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CmdEvent_TargetStoredUsersEntry_DoNotUse_default_instance_;
    new (ptr) ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse();
  }
  ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdEvent_TargetStoredUsersEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdEvent_TargetStoredUsersEntry_DoNotUse_ultimateq_2eproto}, {
      &scc_info_StoredUser_ultimateq_2eproto.base,}};

static void InitDefaultsCmdEvent_ArgsEntry_DoNotUse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CmdEvent_ArgsEntry_DoNotUse_default_instance_;
    new (ptr) ::api::CmdEvent_ArgsEntry_DoNotUse();
  }
  ::api::CmdEvent_ArgsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdEvent_ArgsEntry_DoNotUse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdEvent_ArgsEntry_DoNotUse_ultimateq_2eproto}, {}};

static void InitDefaultsCmdEvent_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CmdEvent_default_instance_;
    new (ptr) ::api::CmdEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CmdEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_CmdEvent_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsCmdEvent_ultimateq_2eproto}, {
      &scc_info_IRCEvent_ultimateq_2eproto.base,
      &scc_info_StateUser_ultimateq_2eproto.base,
      &scc_info_StoredUser_ultimateq_2eproto.base,
      &scc_info_UserModes_ultimateq_2eproto.base,
      &scc_info_StateChannel_ultimateq_2eproto.base,
      &scc_info_CmdEvent_TargetUsersEntry_DoNotUse_ultimateq_2eproto.base,
      &scc_info_CmdEvent_TargetStoredUsersEntry_DoNotUse_ultimateq_2eproto.base,
      &scc_info_CmdEvent_ArgsEntry_DoNotUse_ultimateq_2eproto.base,}};

static void InitDefaultsCmdEventResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CmdEventResponse_default_instance_;
    new (ptr) ::api::CmdEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CmdEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdEventResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdEventResponse_ultimateq_2eproto}, {
      &scc_info_CmdEvent_ultimateq_2eproto.base,}};

static void InitDefaultsIRCEventResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_IRCEventResponse_default_instance_;
    new (ptr) ::api::IRCEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::IRCEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IRCEventResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIRCEventResponse_ultimateq_2eproto}, {
      &scc_info_IRCEvent_ultimateq_2eproto.base,}};

static void InitDefaultsIRCEvent_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_IRCEvent_default_instance_;
    new (ptr) ::api::IRCEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::IRCEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IRCEvent_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIRCEvent_ultimateq_2eproto}, {}};

static void InitDefaultsRegisterCmdRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_RegisterCmdRequest_default_instance_;
    new (ptr) ::api::RegisterCmdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::RegisterCmdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterCmdRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterCmdRequest_ultimateq_2eproto}, {
      &scc_info_Cmd_ultimateq_2eproto.base,}};

static void InitDefaultsRegisterRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_RegisterRequest_default_instance_;
    new (ptr) ::api::RegisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::RegisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterRequest_ultimateq_2eproto}, {}};

static void InitDefaultsRegisterResponse_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_RegisterResponse_default_instance_;
    new (ptr) ::api::RegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::RegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterResponse_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterResponse_ultimateq_2eproto}, {}};

static void InitDefaultsSubscriptionRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubscriptionRequest_default_instance_;
    new (ptr) ::api::SubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::SubscriptionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscriptionRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscriptionRequest_ultimateq_2eproto}, {}};

static void InitDefaultsUnregisterRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UnregisterRequest_default_instance_;
    new (ptr) ::api::UnregisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UnregisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnregisterRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnregisterRequest_ultimateq_2eproto}, {}};

static void InitDefaultsUnregisterAllRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UnregisterAllRequest_default_instance_;
    new (ptr) ::api::UnregisterAllRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UnregisterAllRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnregisterAllRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnregisterAllRequest_ultimateq_2eproto}, {}};

static void InitDefaultsWriteRequest_ultimateq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WriteRequest_default_instance_;
    new (ptr) ::api::WriteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::WriteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteRequest_ultimateq_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteRequest_ultimateq_2eproto}, {}};

void InitDefaults_ultimateq_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Empty_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Result_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Query_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Access_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelModes_AddressMode_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelModes_ModesEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelModes_ArgModesEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelModes_AddressModesEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelModes_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StateUser_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StateChannel_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserModes_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModeKinds_UserPrefix_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModeKinds_ChannelModesEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModeKinds_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkInfo_ExtrasEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkInfo_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredUser_AccessEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredUser_DataEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredUser_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredChannel_DataEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredChannel_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SelfResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkQuery_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelQuery_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthUserRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserModesResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredUsersResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredChannelsResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutRequest_HostUser_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkInfoRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cmd_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdEvent_TargetUsersEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdEvent_TargetStoredUsersEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdEvent_ArgsEntry_DoNotUse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdEvent_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdEventResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IRCEventResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IRCEvent_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterCmdRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterResponse_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscriptionRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnregisterRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnregisterAllRequest_ultimateq_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteRequest_ultimateq_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ultimateq_2eproto[51];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ultimateq_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ultimateq_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ultimateq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Result, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Query, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ListResponse, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CountResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Access, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Access, level_),
  PROTOBUF_FIELD_OFFSET(::api::Access, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_AddressMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_AddressMode, mode_addresses_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ModesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ArgModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ArgModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ArgModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_ArgModesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_AddressModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_AddressModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_AddressModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes_AddressModesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes, modes_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes, arg_modes_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes, address_modes_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes, addresses_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelModes, kinds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::StateUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StateUser, host_),
  PROTOBUF_FIELD_OFFSET(::api::StateUser, realname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::StateChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StateChannel, name_),
  PROTOBUF_FIELD_OFFSET(::api::StateChannel, topic_),
  PROTOBUF_FIELD_OFFSET(::api::StateChannel, modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UserModes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UserModes, kinds_),
  PROTOBUF_FIELD_OFFSET(::api::UserModes, modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_UserPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_UserPrefix, symbol_),
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_UserPrefix, char__),
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_ChannelModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_ChannelModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_ChannelModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds_ChannelModesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds, user_prefixes_),
  PROTOBUF_FIELD_OFFSET(::api::ModeKinds, channel_modes_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo_ExtrasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo_ExtrasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo_ExtrasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo_ExtrasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, server_name_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, ircd_version_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, usermodes_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, lchanmodes_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, rfc_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, ircd_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, casemapping_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, prefix_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, chantypes_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, chanmodes_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, chanlimit_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, channellen_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, nicklen_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, topiclen_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, awaylen_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, kicklen_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, modes_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfo, extras_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_AccessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_AccessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_AccessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_AccessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::StoredUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredUser, username_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser, password_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser, masks_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser, access_),
  PROTOBUF_FIELD_OFFSET(::api::StoredUser, data_),
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel, net_),
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel, name_),
  PROTOBUF_FIELD_OFFSET(::api::StoredChannel, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SelfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SelfResponse, user_),
  PROTOBUF_FIELD_OFFSET(::api::SelfResponse, modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NetworkQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NetworkQuery, net_),
  PROTOBUF_FIELD_OFFSET(::api::NetworkQuery, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ChannelQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelQuery, net_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelQuery, channel_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelQuery, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AuthUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AuthUserRequest, net_),
  PROTOBUF_FIELD_OFFSET(::api::AuthUserRequest, host_),
  PROTOBUF_FIELD_OFFSET(::api::AuthUserRequest, username_),
  PROTOBUF_FIELD_OFFSET(::api::AuthUserRequest, password_),
  PROTOBUF_FIELD_OFFSET(::api::AuthUserRequest, permanent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UserResponse, self_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UserModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UserModesResponse, modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ChannelResponse, name_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelResponse, topic_),
  PROTOBUF_FIELD_OFFSET(::api::ChannelResponse, modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::StoredUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredUsersResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::StoredChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::StoredChannelsResponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LogoutRequest_HostUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LogoutRequest_HostUser, net_),
  PROTOBUF_FIELD_OFFSET(::api::LogoutRequest_HostUser, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::api::LogoutRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::api::LogoutRequestDefaultTypeInternal, host_user_),
  offsetof(::api::LogoutRequestDefaultTypeInternal, username_),
  PROTOBUF_FIELD_OFFSET(::api::LogoutRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NetworkInfoRequest, net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Cmd, ext_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, name_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, desc_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, kind_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, scope_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, args_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, require_auth_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, req_level_),
  PROTOBUF_FIELD_OFFSET(::api::Cmd, req_flags_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetUsersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetUsersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetUsersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetUsersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetStoredUsersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetStoredUsersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetStoredUsersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_TargetStoredUsersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_ArgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_ArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_ArgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent_ArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, ircevent_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, user_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, storeduser_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, userchanmodes_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, channel_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, targetchannel_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, targetusers_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, targetstoredusers_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, targetvariadicusers_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, targetvariadicstoredusers_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEvent, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CmdEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CmdEventResponse, id_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEventResponse, name_),
  PROTOBUF_FIELD_OFFSET(::api::CmdEventResponse, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::IRCEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::IRCEventResponse, id_),
  PROTOBUF_FIELD_OFFSET(::api::IRCEventResponse, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::IRCEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::IRCEvent, name_),
  PROTOBUF_FIELD_OFFSET(::api::IRCEvent, sender_),
  PROTOBUF_FIELD_OFFSET(::api::IRCEvent, args_),
  PROTOBUF_FIELD_OFFSET(::api::IRCEvent, time_),
  PROTOBUF_FIELD_OFFSET(::api::IRCEvent, net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::RegisterCmdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::RegisterCmdRequest, ext_),
  PROTOBUF_FIELD_OFFSET(::api::RegisterCmdRequest, network_),
  PROTOBUF_FIELD_OFFSET(::api::RegisterCmdRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::api::RegisterCmdRequest, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::RegisterRequest, ext_),
  PROTOBUF_FIELD_OFFSET(::api::RegisterRequest, network_),
  PROTOBUF_FIELD_OFFSET(::api::RegisterRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::api::RegisterRequest, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::RegisterResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubscriptionRequest, ext_),
  PROTOBUF_FIELD_OFFSET(::api::SubscriptionRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UnregisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UnregisterRequest, ext_),
  PROTOBUF_FIELD_OFFSET(::api::UnregisterRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UnregisterAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UnregisterAllRequest, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WriteRequest, ext_),
  PROTOBUF_FIELD_OFFSET(::api::WriteRequest, net_),
  PROTOBUF_FIELD_OFFSET(::api::WriteRequest, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api::Empty)},
  { 5, -1, sizeof(::api::Result)},
  { 11, -1, sizeof(::api::Query)},
  { 17, -1, sizeof(::api::ListResponse)},
  { 23, -1, sizeof(::api::CountResponse)},
  { 29, -1, sizeof(::api::Access)},
  { 36, -1, sizeof(::api::ChannelModes_AddressMode)},
  { 42, 49, sizeof(::api::ChannelModes_ModesEntry_DoNotUse)},
  { 51, 58, sizeof(::api::ChannelModes_ArgModesEntry_DoNotUse)},
  { 60, 67, sizeof(::api::ChannelModes_AddressModesEntry_DoNotUse)},
  { 69, -1, sizeof(::api::ChannelModes)},
  { 79, -1, sizeof(::api::StateUser)},
  { 86, -1, sizeof(::api::StateChannel)},
  { 94, -1, sizeof(::api::UserModes)},
  { 101, -1, sizeof(::api::ModeKinds_UserPrefix)},
  { 108, 115, sizeof(::api::ModeKinds_ChannelModesEntry_DoNotUse)},
  { 117, -1, sizeof(::api::ModeKinds)},
  { 124, 131, sizeof(::api::NetworkInfo_ExtrasEntry_DoNotUse)},
  { 133, -1, sizeof(::api::NetworkInfo)},
  { 156, 163, sizeof(::api::StoredUser_AccessEntry_DoNotUse)},
  { 165, 172, sizeof(::api::StoredUser_DataEntry_DoNotUse)},
  { 174, -1, sizeof(::api::StoredUser)},
  { 184, 191, sizeof(::api::StoredChannel_DataEntry_DoNotUse)},
  { 193, -1, sizeof(::api::StoredChannel)},
  { 201, -1, sizeof(::api::SelfResponse)},
  { 208, -1, sizeof(::api::NetworkQuery)},
  { 215, -1, sizeof(::api::ChannelQuery)},
  { 223, -1, sizeof(::api::AuthUserRequest)},
  { 233, -1, sizeof(::api::UserResponse)},
  { 239, -1, sizeof(::api::UserModesResponse)},
  { 245, -1, sizeof(::api::ChannelResponse)},
  { 253, -1, sizeof(::api::StoredUsersResponse)},
  { 259, -1, sizeof(::api::StoredChannelsResponse)},
  { 265, -1, sizeof(::api::LogoutRequest_HostUser)},
  { 272, -1, sizeof(::api::LogoutRequest)},
  { 280, -1, sizeof(::api::NetworkInfoRequest)},
  { 286, -1, sizeof(::api::Cmd)},
  { 300, 307, sizeof(::api::CmdEvent_TargetUsersEntry_DoNotUse)},
  { 309, 316, sizeof(::api::CmdEvent_TargetStoredUsersEntry_DoNotUse)},
  { 318, 325, sizeof(::api::CmdEvent_ArgsEntry_DoNotUse)},
  { 327, -1, sizeof(::api::CmdEvent)},
  { 343, -1, sizeof(::api::CmdEventResponse)},
  { 351, -1, sizeof(::api::IRCEventResponse)},
  { 358, -1, sizeof(::api::IRCEvent)},
  { 368, -1, sizeof(::api::RegisterCmdRequest)},
  { 377, -1, sizeof(::api::RegisterRequest)},
  { 386, -1, sizeof(::api::RegisterResponse)},
  { 392, -1, sizeof(::api::SubscriptionRequest)},
  { 399, -1, sizeof(::api::UnregisterRequest)},
  { 406, -1, sizeof(::api::UnregisterAllRequest)},
  { 412, -1, sizeof(::api::WriteRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_Access_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelModes_AddressMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelModes_ModesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelModes_ArgModesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelModes_AddressModesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelModes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StateUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StateChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_UserModes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ModeKinds_UserPrefix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ModeKinds_ChannelModesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ModeKinds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_NetworkInfo_ExtrasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_NetworkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredUser_AccessEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredUser_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredChannel_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_SelfResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_NetworkQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AuthUserRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_UserResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_UserModesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredUsersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_StoredChannelsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_LogoutRequest_HostUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_LogoutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_NetworkInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_Cmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CmdEvent_TargetUsersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CmdEvent_TargetStoredUsersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CmdEvent_ArgsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CmdEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CmdEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_IRCEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_IRCEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_RegisterCmdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_SubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_UnregisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_UnregisterAllRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_WriteRequest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ultimateq_2eproto = {
  {}, AddDescriptors_ultimateq_2eproto, "ultimateq.proto", schemas,
  file_default_instances, TableStruct_ultimateq_2eproto::offsets,
  file_level_metadata_ultimateq_2eproto, 51, file_level_enum_descriptors_ultimateq_2eproto, file_level_service_descriptors_ultimateq_2eproto,
};

const char descriptor_table_protodef_ultimateq_2eproto[] =
  "\n\017ultimateq.proto\022\003api\"\007\n\005Empty\"\024\n\006Resul"
  "t\022\n\n\002ok\030\001 \001(\010\"\026\n\005Query\022\r\n\005query\030\001 \001(\t\"\034\n"
  "\014ListResponse\022\014\n\004list\030\001 \003(\t\"\036\n\rCountResp"
  "onse\022\r\n\005count\030\001 \001(\005\"&\n\006Access\022\r\n\005level\030\001"
  " \001(\r\022\r\n\005flags\030\002 \001(\004\"\267\003\n\014ChannelModes\022+\n\005"
  "modes\030\001 \003(\0132\034.api.ChannelModes.ModesEntr"
  "y\0222\n\targ_modes\030\002 \003(\0132\037.api.ChannelModes."
  "ArgModesEntry\022:\n\raddress_modes\030\003 \003(\0132#.a"
  "pi.ChannelModes.AddressModesEntry\022\021\n\tadd"
  "resses\030\004 \001(\005\022\035\n\005kinds\030\005 \001(\0132\016.api.ModeKi"
  "nds\032%\n\013AddressMode\022\026\n\016mode_addresses\030\001 \003"
  "(\t\032,\n\nModesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\010:\0028\001\032/\n\rArgModesEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\032R\n\021AddressModesEntry\022\013"
  "\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.api.Channel"
  "Modes.AddressMode:\0028\001\"+\n\tStateUser\022\014\n\004ho"
  "st\030\001 \001(\t\022\020\n\010realname\030\002 \001(\t\"M\n\014StateChann"
  "el\022\014\n\004name\030\001 \001(\t\022\r\n\005topic\030\002 \001(\t\022 \n\005modes"
  "\030\003 \001(\0132\021.api.ChannelModes\"9\n\tUserModes\022\035"
  "\n\005kinds\030\001 \001(\0132\016.api.ModeKinds\022\r\n\005modes\030\002"
  " \001(\005\"\327\001\n\tModeKinds\0220\n\ruser_prefixes\030\001 \003("
  "\0132\031.api.ModeKinds.UserPrefix\0227\n\rchannel_"
  "modes\030\002 \003(\0132 .api.ModeKinds.ChannelModes"
  "Entry\032*\n\nUserPrefix\022\016\n\006symbol\030\001 \001(\t\022\014\n\004c"
  "har\030\002 \001(\t\0323\n\021ChannelModesEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\235\003\n\013NetworkInfo\022\023"
  "\n\013server_name\030\001 \001(\t\022\024\n\014ircd_version\030\002 \001("
  "\t\022\021\n\tusermodes\030\003 \001(\t\022\022\n\nlchanmodes\030\004 \001(\t"
  "\022\013\n\003rfc\030\005 \001(\t\022\014\n\004ircd\030\006 \001(\t\022\023\n\013casemappi"
  "ng\030\007 \001(\t\022\016\n\006prefix\030\010 \001(\t\022\021\n\tchantypes\030\t "
  "\001(\t\022\021\n\tchanmodes\030\n \001(\t\022\021\n\tchanlimit\030\013 \001("
  "\005\022\022\n\nchannellen\030\014 \001(\005\022\017\n\007nicklen\030\r \001(\005\022\020"
  "\n\010topiclen\030\016 \001(\005\022\017\n\007awaylen\030\017 \001(\005\022\017\n\007kic"
  "klen\030\020 \001(\005\022\r\n\005modes\030\021 \001(\005\022,\n\006extras\030\022 \003("
  "\0132\034.api.NetworkInfo.ExtrasEntry\032-\n\013Extra"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\376"
  "\001\n\nStoredUser\022\020\n\010username\030\001 \001(\t\022\020\n\010passw"
  "ord\030\002 \001(\014\022\r\n\005masks\030\003 \003(\t\022+\n\006access\030\004 \003(\013"
  "2\033.api.StoredUser.AccessEntry\022\'\n\004data\030\005 "
  "\003(\0132\031.api.StoredUser.DataEntry\032:\n\013Access"
  "Entry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013.api."
  "Access:\0028\001\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\203\001\n\rStoredChannel\022\013\n\003net"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022*\n\004data\030\003 \003(\0132\034.api"
  ".StoredChannel.DataEntry\032+\n\tDataEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"N\n\014SelfRes"
  "ponse\022\034\n\004user\030\001 \001(\0132\016.api.StateUser\022 \n\005m"
  "odes\030\002 \001(\0132\021.api.ChannelModes\"*\n\014Network"
  "Query\022\013\n\003net\030\001 \001(\t\022\r\n\005query\030\002 \001(\t\";\n\014Cha"
  "nnelQuery\022\013\n\003net\030\001 \001(\t\022\017\n\007channel\030\002 \001(\t\022"
  "\r\n\005query\030\003 \001(\t\"c\n\017AuthUserRequest\022\013\n\003net"
  "\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\020"
  "\n\010password\030\004 \001(\t\022\021\n\tpermanent\030\005 \001(\010\",\n\014U"
  "serResponse\022\034\n\004self\030\001 \001(\0132\016.api.StateUse"
  "r\"5\n\021UserModesResponse\022 \n\005modes\030\001 \001(\0132\021."
  "api.ChannelModes\"P\n\017ChannelResponse\022\014\n\004n"
  "ame\030\001 \001(\t\022\r\n\005topic\030\002 \001(\t\022 \n\005modes\030\003 \001(\0132"
  "\021.api.ChannelModes\"5\n\023StoredUsersRespons"
  "e\022\036\n\005users\030\001 \003(\0132\017.api.StoredUser\">\n\026Sto"
  "redChannelsResponse\022$\n\010channels\030\001 \003(\0132\022."
  "api.StoredChannel\"\205\001\n\rLogoutRequest\0220\n\th"
  "ost_user\030\001 \001(\0132\033.api.LogoutRequest.HostU"
  "serH\000\022\022\n\010username\030\002 \001(\tH\000\032%\n\010HostUser\022\013\n"
  "\003net\030\001 \001(\t\022\014\n\004host\030\002 \001(\tB\007\n\005query\"!\n\022Net"
  "workInfoRequest\022\013\n\003net\030\001 \001(\t\"\222\002\n\003Cmd\022\013\n\003"
  "ext\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\033\n"
  "\004kind\030\004 \001(\0162\r.api.Cmd.Kind\022\035\n\005scope\030\005 \001("
  "\0162\016.api.Cmd.Scope\022\014\n\004args\030\006 \003(\t\022\024\n\014requi"
  "re_auth\030\007 \001(\010\022\021\n\treq_level\030\010 \001(\005\022\021\n\treq_"
  "flags\030\t \001(\t\",\n\004Kind\022\013\n\007Privmsg\020\000\022\n\n\006Noti"
  "ce\020\001\022\013\n\007AnyKind\020\002\".\n\005Scope\022\013\n\007Private\020\000\022"
  "\n\n\006Public\020\001\022\014\n\010AnyScope\020\002\"\235\005\n\010CmdEvent\022\037"
  "\n\010ircEvent\030\001 \001(\0132\r.api.IRCEvent\022\034\n\004user\030"
  "\002 \001(\0132\016.api.StateUser\022#\n\nstoredUser\030\003 \001("
  "\0132\017.api.StoredUser\022%\n\ruserChanModes\030\004 \001("
  "\0132\016.api.UserModes\022\"\n\007channel\030\005 \001(\0132\021.api"
  ".StateChannel\022(\n\rtargetChannel\030\006 \001(\0132\021.a"
  "pi.StateChannel\0223\n\013targetUsers\030\007 \003(\0132\036.a"
  "pi.CmdEvent.TargetUsersEntry\022\?\n\021targetSt"
  "oredUsers\030\010 \003(\0132$.api.CmdEvent.TargetSto"
  "redUsersEntry\022+\n\023targetVariadicUsers\030\t \003"
  "(\0132\016.api.StateUser\0222\n\031targetVariadicStor"
  "edUsers\030\n \003(\0132\017.api.StoredUser\022%\n\004args\030\013"
  " \003(\0132\027.api.CmdEvent.ArgsEntry\032B\n\020TargetU"
  "sersEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016."
  "api.StateUser:\0028\001\032I\n\026TargetStoredUsersEn"
  "try\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.api.St"
  "oredUser:\0028\001\032+\n\tArgsEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\"J\n\020CmdEventResponse\022\n\n"
  "\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\034\n\005event\030\003 \001(\0132\r"
  ".api.CmdEvent\"<\n\020IRCEventResponse\022\n\n\002id\030"
  "\001 \001(\004\022\034\n\005event\030\002 \001(\0132\r.api.IRCEvent\"Q\n\010I"
  "RCEvent\022\014\n\004name\030\001 \001(\t\022\016\n\006sender\030\002 \001(\t\022\014\n"
  "\004args\030\003 \003(\t\022\014\n\004time\030\004 \001(\003\022\013\n\003net\030\005 \001(\t\"Z"
  "\n\022RegisterCmdRequest\022\013\n\003ext\030\001 \001(\t\022\017\n\007net"
  "work\030\002 \001(\t\022\017\n\007channel\030\003 \001(\t\022\025\n\003cmd\030\004 \001(\013"
  "2\010.api.Cmd\"O\n\017RegisterRequest\022\013\n\003ext\030\001 \001"
  "(\t\022\017\n\007network\030\002 \001(\t\022\017\n\007channel\030\003 \001(\t\022\r\n\005"
  "event\030\004 \001(\t\"\036\n\020RegisterResponse\022\n\n\002id\030\001 "
  "\001(\004\"/\n\023SubscriptionRequest\022\013\n\003ext\030\001 \001(\t\022"
  "\013\n\003ids\030\002 \003(\004\",\n\021UnregisterRequest\022\013\n\003ext"
  "\030\001 \001(\t\022\n\n\002id\030\002 \001(\004\"#\n\024UnregisterAllReque"
  "st\022\013\n\003ext\030\001 \001(\t\"5\n\014WriteRequest\022\013\n\003ext\030\001"
  " \001(\t\022\013\n\003net\030\002 \001(\t\022\013\n\003msg\030\003 \001(\0142\260\r\n\003Ext\022;"
  "\n\006Events\022\030.api.SubscriptionRequest\032\025.api"
  ".IRCEventResponse0\001\022=\n\010Commands\022\030.api.Su"
  "bscriptionRequest\032\025.api.CmdEventResponse"
  "0\001\022&\n\005Write\022\021.api.WriteRequest\032\n.api.Emp"
  "ty\0227\n\010Register\022\024.api.RegisterRequest\032\025.a"
  "pi.RegisterResponse\022=\n\013RegisterCmd\022\027.api"
  ".RegisterCmdRequest\032\025.api.RegisterRespon"
  "se\0221\n\nUnregister\022\026.api.UnregisterRequest"
  "\032\013.api.Result\0224\n\rUnregisterCmd\022\026.api.Unr"
  "egisterRequest\032\013.api.Result\0226\n\rUnregiste"
  "rAll\022\031.api.UnregisterAllRequest\032\n.api.Em"
  "pty\022\?\n\022NetworkInformation\022\027.api.NetworkI"
  "nfoRequest\032\020.api.NetworkInfo\022*\n\tStateSel"
  "f\022\n.api.Query\032\021.api.SelfResponse\022/\n\nStat"
  "eUsers\022\021.api.NetworkQuery\032\016.api.StateUse"
  "r\0228\n\020StateUsersByChan\022\021.api.NetworkQuery"
  "\032\021.api.ListResponse\022>\n\025StateUsersByChanC"
  "ount\022\021.api.NetworkQuery\032\022.api.CountRespo"
  "nse\0223\n\016StateUserModes\022\021.api.ChannelQuery"
  "\032\016.api.UserModes\0227\n\014StateChannel\022\021.api.N"
  "etworkQuery\032\024.api.ChannelResponse\022.\n\rSta"
  "teChannels\022\n.api.Query\032\021.api.ListRespons"
  "e\0223\n\021StateChannelCount\022\n.api.Query\032\022.api"
  ".CountResponse\022+\n\tStateIsOn\022\021.api.Channe"
  "lQuery\032\013.api.Result\0222\n\rStoreAuthUser\022\024.a"
  "pi.AuthUserRequest\032\013.api.Result\0225\n\017Store"
  "AuthedUser\022\021.api.NetworkQuery\032\017.api.Stor"
  "edUser\022(\n\tStoreUser\022\n.api.Query\032\017.api.St"
  "oredUser\0222\n\nStoreUsers\022\n.api.Empty\032\030.api"
  ".StoredUsersResponse\022;\n\023StoreUsersByNetw"
  "ork\022\n.api.Query\032\030.api.StoredUsersRespons"
  "e\022B\n\023StoreUsersByChannel\022\021.api.NetworkQu"
  "ery\032\030.api.StoredUsersResponse\0225\n\014StoreCh"
  "annel\022\021.api.NetworkQuery\032\022.api.StoredCha"
  "nnel\0228\n\rStoreChannels\022\n.api.Empty\032\033.api."
  "StoredChannelsResponse\022+\n\014StorePutUser\022\017"
  ".api.StoredUser\032\n.api.Empty\0221\n\017StorePutC"
  "hannel\022\022.api.StoredChannel\032\n.api.Empty\022)"
  "\n\017StoreDeleteUser\022\n.api.Query\032\n.api.Empt"
  "y\0223\n\022StoreDeleteChannel\022\021.api.NetworkQue"
  "ry\032\n.api.Empty\022,\n\013StoreLogout\022\021.api.Netw"
  "orkQuery\032\n.api.Empty\022+\n\021StoreLogoutByUse"
  "r\022\n.api.Query\032\n.api.Emptyb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ultimateq_2eproto = {
  false, InitDefaults_ultimateq_2eproto, 
  descriptor_table_protodef_ultimateq_2eproto,
  "ultimateq.proto", &assign_descriptors_table_ultimateq_2eproto, 5873,
};

void AddDescriptors_ultimateq_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ultimateq_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ultimateq_2eproto = []() { AddDescriptors_ultimateq_2eproto(); return true; }();
namespace api {
const ::google::protobuf::EnumDescriptor* Cmd_Kind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ultimateq_2eproto);
  return file_level_enum_descriptors_ultimateq_2eproto[0];
}
bool Cmd_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cmd_Kind Cmd::Privmsg;
const Cmd_Kind Cmd::Notice;
const Cmd_Kind Cmd::AnyKind;
const Cmd_Kind Cmd::Kind_MIN;
const Cmd_Kind Cmd::Kind_MAX;
const int Cmd::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Cmd_Scope_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ultimateq_2eproto);
  return file_level_enum_descriptors_ultimateq_2eproto[1];
}
bool Cmd_Scope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cmd_Scope Cmd::Private;
const Cmd_Scope Cmd::Public;
const Cmd_Scope Cmd::AnyScope;
const Cmd_Scope Cmd::Scope_MIN;
const Cmd_Scope Cmd::Scope_MAX;
const int Cmd::Scope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:api.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Empty_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Empty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:api.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Result::InitAsDefaultInstance() {
}
class Result::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Result)
}
Result::Result(const Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:api.Result)
}

void Result::SharedCtor() {
  ok_ = false;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:api.Result)
  SharedDtor();
}

void Result::SharedDtor() {
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Result_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Result::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Result*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ok(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::google::protobuf::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Query::InitAsDefaultInstance() {
}
class Query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Query)
}
Query::Query(const Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:api.Query)
}

void Query::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Query_ultimateq_2eproto.base);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:api.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Query& Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Query_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.Query.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.Query.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Query.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Query.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::google::protobuf::DynamicCastToGenerated<Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListResponse::InitAsDefaultInstance() {
}
class ListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListResponse::ListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ListResponse)
}
ListResponse::ListResponse(const ListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.ListResponse)
}

void ListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListResponse_ultimateq_2eproto.base);
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:api.ListResponse)
  SharedDtor();
}

void ListResponse::SharedDtor() {
}

void ListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListResponse& ListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("api.ListResponse.list");
          object = msg->add_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list(this->list_size() - 1).data(),
            static_cast<int>(this->list(this->list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ListResponse.list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ListResponse.list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ListResponse)
}

::google::protobuf::uint8* ListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ListResponse.list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ListResponse)
  return target;
}

size_t ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->list_size());
  for (int i = 0, n = this->list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ListResponse)
    MergeFrom(*source);
  }
}

void ListResponse::MergeFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResponse::CopyFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  return true;
}

void ListResponse::Swap(ListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListResponse::InternalSwap(ListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata ListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CountResponse::InitAsDefaultInstance() {
}
class CountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountResponse::CountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CountResponse)
}
CountResponse::CountResponse(const CountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:api.CountResponse)
}

void CountResponse::SharedCtor() {
  count_ = 0;
}

CountResponse::~CountResponse() {
  // @@protoc_insertion_point(destructor:api.CountResponse)
  SharedDtor();
}

void CountResponse::SharedDtor() {
}

void CountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountResponse& CountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void CountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CountResponse)
}

::google::protobuf::uint8* CountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CountResponse)
  return target;
}

size_t CountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CountResponse)
    MergeFrom(*source);
  }
}

void CountResponse::MergeFrom(const CountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void CountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountResponse::CopyFrom(const CountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountResponse::IsInitialized() const {
  return true;
}

void CountResponse::Swap(CountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountResponse::InternalSwap(CountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata CountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Access::InitAsDefaultInstance() {
}
class Access::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Access::kLevelFieldNumber;
const int Access::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Access::Access()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Access)
}
Access::Access(const Access& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:api.Access)
}

void Access::SharedCtor() {
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(level_));
}

Access::~Access() {
  // @@protoc_insertion_point(destructor:api.Access)
  SharedDtor();
}

void Access::SharedDtor() {
}

void Access::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Access& Access::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Access_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void Access::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Access)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Access::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Access*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 flags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Access::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Access)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.Access)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Access)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Access::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Access)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // uint64 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.Access)
}

::google::protobuf::uint8* Access::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Access)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // uint64 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Access)
  return target;
}

size_t Access::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Access)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flags());
  }

  // uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Access::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Access)
  GOOGLE_DCHECK_NE(&from, this);
  const Access* source =
      ::google::protobuf::DynamicCastToGenerated<Access>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Access)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Access)
    MergeFrom(*source);
  }
}

void Access::MergeFrom(const Access& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Access)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void Access::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Access)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Access::CopyFrom(const Access& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Access)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Access::IsInitialized() const {
  return true;
}

void Access::Swap(Access* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Access::InternalSwap(Access* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(flags_, other->flags_);
  swap(level_, other->level_);
}

::google::protobuf::Metadata Access::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChannelModes_AddressMode::InitAsDefaultInstance() {
}
class ChannelModes_AddressMode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelModes_AddressMode::kModeAddressesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelModes_AddressMode::ChannelModes_AddressMode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ChannelModes.AddressMode)
}
ChannelModes_AddressMode::ChannelModes_AddressMode(const ChannelModes_AddressMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      mode_addresses_(from.mode_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.ChannelModes.AddressMode)
}

void ChannelModes_AddressMode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChannelModes_AddressMode_ultimateq_2eproto.base);
}

ChannelModes_AddressMode::~ChannelModes_AddressMode() {
  // @@protoc_insertion_point(destructor:api.ChannelModes.AddressMode)
  SharedDtor();
}

void ChannelModes_AddressMode::SharedDtor() {
}

void ChannelModes_AddressMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelModes_AddressMode& ChannelModes_AddressMode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChannelModes_AddressMode_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ChannelModes_AddressMode::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ChannelModes.AddressMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_addresses_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChannelModes_AddressMode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChannelModes_AddressMode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string mode_addresses = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("api.ChannelModes.AddressMode.mode_addresses");
          object = msg->add_mode_addresses();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelModes_AddressMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ChannelModes.AddressMode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mode_addresses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mode_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode_addresses(this->mode_addresses_size() - 1).data(),
            static_cast<int>(this->mode_addresses(this->mode_addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelModes.AddressMode.mode_addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ChannelModes.AddressMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ChannelModes.AddressMode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChannelModes_AddressMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ChannelModes.AddressMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string mode_addresses = 1;
  for (int i = 0, n = this->mode_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode_addresses(i).data(), static_cast<int>(this->mode_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelModes.AddressMode.mode_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mode_addresses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ChannelModes.AddressMode)
}

::google::protobuf::uint8* ChannelModes_AddressMode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ChannelModes.AddressMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string mode_addresses = 1;
  for (int i = 0, n = this->mode_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode_addresses(i).data(), static_cast<int>(this->mode_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelModes.AddressMode.mode_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mode_addresses(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ChannelModes.AddressMode)
  return target;
}

size_t ChannelModes_AddressMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ChannelModes.AddressMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mode_addresses = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mode_addresses_size());
  for (int i = 0, n = this->mode_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mode_addresses(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelModes_AddressMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ChannelModes.AddressMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelModes_AddressMode* source =
      ::google::protobuf::DynamicCastToGenerated<ChannelModes_AddressMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ChannelModes.AddressMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ChannelModes.AddressMode)
    MergeFrom(*source);
  }
}

void ChannelModes_AddressMode::MergeFrom(const ChannelModes_AddressMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ChannelModes.AddressMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mode_addresses_.MergeFrom(from.mode_addresses_);
}

void ChannelModes_AddressMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ChannelModes.AddressMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelModes_AddressMode::CopyFrom(const ChannelModes_AddressMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ChannelModes.AddressMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelModes_AddressMode::IsInitialized() const {
  return true;
}

void ChannelModes_AddressMode::Swap(ChannelModes_AddressMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelModes_AddressMode::InternalSwap(ChannelModes_AddressMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mode_addresses_.InternalSwap(CastToBase(&other->mode_addresses_));
}

::google::protobuf::Metadata ChannelModes_AddressMode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

ChannelModes_ModesEntry_DoNotUse::ChannelModes_ModesEntry_DoNotUse() {}
ChannelModes_ModesEntry_DoNotUse::ChannelModes_ModesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ChannelModes_ModesEntry_DoNotUse::MergeFrom(const ChannelModes_ModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ChannelModes_ModesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[7];
}
void ChannelModes_ModesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelModes_ModesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ChannelModes_ModesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.ChannelModes.ModesEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

ChannelModes_ArgModesEntry_DoNotUse::ChannelModes_ArgModesEntry_DoNotUse() {}
ChannelModes_ArgModesEntry_DoNotUse::ChannelModes_ArgModesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ChannelModes_ArgModesEntry_DoNotUse::MergeFrom(const ChannelModes_ArgModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ChannelModes_ArgModesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[8];
}
void ChannelModes_ArgModesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelModes_ArgModesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ChannelModes_ArgModesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.ChannelModes.ArgModesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.ChannelModes.ArgModesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

ChannelModes_AddressModesEntry_DoNotUse::ChannelModes_AddressModesEntry_DoNotUse() {}
ChannelModes_AddressModesEntry_DoNotUse::ChannelModes_AddressModesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ChannelModes_AddressModesEntry_DoNotUse::MergeFrom(const ChannelModes_AddressModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ChannelModes_AddressModesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[9];
}
void ChannelModes_AddressModesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelModes_AddressModesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ChannelModes_AddressModesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.ChannelModes.AddressModesEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void ChannelModes::InitAsDefaultInstance() {
  ::api::_ChannelModes_default_instance_._instance.get_mutable()->kinds_ = const_cast< ::api::ModeKinds*>(
      ::api::ModeKinds::internal_default_instance());
}
class ChannelModes::HasBitSetters {
 public:
  static const ::api::ModeKinds& kinds(const ChannelModes* msg);
};

const ::api::ModeKinds&
ChannelModes::HasBitSetters::kinds(const ChannelModes* msg) {
  return *msg->kinds_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelModes::kModesFieldNumber;
const int ChannelModes::kArgModesFieldNumber;
const int ChannelModes::kAddressModesFieldNumber;
const int ChannelModes::kAddressesFieldNumber;
const int ChannelModes::kKindsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelModes::ChannelModes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ChannelModes)
}
ChannelModes::ChannelModes(const ChannelModes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modes_.MergeFrom(from.modes_);
  arg_modes_.MergeFrom(from.arg_modes_);
  address_modes_.MergeFrom(from.address_modes_);
  if (from.has_kinds()) {
    kinds_ = new ::api::ModeKinds(*from.kinds_);
  } else {
    kinds_ = nullptr;
  }
  addresses_ = from.addresses_;
  // @@protoc_insertion_point(copy_constructor:api.ChannelModes)
}

void ChannelModes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChannelModes_ultimateq_2eproto.base);
  ::memset(&kinds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addresses_) -
      reinterpret_cast<char*>(&kinds_)) + sizeof(addresses_));
}

ChannelModes::~ChannelModes() {
  // @@protoc_insertion_point(destructor:api.ChannelModes)
  SharedDtor();
}

void ChannelModes::SharedDtor() {
  if (this != internal_default_instance()) delete kinds_;
}

void ChannelModes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelModes& ChannelModes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChannelModes_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ChannelModes::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ChannelModes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modes_.Clear();
  arg_modes_.Clear();
  address_modes_.Clear();
  if (GetArenaNoVirtual() == nullptr && kinds_ != nullptr) {
    delete kinds_;
  }
  kinds_ = nullptr;
  addresses_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChannelModes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChannelModes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, bool> modes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::ChannelModes_ModesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->modes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // map<string, string> arg_modes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::ChannelModes_ArgModesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->arg_modes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // map<string, .api.ChannelModes.AddressMode> address_modes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::ChannelModes_AddressModesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->address_modes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int32 addresses = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_addresses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .api.ModeKinds kinds = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::ModeKinds::_InternalParse;
        object = msg->mutable_kinds();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelModes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ChannelModes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bool> modes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          ChannelModes_ModesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ChannelModes_ModesEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelModes.ModesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> arg_modes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          ChannelModes_ArgModesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ChannelModes_ArgModesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&arg_modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelModes.ArgModesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelModes.ArgModesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .api.ChannelModes.AddressMode> address_modes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ChannelModes_AddressModesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ChannelModes_AddressModesEntry_DoNotUse,
              ::std::string, ::api::ChannelModes_AddressMode,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode > > parser(&address_modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelModes.AddressModesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 addresses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addresses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.ModeKinds kinds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kinds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ChannelModes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ChannelModes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChannelModes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ChannelModes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> modes = 1;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.ModesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ChannelModes_ModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ChannelModes_ModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> arg_modes = 2;
  if (!this->arg_modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.ArgModesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.ArgModesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->arg_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->arg_modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->arg_modes().begin();
          it != this->arg_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ChannelModes_ArgModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(arg_modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ChannelModes_ArgModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->arg_modes().begin();
          it != this->arg_modes().end(); ++it) {
        entry.reset(arg_modes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .api.ChannelModes.AddressMode> address_modes = 3;
  if (!this->address_modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.AddressModesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->address_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->address_modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_iterator
          it = this->address_modes().begin();
          it != this->address_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ChannelModes_AddressModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(address_modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ChannelModes_AddressModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_iterator
          it = this->address_modes().begin();
          it != this->address_modes().end(); ++it) {
        entry.reset(address_modes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 addresses = 4;
  if (this->addresses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addresses(), output);
  }

  // .api.ModeKinds kinds = 5;
  if (this->has_kinds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::kinds(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ChannelModes)
}

::google::protobuf::uint8* ChannelModes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ChannelModes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> modes = 1;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.ModesEntry.key");
      }
    };

    if (false &&
        this->modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ChannelModes_ModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ChannelModes_ModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> arg_modes = 2;
  if (!this->arg_modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.ArgModesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.ArgModesEntry.value");
      }
    };

    if (false &&
        this->arg_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->arg_modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->arg_modes().begin();
          it != this->arg_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ChannelModes_ArgModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(arg_modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ChannelModes_ArgModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->arg_modes().begin();
          it != this->arg_modes().end(); ++it) {
        entry.reset(arg_modes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .api.ChannelModes.AddressMode> address_modes = 3;
  if (!this->address_modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ChannelModes.AddressModesEntry.key");
      }
    };

    if (false &&
        this->address_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->address_modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_iterator
          it = this->address_modes().begin();
          it != this->address_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ChannelModes_AddressModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(address_modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ChannelModes_AddressModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_iterator
          it = this->address_modes().begin();
          it != this->address_modes().end(); ++it) {
        entry.reset(address_modes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 addresses = 4;
  if (this->addresses() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addresses(), target);
  }

  // .api.ModeKinds kinds = 5;
  if (this->has_kinds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::kinds(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ChannelModes)
  return target;
}

size_t ChannelModes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ChannelModes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> modes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modes_size());
  {
    ::std::unique_ptr<ChannelModes_ModesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->modes().begin();
        it != this->modes().end(); ++it) {
      entry.reset(modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> arg_modes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arg_modes_size());
  {
    ::std::unique_ptr<ChannelModes_ArgModesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->arg_modes().begin();
        it != this->arg_modes().end(); ++it) {
      entry.reset(arg_modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .api.ChannelModes.AddressMode> address_modes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->address_modes_size());
  {
    ::std::unique_ptr<ChannelModes_AddressModesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::api::ChannelModes_AddressMode >::const_iterator
        it = this->address_modes().begin();
        it != this->address_modes().end(); ++it) {
      entry.reset(address_modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .api.ModeKinds kinds = 5;
  if (this->has_kinds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kinds_);
  }

  // int32 addresses = 4;
  if (this->addresses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addresses());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelModes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ChannelModes)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelModes* source =
      ::google::protobuf::DynamicCastToGenerated<ChannelModes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ChannelModes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ChannelModes)
    MergeFrom(*source);
  }
}

void ChannelModes::MergeFrom(const ChannelModes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ChannelModes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  arg_modes_.MergeFrom(from.arg_modes_);
  address_modes_.MergeFrom(from.address_modes_);
  if (from.has_kinds()) {
    mutable_kinds()->::api::ModeKinds::MergeFrom(from.kinds());
  }
  if (from.addresses() != 0) {
    set_addresses(from.addresses());
  }
}

void ChannelModes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ChannelModes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelModes::CopyFrom(const ChannelModes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ChannelModes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelModes::IsInitialized() const {
  return true;
}

void ChannelModes::Swap(ChannelModes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelModes::InternalSwap(ChannelModes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  modes_.Swap(&other->modes_);
  arg_modes_.Swap(&other->arg_modes_);
  address_modes_.Swap(&other->address_modes_);
  swap(kinds_, other->kinds_);
  swap(addresses_, other->addresses_);
}

::google::protobuf::Metadata ChannelModes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StateUser::InitAsDefaultInstance() {
}
class StateUser::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateUser::kHostFieldNumber;
const int StateUser::kRealnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateUser::StateUser()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.StateUser)
}
StateUser::StateUser(const StateUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.realname().size() > 0) {
    realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
  }
  // @@protoc_insertion_point(copy_constructor:api.StateUser)
}

void StateUser::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StateUser_ultimateq_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StateUser::~StateUser() {
  // @@protoc_insertion_point(destructor:api.StateUser)
  SharedDtor();
}

void StateUser::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StateUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateUser& StateUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StateUser_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void StateUser::Clear() {
// @@protoc_insertion_point(message_clear_start:api.StateUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateUser::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StateUser*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StateUser.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string realname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StateUser.realname");
        object = msg->mutable_realname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.StateUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StateUser.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string realname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->realname().data(), static_cast<int>(this->realname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StateUser.realname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.StateUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.StateUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.StateUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateUser.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string realname = 2;
  if (this->realname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->realname().data(), static_cast<int>(this->realname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateUser.realname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->realname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.StateUser)
}

::google::protobuf::uint8* StateUser::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.StateUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateUser.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string realname = 2;
  if (this->realname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->realname().data(), static_cast<int>(this->realname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateUser.realname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->realname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.StateUser)
  return target;
}

size_t StateUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.StateUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string realname = 2;
  if (this->realname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->realname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.StateUser)
  GOOGLE_DCHECK_NE(&from, this);
  const StateUser* source =
      ::google::protobuf::DynamicCastToGenerated<StateUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.StateUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.StateUser)
    MergeFrom(*source);
  }
}

void StateUser::MergeFrom(const StateUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.StateUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.realname().size() > 0) {

    realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
  }
}

void StateUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.StateUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateUser::CopyFrom(const StateUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.StateUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateUser::IsInitialized() const {
  return true;
}

void StateUser::Swap(StateUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateUser::InternalSwap(StateUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  realname_.Swap(&other->realname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StateUser::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StateChannel::InitAsDefaultInstance() {
  ::api::_StateChannel_default_instance_._instance.get_mutable()->modes_ = const_cast< ::api::ChannelModes*>(
      ::api::ChannelModes::internal_default_instance());
}
class StateChannel::HasBitSetters {
 public:
  static const ::api::ChannelModes& modes(const StateChannel* msg);
};

const ::api::ChannelModes&
StateChannel::HasBitSetters::modes(const StateChannel* msg) {
  return *msg->modes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateChannel::kNameFieldNumber;
const int StateChannel::kTopicFieldNumber;
const int StateChannel::kModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateChannel::StateChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.StateChannel)
}
StateChannel::StateChannel(const StateChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_modes()) {
    modes_ = new ::api::ChannelModes(*from.modes_);
  } else {
    modes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.StateChannel)
}

void StateChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StateChannel_ultimateq_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modes_ = nullptr;
}

StateChannel::~StateChannel() {
  // @@protoc_insertion_point(destructor:api.StateChannel)
  SharedDtor();
}

void StateChannel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete modes_;
}

void StateChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateChannel& StateChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StateChannel_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void StateChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:api.StateChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StateChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StateChannel.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string topic = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StateChannel.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.ChannelModes modes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::ChannelModes::_InternalParse;
        object = msg->mutable_modes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.StateChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StateChannel.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StateChannel.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.ChannelModes modes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.StateChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.StateChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.StateChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateChannel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateChannel.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // .api.ChannelModes modes = 3;
  if (this->has_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::modes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.StateChannel)
}

::google::protobuf::uint8* StateChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.StateChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateChannel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StateChannel.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // .api.ChannelModes modes = 3;
  if (this->has_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::modes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.StateChannel)
  return target;
}

size_t StateChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.StateChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .api.ChannelModes modes = 3;
  if (this->has_modes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.StateChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChannel* source =
      ::google::protobuf::DynamicCastToGenerated<StateChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.StateChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.StateChannel)
    MergeFrom(*source);
  }
}

void StateChannel::MergeFrom(const StateChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.StateChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_modes()) {
    mutable_modes()->::api::ChannelModes::MergeFrom(from.modes());
  }
}

void StateChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.StateChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChannel::CopyFrom(const StateChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.StateChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChannel::IsInitialized() const {
  return true;
}

void StateChannel::Swap(StateChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateChannel::InternalSwap(StateChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(modes_, other->modes_);
}

::google::protobuf::Metadata StateChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserModes::InitAsDefaultInstance() {
  ::api::_UserModes_default_instance_._instance.get_mutable()->kinds_ = const_cast< ::api::ModeKinds*>(
      ::api::ModeKinds::internal_default_instance());
}
class UserModes::HasBitSetters {
 public:
  static const ::api::ModeKinds& kinds(const UserModes* msg);
};

const ::api::ModeKinds&
UserModes::HasBitSetters::kinds(const UserModes* msg) {
  return *msg->kinds_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserModes::kKindsFieldNumber;
const int UserModes::kModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserModes::UserModes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.UserModes)
}
UserModes::UserModes(const UserModes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kinds()) {
    kinds_ = new ::api::ModeKinds(*from.kinds_);
  } else {
    kinds_ = nullptr;
  }
  modes_ = from.modes_;
  // @@protoc_insertion_point(copy_constructor:api.UserModes)
}

void UserModes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserModes_ultimateq_2eproto.base);
  ::memset(&kinds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modes_) -
      reinterpret_cast<char*>(&kinds_)) + sizeof(modes_));
}

UserModes::~UserModes() {
  // @@protoc_insertion_point(destructor:api.UserModes)
  SharedDtor();
}

void UserModes::SharedDtor() {
  if (this != internal_default_instance()) delete kinds_;
}

void UserModes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserModes& UserModes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserModes_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void UserModes::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UserModes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && kinds_ != nullptr) {
    delete kinds_;
  }
  kinds_ = nullptr;
  modes_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserModes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserModes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.ModeKinds kinds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::ModeKinds::_InternalParse;
        object = msg->mutable_kinds();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 modes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_modes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserModes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.UserModes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.ModeKinds kinds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kinds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.UserModes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.UserModes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserModes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.UserModes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.ModeKinds kinds = 1;
  if (this->has_kinds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::kinds(this), output);
  }

  // int32 modes = 2;
  if (this->modes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.UserModes)
}

::google::protobuf::uint8* UserModes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UserModes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.ModeKinds kinds = 1;
  if (this->has_kinds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::kinds(this), target);
  }

  // int32 modes = 2;
  if (this->modes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UserModes)
  return target;
}

size_t UserModes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UserModes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.ModeKinds kinds = 1;
  if (this->has_kinds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kinds_);
  }

  // int32 modes = 2;
  if (this->modes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserModes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UserModes)
  GOOGLE_DCHECK_NE(&from, this);
  const UserModes* source =
      ::google::protobuf::DynamicCastToGenerated<UserModes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UserModes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UserModes)
    MergeFrom(*source);
  }
}

void UserModes::MergeFrom(const UserModes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UserModes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kinds()) {
    mutable_kinds()->::api::ModeKinds::MergeFrom(from.kinds());
  }
  if (from.modes() != 0) {
    set_modes(from.modes());
  }
}

void UserModes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UserModes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserModes::CopyFrom(const UserModes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UserModes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserModes::IsInitialized() const {
  return true;
}

void UserModes::Swap(UserModes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserModes::InternalSwap(UserModes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kinds_, other->kinds_);
  swap(modes_, other->modes_);
}

::google::protobuf::Metadata UserModes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ModeKinds_UserPrefix::InitAsDefaultInstance() {
}
class ModeKinds_UserPrefix::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModeKinds_UserPrefix::kSymbolFieldNumber;
const int ModeKinds_UserPrefix::kCharFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModeKinds_UserPrefix::ModeKinds_UserPrefix()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ModeKinds.UserPrefix)
}
ModeKinds_UserPrefix::ModeKinds_UserPrefix(const ModeKinds_UserPrefix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  char__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.char_().size() > 0) {
    char__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.char__);
  }
  // @@protoc_insertion_point(copy_constructor:api.ModeKinds.UserPrefix)
}

void ModeKinds_UserPrefix::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ModeKinds_UserPrefix_ultimateq_2eproto.base);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  char__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModeKinds_UserPrefix::~ModeKinds_UserPrefix() {
  // @@protoc_insertion_point(destructor:api.ModeKinds.UserPrefix)
  SharedDtor();
}

void ModeKinds_UserPrefix::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  char__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModeKinds_UserPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModeKinds_UserPrefix& ModeKinds_UserPrefix::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModeKinds_UserPrefix_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ModeKinds_UserPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ModeKinds.UserPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  char__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModeKinds_UserPrefix::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModeKinds_UserPrefix*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ModeKinds.UserPrefix.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string char = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ModeKinds.UserPrefix.char");
        object = msg->mutable_char_();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModeKinds_UserPrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ModeKinds.UserPrefix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ModeKinds.UserPrefix.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string char = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_char_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->char_().data(), static_cast<int>(this->char_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ModeKinds.UserPrefix.char"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ModeKinds.UserPrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ModeKinds.UserPrefix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModeKinds_UserPrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ModeKinds.UserPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ModeKinds.UserPrefix.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string char = 2;
  if (this->char_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->char_().data(), static_cast<int>(this->char_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ModeKinds.UserPrefix.char");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->char_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ModeKinds.UserPrefix)
}

::google::protobuf::uint8* ModeKinds_UserPrefix::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ModeKinds.UserPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ModeKinds.UserPrefix.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string char = 2;
  if (this->char_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->char_().data(), static_cast<int>(this->char_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ModeKinds.UserPrefix.char");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->char_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ModeKinds.UserPrefix)
  return target;
}

size_t ModeKinds_UserPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ModeKinds.UserPrefix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string char = 2;
  if (this->char_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->char_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeKinds_UserPrefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ModeKinds.UserPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeKinds_UserPrefix* source =
      ::google::protobuf::DynamicCastToGenerated<ModeKinds_UserPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ModeKinds.UserPrefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ModeKinds.UserPrefix)
    MergeFrom(*source);
  }
}

void ModeKinds_UserPrefix::MergeFrom(const ModeKinds_UserPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ModeKinds.UserPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.char_().size() > 0) {

    char__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.char__);
  }
}

void ModeKinds_UserPrefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ModeKinds.UserPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeKinds_UserPrefix::CopyFrom(const ModeKinds_UserPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ModeKinds.UserPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeKinds_UserPrefix::IsInitialized() const {
  return true;
}

void ModeKinds_UserPrefix::Swap(ModeKinds_UserPrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModeKinds_UserPrefix::InternalSwap(ModeKinds_UserPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  char__.Swap(&other->char__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ModeKinds_UserPrefix::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

ModeKinds_ChannelModesEntry_DoNotUse::ModeKinds_ChannelModesEntry_DoNotUse() {}
ModeKinds_ChannelModesEntry_DoNotUse::ModeKinds_ChannelModesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ModeKinds_ChannelModesEntry_DoNotUse::MergeFrom(const ModeKinds_ChannelModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ModeKinds_ChannelModesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[15];
}
void ModeKinds_ChannelModesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModeKinds_ChannelModesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ModeKinds_ChannelModesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.ModeKinds.ChannelModesEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void ModeKinds::InitAsDefaultInstance() {
}
class ModeKinds::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModeKinds::kUserPrefixesFieldNumber;
const int ModeKinds::kChannelModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModeKinds::ModeKinds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ModeKinds)
}
ModeKinds::ModeKinds(const ModeKinds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      user_prefixes_(from.user_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_modes_.MergeFrom(from.channel_modes_);
  // @@protoc_insertion_point(copy_constructor:api.ModeKinds)
}

void ModeKinds::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ModeKinds_ultimateq_2eproto.base);
}

ModeKinds::~ModeKinds() {
  // @@protoc_insertion_point(destructor:api.ModeKinds)
  SharedDtor();
}

void ModeKinds::SharedDtor() {
}

void ModeKinds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModeKinds& ModeKinds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModeKinds_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ModeKinds::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ModeKinds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_prefixes_.Clear();
  channel_modes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModeKinds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModeKinds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::api::ModeKinds_UserPrefix::_InternalParse;
          object = msg->add_user_prefixes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // map<string, int32> channel_modes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::ModeKinds_ChannelModesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->channel_modes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModeKinds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ModeKinds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_prefixes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> channel_modes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          ModeKinds_ChannelModesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ModeKinds_ChannelModesEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&channel_modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ModeKinds.ChannelModesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ModeKinds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ModeKinds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModeKinds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ModeKinds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_prefixes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->user_prefixes(static_cast<int>(i)),
      output);
  }

  // map<string, int32> channel_modes = 2;
  if (!this->channel_modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ModeKinds.ChannelModesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->channel_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->channel_modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->channel_modes().begin();
          it != this->channel_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ModeKinds_ChannelModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(channel_modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ModeKinds_ChannelModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->channel_modes().begin();
          it != this->channel_modes().end(); ++it) {
        entry.reset(channel_modes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ModeKinds)
}

::google::protobuf::uint8* ModeKinds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ModeKinds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_prefixes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->user_prefixes(static_cast<int>(i)), target);
  }

  // map<string, int32> channel_modes = 2;
  if (!this->channel_modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.ModeKinds.ChannelModesEntry.key");
      }
    };

    if (false &&
        this->channel_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->channel_modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->channel_modes().begin();
          it != this->channel_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ModeKinds_ChannelModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(channel_modes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ModeKinds_ChannelModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->channel_modes().begin();
          it != this->channel_modes().end(); ++it) {
        entry.reset(channel_modes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ModeKinds)
  return target;
}

size_t ModeKinds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ModeKinds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.ModeKinds.UserPrefix user_prefixes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_prefixes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_prefixes(static_cast<int>(i)));
    }
  }

  // map<string, int32> channel_modes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->channel_modes_size());
  {
    ::std::unique_ptr<ModeKinds_ChannelModesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->channel_modes().begin();
        it != this->channel_modes().end(); ++it) {
      entry.reset(channel_modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeKinds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ModeKinds)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeKinds* source =
      ::google::protobuf::DynamicCastToGenerated<ModeKinds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ModeKinds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ModeKinds)
    MergeFrom(*source);
  }
}

void ModeKinds::MergeFrom(const ModeKinds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ModeKinds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_prefixes_.MergeFrom(from.user_prefixes_);
  channel_modes_.MergeFrom(from.channel_modes_);
}

void ModeKinds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ModeKinds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeKinds::CopyFrom(const ModeKinds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ModeKinds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeKinds::IsInitialized() const {
  return true;
}

void ModeKinds::Swap(ModeKinds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModeKinds::InternalSwap(ModeKinds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&user_prefixes_)->InternalSwap(CastToBase(&other->user_prefixes_));
  channel_modes_.Swap(&other->channel_modes_);
}

::google::protobuf::Metadata ModeKinds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

NetworkInfo_ExtrasEntry_DoNotUse::NetworkInfo_ExtrasEntry_DoNotUse() {}
NetworkInfo_ExtrasEntry_DoNotUse::NetworkInfo_ExtrasEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void NetworkInfo_ExtrasEntry_DoNotUse::MergeFrom(const NetworkInfo_ExtrasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NetworkInfo_ExtrasEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[17];
}
void NetworkInfo_ExtrasEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkInfo_ExtrasEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      NetworkInfo_ExtrasEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.NetworkInfo.ExtrasEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.NetworkInfo.ExtrasEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void NetworkInfo::InitAsDefaultInstance() {
}
class NetworkInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInfo::kServerNameFieldNumber;
const int NetworkInfo::kIrcdVersionFieldNumber;
const int NetworkInfo::kUsermodesFieldNumber;
const int NetworkInfo::kLchanmodesFieldNumber;
const int NetworkInfo::kRfcFieldNumber;
const int NetworkInfo::kIrcdFieldNumber;
const int NetworkInfo::kCasemappingFieldNumber;
const int NetworkInfo::kPrefixFieldNumber;
const int NetworkInfo::kChantypesFieldNumber;
const int NetworkInfo::kChanmodesFieldNumber;
const int NetworkInfo::kChanlimitFieldNumber;
const int NetworkInfo::kChannellenFieldNumber;
const int NetworkInfo::kNicklenFieldNumber;
const int NetworkInfo::kTopiclenFieldNumber;
const int NetworkInfo::kAwaylenFieldNumber;
const int NetworkInfo::kKicklenFieldNumber;
const int NetworkInfo::kModesFieldNumber;
const int NetworkInfo::kExtrasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInfo::NetworkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extras_.MergeFrom(from.extras_);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  ircd_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ircd_version().size() > 0) {
    ircd_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ircd_version_);
  }
  usermodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usermodes().size() > 0) {
    usermodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermodes_);
  }
  lchanmodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lchanmodes().size() > 0) {
    lchanmodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lchanmodes_);
  }
  rfc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rfc().size() > 0) {
    rfc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rfc_);
  }
  ircd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ircd().size() > 0) {
    ircd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ircd_);
  }
  casemapping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.casemapping().size() > 0) {
    casemapping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.casemapping_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  chantypes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chantypes().size() > 0) {
    chantypes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chantypes_);
  }
  chanmodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chanmodes().size() > 0) {
    chanmodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chanmodes_);
  }
  ::memcpy(&chanlimit_, &from.chanlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&modes_) -
    reinterpret_cast<char*>(&chanlimit_)) + sizeof(modes_));
  // @@protoc_insertion_point(copy_constructor:api.NetworkInfo)
}

void NetworkInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NetworkInfo_ultimateq_2eproto.base);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ircd_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usermodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lchanmodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rfc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ircd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  casemapping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chantypes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chanmodes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chanlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modes_) -
      reinterpret_cast<char*>(&chanlimit_)) + sizeof(modes_));
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:api.NetworkInfo)
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ircd_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usermodes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lchanmodes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rfc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ircd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  casemapping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chantypes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chanmodes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInfo& NetworkInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetworkInfo_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extras_.Clear();
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ircd_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usermodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lchanmodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rfc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ircd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  casemapping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chantypes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chanmodes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chanlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modes_) -
      reinterpret_cast<char*>(&chanlimit_)) + sizeof(modes_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetworkInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string server_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.server_name");
        object = msg->mutable_server_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ircd_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.ircd_version");
        object = msg->mutable_ircd_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string usermodes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.usermodes");
        object = msg->mutable_usermodes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string lchanmodes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.lchanmodes");
        object = msg->mutable_lchanmodes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string rfc = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.rfc");
        object = msg->mutable_rfc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ircd = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.ircd");
        object = msg->mutable_ircd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string casemapping = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.casemapping");
        object = msg->mutable_casemapping();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string prefix = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.prefix");
        object = msg->mutable_prefix();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string chantypes = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.chantypes");
        object = msg->mutable_chantypes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string chanmodes = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfo.chanmodes");
        object = msg->mutable_chanmodes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 chanlimit = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_chanlimit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 channellen = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_channellen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 nicklen = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_nicklen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 topiclen = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_topiclen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 awaylen = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_awaylen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 kicklen = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_kicklen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 modes = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_modes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> extras = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::NetworkInfo_ExtrasEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->extras_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 402 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.NetworkInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ircd_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ircd_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ircd_version().data(), static_cast<int>(this->ircd_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.ircd_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usermodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermodes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usermodes().data(), static_cast<int>(this->usermodes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.usermodes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lchanmodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lchanmodes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lchanmodes().data(), static_cast<int>(this->lchanmodes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.lchanmodes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rfc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rfc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rfc().data(), static_cast<int>(this->rfc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.rfc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ircd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ircd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ircd().data(), static_cast<int>(this->ircd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.ircd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string casemapping = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_casemapping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->casemapping().data(), static_cast<int>(this->casemapping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.casemapping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chantypes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chantypes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chantypes().data(), static_cast<int>(this->chantypes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.chantypes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chanmodes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chanmodes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chanmodes().data(), static_cast<int>(this->chanmodes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.chanmodes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chanlimit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chanlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channellen = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channellen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nicklen = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nicklen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topiclen = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topiclen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 awaylen = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awaylen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kicklen = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kicklen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> extras = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          NetworkInfo_ExtrasEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NetworkInfo_ExtrasEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&extras_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.ExtrasEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfo.ExtrasEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.NetworkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.NetworkInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_name(), output);
  }

  // string ircd_version = 2;
  if (this->ircd_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ircd_version().data(), static_cast<int>(this->ircd_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.ircd_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ircd_version(), output);
  }

  // string usermodes = 3;
  if (this->usermodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usermodes().data(), static_cast<int>(this->usermodes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.usermodes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->usermodes(), output);
  }

  // string lchanmodes = 4;
  if (this->lchanmodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lchanmodes().data(), static_cast<int>(this->lchanmodes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.lchanmodes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lchanmodes(), output);
  }

  // string rfc = 5;
  if (this->rfc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rfc().data(), static_cast<int>(this->rfc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.rfc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rfc(), output);
  }

  // string ircd = 6;
  if (this->ircd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ircd().data(), static_cast<int>(this->ircd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.ircd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ircd(), output);
  }

  // string casemapping = 7;
  if (this->casemapping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->casemapping().data(), static_cast<int>(this->casemapping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.casemapping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->casemapping(), output);
  }

  // string prefix = 8;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->prefix(), output);
  }

  // string chantypes = 9;
  if (this->chantypes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chantypes().data(), static_cast<int>(this->chantypes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.chantypes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->chantypes(), output);
  }

  // string chanmodes = 10;
  if (this->chanmodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chanmodes().data(), static_cast<int>(this->chanmodes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.chanmodes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->chanmodes(), output);
  }

  // int32 chanlimit = 11;
  if (this->chanlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->chanlimit(), output);
  }

  // int32 channellen = 12;
  if (this->channellen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->channellen(), output);
  }

  // int32 nicklen = 13;
  if (this->nicklen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->nicklen(), output);
  }

  // int32 topiclen = 14;
  if (this->topiclen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->topiclen(), output);
  }

  // int32 awaylen = 15;
  if (this->awaylen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->awaylen(), output);
  }

  // int32 kicklen = 16;
  if (this->kicklen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->kicklen(), output);
  }

  // int32 modes = 17;
  if (this->modes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->modes(), output);
  }

  // map<string, string> extras = 18;
  if (!this->extras().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.NetworkInfo.ExtrasEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.NetworkInfo.ExtrasEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->extras().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extras().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkInfo_ExtrasEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extras_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(18, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<NetworkInfo_ExtrasEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it) {
        entry.reset(extras_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(18, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.NetworkInfo)
}

::google::protobuf::uint8* NetworkInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // string ircd_version = 2;
  if (this->ircd_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ircd_version().data(), static_cast<int>(this->ircd_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.ircd_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ircd_version(), target);
  }

  // string usermodes = 3;
  if (this->usermodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usermodes().data(), static_cast<int>(this->usermodes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.usermodes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->usermodes(), target);
  }

  // string lchanmodes = 4;
  if (this->lchanmodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lchanmodes().data(), static_cast<int>(this->lchanmodes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.lchanmodes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lchanmodes(), target);
  }

  // string rfc = 5;
  if (this->rfc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rfc().data(), static_cast<int>(this->rfc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.rfc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rfc(), target);
  }

  // string ircd = 6;
  if (this->ircd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ircd().data(), static_cast<int>(this->ircd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.ircd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ircd(), target);
  }

  // string casemapping = 7;
  if (this->casemapping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->casemapping().data(), static_cast<int>(this->casemapping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.casemapping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->casemapping(), target);
  }

  // string prefix = 8;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->prefix(), target);
  }

  // string chantypes = 9;
  if (this->chantypes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chantypes().data(), static_cast<int>(this->chantypes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.chantypes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->chantypes(), target);
  }

  // string chanmodes = 10;
  if (this->chanmodes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chanmodes().data(), static_cast<int>(this->chanmodes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfo.chanmodes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->chanmodes(), target);
  }

  // int32 chanlimit = 11;
  if (this->chanlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->chanlimit(), target);
  }

  // int32 channellen = 12;
  if (this->channellen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->channellen(), target);
  }

  // int32 nicklen = 13;
  if (this->nicklen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->nicklen(), target);
  }

  // int32 topiclen = 14;
  if (this->topiclen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->topiclen(), target);
  }

  // int32 awaylen = 15;
  if (this->awaylen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->awaylen(), target);
  }

  // int32 kicklen = 16;
  if (this->kicklen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->kicklen(), target);
  }

  // int32 modes = 17;
  if (this->modes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->modes(), target);
  }

  // map<string, string> extras = 18;
  if (!this->extras().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.NetworkInfo.ExtrasEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.NetworkInfo.ExtrasEntry.value");
      }
    };

    if (false &&
        this->extras().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extras().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkInfo_ExtrasEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extras_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(18, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<NetworkInfo_ExtrasEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it) {
        entry.reset(extras_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(18, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NetworkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> extras = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->extras_size());
  {
    ::std::unique_ptr<NetworkInfo_ExtrasEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->extras().begin();
        it != this->extras().end(); ++it) {
      entry.reset(extras_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string ircd_version = 2;
  if (this->ircd_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ircd_version());
  }

  // string usermodes = 3;
  if (this->usermodes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usermodes());
  }

  // string lchanmodes = 4;
  if (this->lchanmodes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lchanmodes());
  }

  // string rfc = 5;
  if (this->rfc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rfc());
  }

  // string ircd = 6;
  if (this->ircd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ircd());
  }

  // string casemapping = 7;
  if (this->casemapping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->casemapping());
  }

  // string prefix = 8;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string chantypes = 9;
  if (this->chantypes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chantypes());
  }

  // string chanmodes = 10;
  if (this->chanmodes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chanmodes());
  }

  // int32 chanlimit = 11;
  if (this->chanlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chanlimit());
  }

  // int32 channellen = 12;
  if (this->channellen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channellen());
  }

  // int32 nicklen = 13;
  if (this->nicklen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nicklen());
  }

  // int32 topiclen = 14;
  if (this->topiclen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->topiclen());
  }

  // int32 awaylen = 15;
  if (this->awaylen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->awaylen());
  }

  // int32 kicklen = 16;
  if (this->kicklen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kicklen());
  }

  // int32 modes = 17;
  if (this->modes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfo* source =
      ::google::protobuf::DynamicCastToGenerated<NetworkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NetworkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NetworkInfo)
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extras_.MergeFrom(from.extras_);
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.ircd_version().size() > 0) {

    ircd_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ircd_version_);
  }
  if (from.usermodes().size() > 0) {

    usermodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermodes_);
  }
  if (from.lchanmodes().size() > 0) {

    lchanmodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lchanmodes_);
  }
  if (from.rfc().size() > 0) {

    rfc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rfc_);
  }
  if (from.ircd().size() > 0) {

    ircd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ircd_);
  }
  if (from.casemapping().size() > 0) {

    casemapping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.casemapping_);
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.chantypes().size() > 0) {

    chantypes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chantypes_);
  }
  if (from.chanmodes().size() > 0) {

    chanmodes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chanmodes_);
  }
  if (from.chanlimit() != 0) {
    set_chanlimit(from.chanlimit());
  }
  if (from.channellen() != 0) {
    set_channellen(from.channellen());
  }
  if (from.nicklen() != 0) {
    set_nicklen(from.nicklen());
  }
  if (from.topiclen() != 0) {
    set_topiclen(from.topiclen());
  }
  if (from.awaylen() != 0) {
    set_awaylen(from.awaylen());
  }
  if (from.kicklen() != 0) {
    set_kicklen(from.kicklen());
  }
  if (from.modes() != 0) {
    set_modes(from.modes());
  }
}

void NetworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::Swap(NetworkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInfo::InternalSwap(NetworkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extras_.Swap(&other->extras_);
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ircd_version_.Swap(&other->ircd_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usermodes_.Swap(&other->usermodes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lchanmodes_.Swap(&other->lchanmodes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rfc_.Swap(&other->rfc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ircd_.Swap(&other->ircd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  casemapping_.Swap(&other->casemapping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_.Swap(&other->prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chantypes_.Swap(&other->chantypes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chanmodes_.Swap(&other->chanmodes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chanlimit_, other->chanlimit_);
  swap(channellen_, other->channellen_);
  swap(nicklen_, other->nicklen_);
  swap(topiclen_, other->topiclen_);
  swap(awaylen_, other->awaylen_);
  swap(kicklen_, other->kicklen_);
  swap(modes_, other->modes_);
}

::google::protobuf::Metadata NetworkInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

StoredUser_AccessEntry_DoNotUse::StoredUser_AccessEntry_DoNotUse() {}
StoredUser_AccessEntry_DoNotUse::StoredUser_AccessEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void StoredUser_AccessEntry_DoNotUse::MergeFrom(const StoredUser_AccessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StoredUser_AccessEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[19];
}
void StoredUser_AccessEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredUser_AccessEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      StoredUser_AccessEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.StoredUser.AccessEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

StoredUser_DataEntry_DoNotUse::StoredUser_DataEntry_DoNotUse() {}
StoredUser_DataEntry_DoNotUse::StoredUser_DataEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void StoredUser_DataEntry_DoNotUse::MergeFrom(const StoredUser_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StoredUser_DataEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[20];
}
void StoredUser_DataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredUser_DataEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      StoredUser_DataEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.StoredUser.DataEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.StoredUser.DataEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void StoredUser::InitAsDefaultInstance() {
}
class StoredUser::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredUser::kUsernameFieldNumber;
const int StoredUser::kPasswordFieldNumber;
const int StoredUser::kMasksFieldNumber;
const int StoredUser::kAccessFieldNumber;
const int StoredUser::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredUser::StoredUser()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.StoredUser)
}
StoredUser::StoredUser(const StoredUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      masks_(from.masks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_.MergeFrom(from.access_);
  data_.MergeFrom(from.data_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:api.StoredUser)
}

void StoredUser::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredUser_ultimateq_2eproto.base);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StoredUser::~StoredUser() {
  // @@protoc_insertion_point(destructor:api.StoredUser)
  SharedDtor();
}

void StoredUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoredUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredUser& StoredUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredUser_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void StoredUser::Clear() {
// @@protoc_insertion_point(message_clear_start:api.StoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  masks_.Clear();
  access_.Clear();
  data_.Clear();
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredUser::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredUser*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StoredUser.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string masks = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("api.StoredUser.masks");
          object = msg->add_masks();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // map<string, .api.Access> access = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::StoredUser_AccessEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->access_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // map<string, string> data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::StoredUser_DataEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->data_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.StoredUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string masks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_masks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->masks(this->masks_size() - 1).data(),
            static_cast<int>(this->masks(this->masks_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredUser.masks"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .api.Access> access = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          StoredUser_AccessEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StoredUser_AccessEntry_DoNotUse,
              ::std::string, ::api::Access,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::api::Access > > parser(&access_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredUser.AccessEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          StoredUser_DataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StoredUser_DataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredUser.DataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredUser.DataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.StoredUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.StoredUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.StoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // repeated string masks = 3;
  for (int i = 0, n = this->masks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masks(i).data(), static_cast<int>(this->masks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredUser.masks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->masks(i), output);
  }

  // map<string, .api.Access> access = 4;
  if (!this->access().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::Access >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredUser.AccessEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->access().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->access().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::Access >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::Access >::const_iterator
          it = this->access().begin();
          it != this->access().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StoredUser_AccessEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(access_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StoredUser_AccessEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::Access >::const_iterator
          it = this->access().begin();
          it != this->access().end(); ++it) {
        entry.reset(access_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> data = 5;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredUser.DataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredUser.DataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StoredUser_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StoredUser_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.StoredUser)
}

::google::protobuf::uint8* StoredUser::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.StoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredUser.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // repeated string masks = 3;
  for (int i = 0, n = this->masks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masks(i).data(), static_cast<int>(this->masks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredUser.masks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->masks(i), target);
  }

  // map<string, .api.Access> access = 4;
  if (!this->access().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::Access >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredUser.AccessEntry.key");
      }
    };

    if (false &&
        this->access().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->access().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::Access >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::Access >::const_iterator
          it = this->access().begin();
          it != this->access().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StoredUser_AccessEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(access_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StoredUser_AccessEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::Access >::const_iterator
          it = this->access().begin();
          it != this->access().end(); ++it) {
        entry.reset(access_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> data = 5;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredUser.DataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredUser.DataEntry.value");
      }
    };

    if (false &&
        this->data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StoredUser_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StoredUser_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.StoredUser)
  return target;
}

size_t StoredUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.StoredUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string masks = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->masks_size());
  for (int i = 0, n = this->masks_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->masks(i));
  }

  // map<string, .api.Access> access = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->access_size());
  {
    ::std::unique_ptr<StoredUser_AccessEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::api::Access >::const_iterator
        it = this->access().begin();
        it != this->access().end(); ++it) {
      entry.reset(access_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> data = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  {
    ::std::unique_ptr<StoredUser_DataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->data().begin();
        it != this->data().end(); ++it) {
      entry.reset(data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.StoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredUser* source =
      ::google::protobuf::DynamicCastToGenerated<StoredUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.StoredUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.StoredUser)
    MergeFrom(*source);
  }
}

void StoredUser::MergeFrom(const StoredUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.StoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  masks_.MergeFrom(from.masks_);
  access_.MergeFrom(from.access_);
  data_.MergeFrom(from.data_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void StoredUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.StoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredUser::CopyFrom(const StoredUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.StoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredUser::IsInitialized() const {
  return true;
}

void StoredUser::Swap(StoredUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredUser::InternalSwap(StoredUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  masks_.InternalSwap(CastToBase(&other->masks_));
  access_.Swap(&other->access_);
  data_.Swap(&other->data_);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StoredUser::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

StoredChannel_DataEntry_DoNotUse::StoredChannel_DataEntry_DoNotUse() {}
StoredChannel_DataEntry_DoNotUse::StoredChannel_DataEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void StoredChannel_DataEntry_DoNotUse::MergeFrom(const StoredChannel_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StoredChannel_DataEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[22];
}
void StoredChannel_DataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredChannel_DataEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      StoredChannel_DataEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.StoredChannel.DataEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.StoredChannel.DataEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void StoredChannel::InitAsDefaultInstance() {
}
class StoredChannel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredChannel::kNetFieldNumber;
const int StoredChannel::kNameFieldNumber;
const int StoredChannel::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredChannel::StoredChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.StoredChannel)
}
StoredChannel::StoredChannel(const StoredChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:api.StoredChannel)
}

void StoredChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredChannel_ultimateq_2eproto.base);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StoredChannel::~StoredChannel() {
  // @@protoc_insertion_point(destructor:api.StoredChannel)
  SharedDtor();
}

void StoredChannel::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoredChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredChannel& StoredChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredChannel_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void StoredChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:api.StoredChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string net = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StoredChannel.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.StoredChannel.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::StoredChannel_DataEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->data_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.StoredChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredChannel.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredChannel.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          StoredChannel_DataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StoredChannel_DataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredChannel.DataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.StoredChannel.DataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.StoredChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.StoredChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.StoredChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredChannel.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredChannel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // map<string, string> data = 3;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredChannel.DataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredChannel.DataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StoredChannel_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StoredChannel_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.StoredChannel)
}

::google::protobuf::uint8* StoredChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.StoredChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredChannel.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.StoredChannel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // map<string, string> data = 3;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredChannel.DataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.StoredChannel.DataEntry.value");
      }
    };

    if (false &&
        this->data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StoredChannel_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StoredChannel_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.StoredChannel)
  return target;
}

size_t StoredChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.StoredChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  {
    ::std::unique_ptr<StoredChannel_DataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->data().begin();
        it != this->data().end(); ++it) {
      entry.reset(data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string net = 1;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.StoredChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredChannel* source =
      ::google::protobuf::DynamicCastToGenerated<StoredChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.StoredChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.StoredChannel)
    MergeFrom(*source);
  }
}

void StoredChannel::MergeFrom(const StoredChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.StoredChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void StoredChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.StoredChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredChannel::CopyFrom(const StoredChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.StoredChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredChannel::IsInitialized() const {
  return true;
}

void StoredChannel::Swap(StoredChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredChannel::InternalSwap(StoredChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_);
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StoredChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SelfResponse::InitAsDefaultInstance() {
  ::api::_SelfResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::api::StateUser*>(
      ::api::StateUser::internal_default_instance());
  ::api::_SelfResponse_default_instance_._instance.get_mutable()->modes_ = const_cast< ::api::ChannelModes*>(
      ::api::ChannelModes::internal_default_instance());
}
class SelfResponse::HasBitSetters {
 public:
  static const ::api::StateUser& user(const SelfResponse* msg);
  static const ::api::ChannelModes& modes(const SelfResponse* msg);
};

const ::api::StateUser&
SelfResponse::HasBitSetters::user(const SelfResponse* msg) {
  return *msg->user_;
}
const ::api::ChannelModes&
SelfResponse::HasBitSetters::modes(const SelfResponse* msg) {
  return *msg->modes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfResponse::kUserFieldNumber;
const int SelfResponse::kModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfResponse::SelfResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.SelfResponse)
}
SelfResponse::SelfResponse(const SelfResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::api::StateUser(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from.has_modes()) {
    modes_ = new ::api::ChannelModes(*from.modes_);
  } else {
    modes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.SelfResponse)
}

void SelfResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SelfResponse_ultimateq_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modes_) -
      reinterpret_cast<char*>(&user_)) + sizeof(modes_));
}

SelfResponse::~SelfResponse() {
  // @@protoc_insertion_point(destructor:api.SelfResponse)
  SharedDtor();
}

void SelfResponse::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete modes_;
}

void SelfResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelfResponse& SelfResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SelfResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void SelfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SelfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SelfResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SelfResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.StateUser user = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::StateUser::_InternalParse;
        object = msg->mutable_user();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .api.ChannelModes modes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::ChannelModes::_InternalParse;
        object = msg->mutable_modes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SelfResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.SelfResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.StateUser user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.ChannelModes modes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.SelfResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.SelfResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SelfResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.SelfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.StateUser user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::user(this), output);
  }

  // .api.ChannelModes modes = 2;
  if (this->has_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::modes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.SelfResponse)
}

::google::protobuf::uint8* SelfResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SelfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.StateUser user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::user(this), target);
  }

  // .api.ChannelModes modes = 2;
  if (this->has_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::modes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SelfResponse)
  return target;
}

size_t SelfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SelfResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.StateUser user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .api.ChannelModes modes = 2;
  if (this->has_modes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SelfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelfResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SelfResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SelfResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SelfResponse)
    MergeFrom(*source);
  }
}

void SelfResponse::MergeFrom(const SelfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SelfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::api::StateUser::MergeFrom(from.user());
  }
  if (from.has_modes()) {
    mutable_modes()->::api::ChannelModes::MergeFrom(from.modes());
  }
}

void SelfResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SelfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfResponse::CopyFrom(const SelfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SelfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfResponse::IsInitialized() const {
  return true;
}

void SelfResponse::Swap(SelfResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfResponse::InternalSwap(SelfResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
  swap(modes_, other->modes_);
}

::google::protobuf::Metadata SelfResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NetworkQuery::InitAsDefaultInstance() {
}
class NetworkQuery::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkQuery::kNetFieldNumber;
const int NetworkQuery::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkQuery::NetworkQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.NetworkQuery)
}
NetworkQuery::NetworkQuery(const NetworkQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:api.NetworkQuery)
}

void NetworkQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NetworkQuery_ultimateq_2eproto.base);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NetworkQuery::~NetworkQuery() {
  // @@protoc_insertion_point(destructor:api.NetworkQuery)
  SharedDtor();
}

void NetworkQuery::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkQuery& NetworkQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetworkQuery_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void NetworkQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NetworkQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetworkQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string net = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkQuery.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkQuery.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.NetworkQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkQuery.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkQuery.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.NetworkQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.NetworkQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.NetworkQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkQuery.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.NetworkQuery)
}

::google::protobuf::uint8* NetworkQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NetworkQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkQuery.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NetworkQuery)
  return target;
}

size_t NetworkQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NetworkQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // string query = 2;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NetworkQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkQuery* source =
      ::google::protobuf::DynamicCastToGenerated<NetworkQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NetworkQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NetworkQuery)
    MergeFrom(*source);
  }
}

void NetworkQuery::MergeFrom(const NetworkQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NetworkQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void NetworkQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NetworkQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkQuery::CopyFrom(const NetworkQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NetworkQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkQuery::IsInitialized() const {
  return true;
}

void NetworkQuery::Swap(NetworkQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkQuery::InternalSwap(NetworkQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NetworkQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChannelQuery::InitAsDefaultInstance() {
}
class ChannelQuery::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelQuery::kNetFieldNumber;
const int ChannelQuery::kChannelFieldNumber;
const int ChannelQuery::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelQuery::ChannelQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ChannelQuery)
}
ChannelQuery::ChannelQuery(const ChannelQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:api.ChannelQuery)
}

void ChannelQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChannelQuery_ultimateq_2eproto.base);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChannelQuery::~ChannelQuery() {
  // @@protoc_insertion_point(destructor:api.ChannelQuery)
  SharedDtor();
}

void ChannelQuery::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelQuery& ChannelQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChannelQuery_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ChannelQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ChannelQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChannelQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChannelQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string net = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ChannelQuery.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string channel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ChannelQuery.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string query = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ChannelQuery.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ChannelQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelQuery.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelQuery.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelQuery.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ChannelQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ChannelQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChannelQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ChannelQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelQuery.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelQuery.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // string query = 3;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ChannelQuery)
}

::google::protobuf::uint8* ChannelQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ChannelQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelQuery.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelQuery.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // string query = 3;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ChannelQuery)
  return target;
}

size_t ChannelQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ChannelQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string query = 3;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ChannelQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelQuery* source =
      ::google::protobuf::DynamicCastToGenerated<ChannelQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ChannelQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ChannelQuery)
    MergeFrom(*source);
  }
}

void ChannelQuery::MergeFrom(const ChannelQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ChannelQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ChannelQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ChannelQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelQuery::CopyFrom(const ChannelQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ChannelQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelQuery::IsInitialized() const {
  return true;
}

void ChannelQuery::Swap(ChannelQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelQuery::InternalSwap(ChannelQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ChannelQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuthUserRequest::InitAsDefaultInstance() {
}
class AuthUserRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthUserRequest::kNetFieldNumber;
const int AuthUserRequest::kHostFieldNumber;
const int AuthUserRequest::kUsernameFieldNumber;
const int AuthUserRequest::kPasswordFieldNumber;
const int AuthUserRequest::kPermanentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthUserRequest::AuthUserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AuthUserRequest)
}
AuthUserRequest::AuthUserRequest(const AuthUserRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  permanent_ = from.permanent_;
  // @@protoc_insertion_point(copy_constructor:api.AuthUserRequest)
}

void AuthUserRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthUserRequest_ultimateq_2eproto.base);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permanent_ = false;
}

AuthUserRequest::~AuthUserRequest() {
  // @@protoc_insertion_point(destructor:api.AuthUserRequest)
  SharedDtor();
}

void AuthUserRequest::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserRequest& AuthUserRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthUserRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void AuthUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AuthUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permanent_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthUserRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthUserRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string net = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AuthUserRequest.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string host = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AuthUserRequest.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string username = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AuthUserRequest.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AuthUserRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool permanent = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_permanent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AuthUserRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AuthUserRequest.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AuthUserRequest.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AuthUserRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AuthUserRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool permanent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permanent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.AuthUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AuthUserRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AuthUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // bool permanent = 5;
  if (this->permanent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->permanent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AuthUserRequest)
}

::google::protobuf::uint8* AuthUserRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AuthUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AuthUserRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // bool permanent = 5;
  if (this->permanent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->permanent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AuthUserRequest)
  return target;
}

size_t AuthUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AuthUserRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // bool permanent = 5;
  if (this->permanent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AuthUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AuthUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AuthUserRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AuthUserRequest)
    MergeFrom(*source);
  }
}

void AuthUserRequest::MergeFrom(const AuthUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AuthUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.permanent() != 0) {
    set_permanent(from.permanent());
  }
}

void AuthUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AuthUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserRequest::CopyFrom(const AuthUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AuthUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRequest::IsInitialized() const {
  return true;
}

void AuthUserRequest::Swap(AuthUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthUserRequest::InternalSwap(AuthUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(permanent_, other->permanent_);
}

::google::protobuf::Metadata AuthUserRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserResponse::InitAsDefaultInstance() {
  ::api::_UserResponse_default_instance_._instance.get_mutable()->self_ = const_cast< ::api::StateUser*>(
      ::api::StateUser::internal_default_instance());
}
class UserResponse::HasBitSetters {
 public:
  static const ::api::StateUser& self(const UserResponse* msg);
};

const ::api::StateUser&
UserResponse::HasBitSetters::self(const UserResponse* msg) {
  return *msg->self_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserResponse::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserResponse::UserResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.UserResponse)
}
UserResponse::UserResponse(const UserResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self()) {
    self_ = new ::api::StateUser(*from.self_);
  } else {
    self_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.UserResponse)
}

void UserResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserResponse_ultimateq_2eproto.base);
  self_ = nullptr;
}

UserResponse::~UserResponse() {
  // @@protoc_insertion_point(destructor:api.UserResponse)
  SharedDtor();
}

void UserResponse::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
}

void UserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserResponse& UserResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void UserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.StateUser self = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::StateUser::_InternalParse;
        object = msg->mutable_self();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.UserResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.StateUser self = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.UserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.UserResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.UserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.StateUser self = 1;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::self(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.UserResponse)
}

::google::protobuf::uint8* UserResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.StateUser self = 1;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::self(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UserResponse)
  return target;
}

size_t UserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UserResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.StateUser self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UserResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UserResponse)
    MergeFrom(*source);
  }
}

void UserResponse::MergeFrom(const UserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self()) {
    mutable_self()->::api::StateUser::MergeFrom(from.self());
  }
}

void UserResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResponse::CopyFrom(const UserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResponse::IsInitialized() const {
  return true;
}

void UserResponse::Swap(UserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserResponse::InternalSwap(UserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(self_, other->self_);
}

::google::protobuf::Metadata UserResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserModesResponse::InitAsDefaultInstance() {
  ::api::_UserModesResponse_default_instance_._instance.get_mutable()->modes_ = const_cast< ::api::ChannelModes*>(
      ::api::ChannelModes::internal_default_instance());
}
class UserModesResponse::HasBitSetters {
 public:
  static const ::api::ChannelModes& modes(const UserModesResponse* msg);
};

const ::api::ChannelModes&
UserModesResponse::HasBitSetters::modes(const UserModesResponse* msg) {
  return *msg->modes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserModesResponse::kModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserModesResponse::UserModesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.UserModesResponse)
}
UserModesResponse::UserModesResponse(const UserModesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_modes()) {
    modes_ = new ::api::ChannelModes(*from.modes_);
  } else {
    modes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.UserModesResponse)
}

void UserModesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserModesResponse_ultimateq_2eproto.base);
  modes_ = nullptr;
}

UserModesResponse::~UserModesResponse() {
  // @@protoc_insertion_point(destructor:api.UserModesResponse)
  SharedDtor();
}

void UserModesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete modes_;
}

void UserModesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserModesResponse& UserModesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserModesResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void UserModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UserModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserModesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserModesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.ChannelModes modes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::ChannelModes::_InternalParse;
        object = msg->mutable_modes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserModesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.UserModesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.ChannelModes modes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.UserModesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.UserModesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserModesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.UserModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.ChannelModes modes = 1;
  if (this->has_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::modes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.UserModesResponse)
}

::google::protobuf::uint8* UserModesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UserModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.ChannelModes modes = 1;
  if (this->has_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::modes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UserModesResponse)
  return target;
}

size_t UserModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UserModesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.ChannelModes modes = 1;
  if (this->has_modes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserModesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UserModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserModesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserModesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UserModesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UserModesResponse)
    MergeFrom(*source);
  }
}

void UserModesResponse::MergeFrom(const UserModesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UserModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_modes()) {
    mutable_modes()->::api::ChannelModes::MergeFrom(from.modes());
  }
}

void UserModesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UserModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserModesResponse::CopyFrom(const UserModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UserModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserModesResponse::IsInitialized() const {
  return true;
}

void UserModesResponse::Swap(UserModesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserModesResponse::InternalSwap(UserModesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(modes_, other->modes_);
}

::google::protobuf::Metadata UserModesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChannelResponse::InitAsDefaultInstance() {
  ::api::_ChannelResponse_default_instance_._instance.get_mutable()->modes_ = const_cast< ::api::ChannelModes*>(
      ::api::ChannelModes::internal_default_instance());
}
class ChannelResponse::HasBitSetters {
 public:
  static const ::api::ChannelModes& modes(const ChannelResponse* msg);
};

const ::api::ChannelModes&
ChannelResponse::HasBitSetters::modes(const ChannelResponse* msg) {
  return *msg->modes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelResponse::kNameFieldNumber;
const int ChannelResponse::kTopicFieldNumber;
const int ChannelResponse::kModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelResponse::ChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ChannelResponse)
}
ChannelResponse::ChannelResponse(const ChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_modes()) {
    modes_ = new ::api::ChannelModes(*from.modes_);
  } else {
    modes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.ChannelResponse)
}

void ChannelResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChannelResponse_ultimateq_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modes_ = nullptr;
}

ChannelResponse::~ChannelResponse() {
  // @@protoc_insertion_point(destructor:api.ChannelResponse)
  SharedDtor();
}

void ChannelResponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete modes_;
}

void ChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelResponse& ChannelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChannelResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void ChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && modes_ != nullptr) {
    delete modes_;
  }
  modes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChannelResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChannelResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ChannelResponse.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string topic = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ChannelResponse.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.ChannelModes modes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::ChannelModes::_InternalParse;
        object = msg->mutable_modes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ChannelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelResponse.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ChannelResponse.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.ChannelModes modes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ChannelResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelResponse.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // .api.ChannelModes modes = 3;
  if (this->has_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::modes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ChannelResponse)
}

::google::protobuf::uint8* ChannelResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelResponse.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ChannelResponse.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // .api.ChannelModes modes = 3;
  if (this->has_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::modes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ChannelResponse)
  return target;
}

size_t ChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ChannelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .api.ChannelModes modes = 3;
  if (this->has_modes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ChannelResponse)
    MergeFrom(*source);
  }
}

void ChannelResponse::MergeFrom(const ChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_modes()) {
    mutable_modes()->::api::ChannelModes::MergeFrom(from.modes());
  }
}

void ChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelResponse::CopyFrom(const ChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelResponse::IsInitialized() const {
  return true;
}

void ChannelResponse::Swap(ChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelResponse::InternalSwap(ChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(modes_, other->modes_);
}

::google::protobuf::Metadata ChannelResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredUsersResponse::InitAsDefaultInstance() {
}
class StoredUsersResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredUsersResponse::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredUsersResponse::StoredUsersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.StoredUsersResponse)
}
StoredUsersResponse::StoredUsersResponse(const StoredUsersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.StoredUsersResponse)
}

void StoredUsersResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredUsersResponse_ultimateq_2eproto.base);
}

StoredUsersResponse::~StoredUsersResponse() {
  // @@protoc_insertion_point(destructor:api.StoredUsersResponse)
  SharedDtor();
}

void StoredUsersResponse::SharedDtor() {
}

void StoredUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredUsersResponse& StoredUsersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredUsersResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void StoredUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.StoredUsersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredUsersResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredUsersResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .api.StoredUser users = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::api::StoredUser::_InternalParse;
          object = msg->add_users();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredUsersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.StoredUsersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .api.StoredUser users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.StoredUsersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.StoredUsersResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredUsersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.StoredUsersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.StoredUser users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.StoredUsersResponse)
}

::google::protobuf::uint8* StoredUsersResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.StoredUsersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.StoredUser users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.StoredUsersResponse)
  return target;
}

size_t StoredUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.StoredUsersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.StoredUser users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredUsersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.StoredUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredUsersResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StoredUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.StoredUsersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.StoredUsersResponse)
    MergeFrom(*source);
  }
}

void StoredUsersResponse::MergeFrom(const StoredUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.StoredUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void StoredUsersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.StoredUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredUsersResponse::CopyFrom(const StoredUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.StoredUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredUsersResponse::IsInitialized() const {
  return true;
}

void StoredUsersResponse::Swap(StoredUsersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredUsersResponse::InternalSwap(StoredUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
}

::google::protobuf::Metadata StoredUsersResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredChannelsResponse::InitAsDefaultInstance() {
}
class StoredChannelsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredChannelsResponse::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredChannelsResponse::StoredChannelsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.StoredChannelsResponse)
}
StoredChannelsResponse::StoredChannelsResponse(const StoredChannelsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.StoredChannelsResponse)
}

void StoredChannelsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredChannelsResponse_ultimateq_2eproto.base);
}

StoredChannelsResponse::~StoredChannelsResponse() {
  // @@protoc_insertion_point(destructor:api.StoredChannelsResponse)
  SharedDtor();
}

void StoredChannelsResponse::SharedDtor() {
}

void StoredChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredChannelsResponse& StoredChannelsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredChannelsResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void StoredChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.StoredChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredChannelsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredChannelsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .api.StoredChannel channels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::api::StoredChannel::_InternalParse;
          object = msg->add_channels();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredChannelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.StoredChannelsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .api.StoredChannel channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.StoredChannelsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.StoredChannelsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredChannelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.StoredChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.StoredChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->channels(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.StoredChannelsResponse)
}

::google::protobuf::uint8* StoredChannelsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.StoredChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.StoredChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->channels(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.StoredChannelsResponse)
  return target;
}

size_t StoredChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.StoredChannelsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.StoredChannel channels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->channels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channels(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredChannelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.StoredChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredChannelsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StoredChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.StoredChannelsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.StoredChannelsResponse)
    MergeFrom(*source);
  }
}

void StoredChannelsResponse::MergeFrom(const StoredChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.StoredChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void StoredChannelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.StoredChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredChannelsResponse::CopyFrom(const StoredChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.StoredChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredChannelsResponse::IsInitialized() const {
  return true;
}

void StoredChannelsResponse::Swap(StoredChannelsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredChannelsResponse::InternalSwap(StoredChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&channels_)->InternalSwap(CastToBase(&other->channels_));
}

::google::protobuf::Metadata StoredChannelsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogoutRequest_HostUser::InitAsDefaultInstance() {
}
class LogoutRequest_HostUser::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequest_HostUser::kNetFieldNumber;
const int LogoutRequest_HostUser::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest_HostUser::LogoutRequest_HostUser()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.LogoutRequest.HostUser)
}
LogoutRequest_HostUser::LogoutRequest_HostUser(const LogoutRequest_HostUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:api.LogoutRequest.HostUser)
}

void LogoutRequest_HostUser::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogoutRequest_HostUser_ultimateq_2eproto.base);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogoutRequest_HostUser::~LogoutRequest_HostUser() {
  // @@protoc_insertion_point(destructor:api.LogoutRequest.HostUser)
  SharedDtor();
}

void LogoutRequest_HostUser::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogoutRequest_HostUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRequest_HostUser& LogoutRequest_HostUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogoutRequest_HostUser_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void LogoutRequest_HostUser::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LogoutRequest.HostUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogoutRequest_HostUser::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogoutRequest_HostUser*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string net = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.LogoutRequest.HostUser.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string host = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.LogoutRequest.HostUser.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogoutRequest_HostUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.LogoutRequest.HostUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.LogoutRequest.HostUser.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.LogoutRequest.HostUser.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.LogoutRequest.HostUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.LogoutRequest.HostUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogoutRequest_HostUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.LogoutRequest.HostUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LogoutRequest.HostUser.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LogoutRequest.HostUser.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.LogoutRequest.HostUser)
}

::google::protobuf::uint8* LogoutRequest_HostUser::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LogoutRequest.HostUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LogoutRequest.HostUser.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LogoutRequest.HostUser.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LogoutRequest.HostUser)
  return target;
}

size_t LogoutRequest_HostUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LogoutRequest.HostUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRequest_HostUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LogoutRequest.HostUser)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest_HostUser* source =
      ::google::protobuf::DynamicCastToGenerated<LogoutRequest_HostUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LogoutRequest.HostUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LogoutRequest.HostUser)
    MergeFrom(*source);
  }
}

void LogoutRequest_HostUser::MergeFrom(const LogoutRequest_HostUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LogoutRequest.HostUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
}

void LogoutRequest_HostUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LogoutRequest.HostUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest_HostUser::CopyFrom(const LogoutRequest_HostUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LogoutRequest.HostUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest_HostUser::IsInitialized() const {
  return true;
}

void LogoutRequest_HostUser::Swap(LogoutRequest_HostUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest_HostUser::InternalSwap(LogoutRequest_HostUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LogoutRequest_HostUser::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogoutRequest::InitAsDefaultInstance() {
  ::api::_LogoutRequest_default_instance_.host_user_ = const_cast< ::api::LogoutRequest_HostUser*>(
      ::api::LogoutRequest_HostUser::internal_default_instance());
  ::api::_LogoutRequest_default_instance_.username_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class LogoutRequest::HasBitSetters {
 public:
  static const ::api::LogoutRequest_HostUser& host_user(const LogoutRequest* msg);
};

const ::api::LogoutRequest_HostUser&
LogoutRequest::HasBitSetters::host_user(const LogoutRequest* msg) {
  return *msg->query_.host_user_;
}
void LogoutRequest::set_allocated_host_user(::api::LogoutRequest_HostUser* host_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_query();
  if (host_user) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, host_user, submessage_arena);
    }
    set_has_host_user();
    query_.host_user_ = host_user;
  }
  // @@protoc_insertion_point(field_set_allocated:api.LogoutRequest.host_user)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequest::kHostUserFieldNumber;
const int LogoutRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_query();
  switch (from.query_case()) {
    case kHostUser: {
      mutable_host_user()->::api::LogoutRequest_HostUser::MergeFrom(from.host_user());
      break;
    }
    case kUsername: {
      set_username(from.username());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:api.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogoutRequest_ultimateq_2eproto.base);
  clear_has_query();
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:api.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (has_query()) {
    clear_query();
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRequest& LogoutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogoutRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void LogoutRequest::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:api.LogoutRequest)
  switch (query_case()) {
    case kHostUser: {
      delete query_.host_user_;
      break;
    }
    case kUsername: {
      query_.username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_query();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogoutRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogoutRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.LogoutRequest.HostUser host_user = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::LogoutRequest_HostUser::_InternalParse;
        object = msg->mutable_host_user();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string username = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.LogoutRequest.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.LogoutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.LogoutRequest.HostUser host_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_host_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.LogoutRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.LogoutRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.LogoutRequest.HostUser host_user = 1;
  if (has_host_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::host_user(this), output);
  }

  // string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LogoutRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.LogoutRequest.HostUser host_user = 1;
  if (has_host_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::host_user(this), target);
  }

  // string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LogoutRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LogoutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (query_case()) {
    // .api.LogoutRequest.HostUser host_user = 1;
    case kHostUser: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_.host_user_);
      break;
    }
    // string username = 2;
    case kUsername: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LogoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.query_case()) {
    case kHostUser: {
      mutable_host_user()->::api::LogoutRequest_HostUser::MergeFrom(from.host_user());
      break;
    }
    case kUsername: {
      set_username(from.username());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NetworkInfoRequest::InitAsDefaultInstance() {
}
class NetworkInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInfoRequest::kNetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInfoRequest::NetworkInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.NetworkInfoRequest)
}
NetworkInfoRequest::NetworkInfoRequest(const NetworkInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  // @@protoc_insertion_point(copy_constructor:api.NetworkInfoRequest)
}

void NetworkInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NetworkInfoRequest_ultimateq_2eproto.base);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NetworkInfoRequest::~NetworkInfoRequest() {
  // @@protoc_insertion_point(destructor:api.NetworkInfoRequest)
  SharedDtor();
}

void NetworkInfoRequest::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInfoRequest& NetworkInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetworkInfoRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void NetworkInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NetworkInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetworkInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string net = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.NetworkInfoRequest.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.NetworkInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.NetworkInfoRequest.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.NetworkInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.NetworkInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.NetworkInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfoRequest.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.NetworkInfoRequest)
}

::google::protobuf::uint8* NetworkInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NetworkInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.NetworkInfoRequest.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NetworkInfoRequest)
  return target;
}

size_t NetworkInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NetworkInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NetworkInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NetworkInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NetworkInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NetworkInfoRequest)
    MergeFrom(*source);
  }
}

void NetworkInfoRequest::MergeFrom(const NetworkInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NetworkInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
}

void NetworkInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NetworkInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfoRequest::CopyFrom(const NetworkInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NetworkInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfoRequest::IsInitialized() const {
  return true;
}

void NetworkInfoRequest::Swap(NetworkInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInfoRequest::InternalSwap(NetworkInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NetworkInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Cmd::InitAsDefaultInstance() {
}
class Cmd::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cmd::kExtFieldNumber;
const int Cmd::kNameFieldNumber;
const int Cmd::kDescFieldNumber;
const int Cmd::kKindFieldNumber;
const int Cmd::kScopeFieldNumber;
const int Cmd::kArgsFieldNumber;
const int Cmd::kRequireAuthFieldNumber;
const int Cmd::kReqLevelFieldNumber;
const int Cmd::kReqFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cmd::Cmd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Cmd)
}
Cmd::Cmd(const Cmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  req_flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.req_flags().size() > 0) {
    req_flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_flags_);
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_level_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(req_level_));
  // @@protoc_insertion_point(copy_constructor:api.Cmd)
}

void Cmd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Cmd_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_level_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(req_level_));
}

Cmd::~Cmd() {
  // @@protoc_insertion_point(destructor:api.Cmd)
  SharedDtor();
}

void Cmd::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_flags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cmd& Cmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Cmd_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_level_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(req_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Cmd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Cmd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.Cmd.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.Cmd.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string desc = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.Cmd.desc");
        object = msg->mutable_desc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Cmd.Kind kind = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_kind(static_cast<::api::Cmd_Kind>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .api.Cmd.Scope scope = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_scope(static_cast<::api::Cmd_Scope>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string args = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("api.Cmd.args");
          object = msg->add_args();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // bool require_auth = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_require_auth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 req_level = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_req_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string req_flags = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.Cmd.req_flags");
        object = msg->mutable_req_flags();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Cmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.Cmd.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.Cmd.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.Cmd.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Cmd.Kind kind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::api::Cmd_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Cmd.Scope scope = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scope(static_cast< ::api::Cmd_Scope >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string args = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args(this->args_size() - 1).data(),
            static_cast<int>(this->args(this->args_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.Cmd.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool require_auth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_auth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 req_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string req_flags = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_flags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->req_flags().data(), static_cast<int>(this->req_flags().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.Cmd.req_flags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Cmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // .api.Cmd.Kind kind = 4;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->kind(), output);
  }

  // .api.Cmd.Scope scope = 5;
  if (this->scope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->scope(), output);
  }

  // repeated string args = 6;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->args(i), output);
  }

  // bool require_auth = 7;
  if (this->require_auth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->require_auth(), output);
  }

  // int32 req_level = 8;
  if (this->req_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->req_level(), output);
  }

  // string req_flags = 9;
  if (this->req_flags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req_flags().data(), static_cast<int>(this->req_flags().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.req_flags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->req_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.Cmd)
}

::google::protobuf::uint8* Cmd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // .api.Cmd.Kind kind = 4;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->kind(), target);
  }

  // .api.Cmd.Scope scope = 5;
  if (this->scope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->scope(), target);
  }

  // repeated string args = 6;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->args(i), target);
  }

  // bool require_auth = 7;
  if (this->require_auth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->require_auth(), target);
  }

  // int32 req_level = 8;
  if (this->req_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->req_level(), target);
  }

  // string req_flags = 9;
  if (this->req_flags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req_flags().data(), static_cast<int>(this->req_flags().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.Cmd.req_flags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->req_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Cmd)
  return target;
}

size_t Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Cmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // string req_flags = 9;
  if (this->req_flags().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->req_flags());
  }

  // .api.Cmd.Kind kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // .api.Cmd.Scope scope = 5;
  if (this->scope() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
  }

  // bool require_auth = 7;
  if (this->require_auth() != 0) {
    total_size += 1 + 1;
  }

  // int32 req_level = 8;
  if (this->req_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->req_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const Cmd* source =
      ::google::protobuf::DynamicCastToGenerated<Cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Cmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Cmd)
    MergeFrom(*source);
  }
}

void Cmd::MergeFrom(const Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.req_flags().size() > 0) {

    req_flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_flags_);
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.scope() != 0) {
    set_scope(from.scope());
  }
  if (from.require_auth() != 0) {
    set_require_auth(from.require_auth());
  }
  if (from.req_level() != 0) {
    set_req_level(from.req_level());
  }
}

void Cmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd::CopyFrom(const Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd::IsInitialized() const {
  return true;
}

void Cmd::Swap(Cmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cmd::InternalSwap(Cmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_.InternalSwap(CastToBase(&other->args_));
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  req_flags_.Swap(&other->req_flags_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kind_, other->kind_);
  swap(scope_, other->scope_);
  swap(require_auth_, other->require_auth_);
  swap(req_level_, other->req_level_);
}

::google::protobuf::Metadata Cmd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

CmdEvent_TargetUsersEntry_DoNotUse::CmdEvent_TargetUsersEntry_DoNotUse() {}
CmdEvent_TargetUsersEntry_DoNotUse::CmdEvent_TargetUsersEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CmdEvent_TargetUsersEntry_DoNotUse::MergeFrom(const CmdEvent_TargetUsersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CmdEvent_TargetUsersEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[37];
}
void CmdEvent_TargetUsersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdEvent_TargetUsersEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CmdEvent_TargetUsersEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.CmdEvent.TargetUsersEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

CmdEvent_TargetStoredUsersEntry_DoNotUse::CmdEvent_TargetStoredUsersEntry_DoNotUse() {}
CmdEvent_TargetStoredUsersEntry_DoNotUse::CmdEvent_TargetStoredUsersEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CmdEvent_TargetStoredUsersEntry_DoNotUse::MergeFrom(const CmdEvent_TargetStoredUsersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CmdEvent_TargetStoredUsersEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[38];
}
void CmdEvent_TargetStoredUsersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdEvent_TargetStoredUsersEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CmdEvent_TargetStoredUsersEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.CmdEvent.TargetStoredUsersEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

CmdEvent_ArgsEntry_DoNotUse::CmdEvent_ArgsEntry_DoNotUse() {}
CmdEvent_ArgsEntry_DoNotUse::CmdEvent_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CmdEvent_ArgsEntry_DoNotUse::MergeFrom(const CmdEvent_ArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CmdEvent_ArgsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[39];
}
void CmdEvent_ArgsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdEvent_ArgsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CmdEvent_ArgsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.CmdEvent.ArgsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "api.CmdEvent.ArgsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void CmdEvent::InitAsDefaultInstance() {
  ::api::_CmdEvent_default_instance_._instance.get_mutable()->ircevent_ = const_cast< ::api::IRCEvent*>(
      ::api::IRCEvent::internal_default_instance());
  ::api::_CmdEvent_default_instance_._instance.get_mutable()->user_ = const_cast< ::api::StateUser*>(
      ::api::StateUser::internal_default_instance());
  ::api::_CmdEvent_default_instance_._instance.get_mutable()->storeduser_ = const_cast< ::api::StoredUser*>(
      ::api::StoredUser::internal_default_instance());
  ::api::_CmdEvent_default_instance_._instance.get_mutable()->userchanmodes_ = const_cast< ::api::UserModes*>(
      ::api::UserModes::internal_default_instance());
  ::api::_CmdEvent_default_instance_._instance.get_mutable()->channel_ = const_cast< ::api::StateChannel*>(
      ::api::StateChannel::internal_default_instance());
  ::api::_CmdEvent_default_instance_._instance.get_mutable()->targetchannel_ = const_cast< ::api::StateChannel*>(
      ::api::StateChannel::internal_default_instance());
}
class CmdEvent::HasBitSetters {
 public:
  static const ::api::IRCEvent& ircevent(const CmdEvent* msg);
  static const ::api::StateUser& user(const CmdEvent* msg);
  static const ::api::StoredUser& storeduser(const CmdEvent* msg);
  static const ::api::UserModes& userchanmodes(const CmdEvent* msg);
  static const ::api::StateChannel& channel(const CmdEvent* msg);
  static const ::api::StateChannel& targetchannel(const CmdEvent* msg);
};

const ::api::IRCEvent&
CmdEvent::HasBitSetters::ircevent(const CmdEvent* msg) {
  return *msg->ircevent_;
}
const ::api::StateUser&
CmdEvent::HasBitSetters::user(const CmdEvent* msg) {
  return *msg->user_;
}
const ::api::StoredUser&
CmdEvent::HasBitSetters::storeduser(const CmdEvent* msg) {
  return *msg->storeduser_;
}
const ::api::UserModes&
CmdEvent::HasBitSetters::userchanmodes(const CmdEvent* msg) {
  return *msg->userchanmodes_;
}
const ::api::StateChannel&
CmdEvent::HasBitSetters::channel(const CmdEvent* msg) {
  return *msg->channel_;
}
const ::api::StateChannel&
CmdEvent::HasBitSetters::targetchannel(const CmdEvent* msg) {
  return *msg->targetchannel_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdEvent::kIrcEventFieldNumber;
const int CmdEvent::kUserFieldNumber;
const int CmdEvent::kStoredUserFieldNumber;
const int CmdEvent::kUserChanModesFieldNumber;
const int CmdEvent::kChannelFieldNumber;
const int CmdEvent::kTargetChannelFieldNumber;
const int CmdEvent::kTargetUsersFieldNumber;
const int CmdEvent::kTargetStoredUsersFieldNumber;
const int CmdEvent::kTargetVariadicUsersFieldNumber;
const int CmdEvent::kTargetVariadicStoredUsersFieldNumber;
const int CmdEvent::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdEvent::CmdEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CmdEvent)
}
CmdEvent::CmdEvent(const CmdEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      targetvariadicusers_(from.targetvariadicusers_),
      targetvariadicstoredusers_(from.targetvariadicstoredusers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetusers_.MergeFrom(from.targetusers_);
  targetstoredusers_.MergeFrom(from.targetstoredusers_);
  args_.MergeFrom(from.args_);
  if (from.has_ircevent()) {
    ircevent_ = new ::api::IRCEvent(*from.ircevent_);
  } else {
    ircevent_ = nullptr;
  }
  if (from.has_user()) {
    user_ = new ::api::StateUser(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from.has_storeduser()) {
    storeduser_ = new ::api::StoredUser(*from.storeduser_);
  } else {
    storeduser_ = nullptr;
  }
  if (from.has_userchanmodes()) {
    userchanmodes_ = new ::api::UserModes(*from.userchanmodes_);
  } else {
    userchanmodes_ = nullptr;
  }
  if (from.has_channel()) {
    channel_ = new ::api::StateChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from.has_targetchannel()) {
    targetchannel_ = new ::api::StateChannel(*from.targetchannel_);
  } else {
    targetchannel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.CmdEvent)
}

void CmdEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CmdEvent_ultimateq_2eproto.base);
  ::memset(&ircevent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetchannel_) -
      reinterpret_cast<char*>(&ircevent_)) + sizeof(targetchannel_));
}

CmdEvent::~CmdEvent() {
  // @@protoc_insertion_point(destructor:api.CmdEvent)
  SharedDtor();
}

void CmdEvent::SharedDtor() {
  if (this != internal_default_instance()) delete ircevent_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete storeduser_;
  if (this != internal_default_instance()) delete userchanmodes_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete targetchannel_;
}

void CmdEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdEvent& CmdEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CmdEvent_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void CmdEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CmdEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetusers_.Clear();
  targetstoredusers_.Clear();
  targetvariadicusers_.Clear();
  targetvariadicstoredusers_.Clear();
  args_.Clear();
  if (GetArenaNoVirtual() == nullptr && ircevent_ != nullptr) {
    delete ircevent_;
  }
  ircevent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && storeduser_ != nullptr) {
    delete storeduser_;
  }
  storeduser_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && userchanmodes_ != nullptr) {
    delete userchanmodes_;
  }
  userchanmodes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && targetchannel_ != nullptr) {
    delete targetchannel_;
  }
  targetchannel_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CmdEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CmdEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.IRCEvent ircEvent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::IRCEvent::_InternalParse;
        object = msg->mutable_ircevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .api.StateUser user = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::StateUser::_InternalParse;
        object = msg->mutable_user();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .api.StoredUser storedUser = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::StoredUser::_InternalParse;
        object = msg->mutable_storeduser();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .api.UserModes userChanModes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::UserModes::_InternalParse;
        object = msg->mutable_userchanmodes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .api.StateChannel channel = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::StateChannel::_InternalParse;
        object = msg->mutable_channel();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .api.StateChannel targetChannel = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::StateChannel::_InternalParse;
        object = msg->mutable_targetchannel();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, .api.StateUser> targetUsers = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::CmdEvent_TargetUsersEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->targetusers_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // map<string, .api.StoredUser> targetStoredUsers = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->targetstoredusers_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .api.StateUser targetVariadicUsers = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::api::StateUser::_InternalParse;
          object = msg->add_targetvariadicusers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // repeated .api.StoredUser targetVariadicStoredUsers = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::api::StoredUser::_InternalParse;
          object = msg->add_targetvariadicstoredusers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // map<string, string> args = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::api::CmdEvent_ArgsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->args_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CmdEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.IRCEvent ircEvent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ircevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.StateUser user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.StoredUser storedUser = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storeduser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.UserModes userChanModes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userchanmodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.StateChannel channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.StateChannel targetChannel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetchannel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .api.StateUser> targetUsers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          CmdEvent_TargetUsersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CmdEvent_TargetUsersEntry_DoNotUse,
              ::std::string, ::api::StateUser,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::api::StateUser > > parser(&targetusers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CmdEvent.TargetUsersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .api.StoredUser> targetStoredUsers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          CmdEvent_TargetStoredUsersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CmdEvent_TargetStoredUsersEntry_DoNotUse,
              ::std::string, ::api::StoredUser,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::api::StoredUser > > parser(&targetstoredusers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CmdEvent.TargetStoredUsersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .api.StateUser targetVariadicUsers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_targetvariadicusers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .api.StoredUser targetVariadicStoredUsers = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_targetvariadicstoredusers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> args = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          CmdEvent_ArgsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CmdEvent_ArgsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&args_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CmdEvent.ArgsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CmdEvent.ArgsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CmdEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CmdEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CmdEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CmdEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.IRCEvent ircEvent = 1;
  if (this->has_ircevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ircevent(this), output);
  }

  // .api.StateUser user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::user(this), output);
  }

  // .api.StoredUser storedUser = 3;
  if (this->has_storeduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::storeduser(this), output);
  }

  // .api.UserModes userChanModes = 4;
  if (this->has_userchanmodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::userchanmodes(this), output);
  }

  // .api.StateChannel channel = 5;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::channel(this), output);
  }

  // .api.StateChannel targetChannel = 6;
  if (this->has_targetchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::targetchannel(this), output);
  }

  // map<string, .api.StateUser> targetUsers = 7;
  if (!this->targetusers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::StateUser >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.TargetUsersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->targetusers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->targetusers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::StateUser >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::StateUser >::const_iterator
          it = this->targetusers().begin();
          it != this->targetusers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CmdEvent_TargetUsersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(targetusers_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CmdEvent_TargetUsersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::StateUser >::const_iterator
          it = this->targetusers().begin();
          it != this->targetusers().end(); ++it) {
        entry.reset(targetusers_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .api.StoredUser> targetStoredUsers = 8;
  if (!this->targetstoredusers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.TargetStoredUsersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->targetstoredusers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->targetstoredusers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::StoredUser >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_iterator
          it = this->targetstoredusers().begin();
          it != this->targetstoredusers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CmdEvent_TargetStoredUsersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(targetstoredusers_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(8, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CmdEvent_TargetStoredUsersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_iterator
          it = this->targetstoredusers().begin();
          it != this->targetstoredusers().end(); ++it) {
        entry.reset(targetstoredusers_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(8, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .api.StateUser targetVariadicUsers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetvariadicusers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->targetvariadicusers(static_cast<int>(i)),
      output);
  }

  // repeated .api.StoredUser targetVariadicStoredUsers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetvariadicstoredusers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->targetvariadicstoredusers(static_cast<int>(i)),
      output);
  }

  // map<string, string> args = 11;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.ArgsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->args().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CmdEvent_ArgsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CmdEvent_ArgsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CmdEvent)
}

::google::protobuf::uint8* CmdEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CmdEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.IRCEvent ircEvent = 1;
  if (this->has_ircevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ircevent(this), target);
  }

  // .api.StateUser user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::user(this), target);
  }

  // .api.StoredUser storedUser = 3;
  if (this->has_storeduser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::storeduser(this), target);
  }

  // .api.UserModes userChanModes = 4;
  if (this->has_userchanmodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::userchanmodes(this), target);
  }

  // .api.StateChannel channel = 5;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::channel(this), target);
  }

  // .api.StateChannel targetChannel = 6;
  if (this->has_targetchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::targetchannel(this), target);
  }

  // map<string, .api.StateUser> targetUsers = 7;
  if (!this->targetusers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::StateUser >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.TargetUsersEntry.key");
      }
    };

    if (false &&
        this->targetusers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->targetusers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::StateUser >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::StateUser >::const_iterator
          it = this->targetusers().begin();
          it != this->targetusers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CmdEvent_TargetUsersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(targetusers_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CmdEvent_TargetUsersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::StateUser >::const_iterator
          it = this->targetusers().begin();
          it != this->targetusers().end(); ++it) {
        entry.reset(targetusers_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .api.StoredUser> targetStoredUsers = 8;
  if (!this->targetstoredusers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.TargetStoredUsersEntry.key");
      }
    };

    if (false &&
        this->targetstoredusers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->targetstoredusers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::api::StoredUser >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_iterator
          it = this->targetstoredusers().begin();
          it != this->targetstoredusers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CmdEvent_TargetStoredUsersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(targetstoredusers_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(8, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CmdEvent_TargetStoredUsersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_iterator
          it = this->targetstoredusers().begin();
          it != this->targetstoredusers().end(); ++it) {
        entry.reset(targetstoredusers_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(8, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .api.StateUser targetVariadicUsers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetvariadicusers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->targetvariadicusers(static_cast<int>(i)), target);
  }

  // repeated .api.StoredUser targetVariadicStoredUsers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetvariadicstoredusers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->targetvariadicstoredusers(static_cast<int>(i)), target);
  }

  // map<string, string> args = 11;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "api.CmdEvent.ArgsEntry.value");
      }
    };

    if (false &&
        this->args().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CmdEvent_ArgsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CmdEvent_ArgsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CmdEvent)
  return target;
}

size_t CmdEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CmdEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .api.StateUser> targetUsers = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->targetusers_size());
  {
    ::std::unique_ptr<CmdEvent_TargetUsersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::api::StateUser >::const_iterator
        it = this->targetusers().begin();
        it != this->targetusers().end(); ++it) {
      entry.reset(targetusers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .api.StoredUser> targetStoredUsers = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->targetstoredusers_size());
  {
    ::std::unique_ptr<CmdEvent_TargetStoredUsersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::api::StoredUser >::const_iterator
        it = this->targetstoredusers().begin();
        it != this->targetstoredusers().end(); ++it) {
      entry.reset(targetstoredusers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .api.StateUser targetVariadicUsers = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->targetvariadicusers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->targetvariadicusers(static_cast<int>(i)));
    }
  }

  // repeated .api.StoredUser targetVariadicStoredUsers = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->targetvariadicstoredusers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->targetvariadicstoredusers(static_cast<int>(i)));
    }
  }

  // map<string, string> args = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  {
    ::std::unique_ptr<CmdEvent_ArgsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->args().begin();
        it != this->args().end(); ++it) {
      entry.reset(args_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .api.IRCEvent ircEvent = 1;
  if (this->has_ircevent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ircevent_);
  }

  // .api.StateUser user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .api.StoredUser storedUser = 3;
  if (this->has_storeduser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storeduser_);
  }

  // .api.UserModes userChanModes = 4;
  if (this->has_userchanmodes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *userchanmodes_);
  }

  // .api.StateChannel channel = 5;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .api.StateChannel targetChannel = 6;
  if (this->has_targetchannel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetchannel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CmdEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CmdEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CmdEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CmdEvent)
    MergeFrom(*source);
  }
}

void CmdEvent::MergeFrom(const CmdEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CmdEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetusers_.MergeFrom(from.targetusers_);
  targetstoredusers_.MergeFrom(from.targetstoredusers_);
  targetvariadicusers_.MergeFrom(from.targetvariadicusers_);
  targetvariadicstoredusers_.MergeFrom(from.targetvariadicstoredusers_);
  args_.MergeFrom(from.args_);
  if (from.has_ircevent()) {
    mutable_ircevent()->::api::IRCEvent::MergeFrom(from.ircevent());
  }
  if (from.has_user()) {
    mutable_user()->::api::StateUser::MergeFrom(from.user());
  }
  if (from.has_storeduser()) {
    mutable_storeduser()->::api::StoredUser::MergeFrom(from.storeduser());
  }
  if (from.has_userchanmodes()) {
    mutable_userchanmodes()->::api::UserModes::MergeFrom(from.userchanmodes());
  }
  if (from.has_channel()) {
    mutable_channel()->::api::StateChannel::MergeFrom(from.channel());
  }
  if (from.has_targetchannel()) {
    mutable_targetchannel()->::api::StateChannel::MergeFrom(from.targetchannel());
  }
}

void CmdEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CmdEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdEvent::CopyFrom(const CmdEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CmdEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdEvent::IsInitialized() const {
  return true;
}

void CmdEvent::Swap(CmdEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdEvent::InternalSwap(CmdEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  targetusers_.Swap(&other->targetusers_);
  targetstoredusers_.Swap(&other->targetstoredusers_);
  CastToBase(&targetvariadicusers_)->InternalSwap(CastToBase(&other->targetvariadicusers_));
  CastToBase(&targetvariadicstoredusers_)->InternalSwap(CastToBase(&other->targetvariadicstoredusers_));
  args_.Swap(&other->args_);
  swap(ircevent_, other->ircevent_);
  swap(user_, other->user_);
  swap(storeduser_, other->storeduser_);
  swap(userchanmodes_, other->userchanmodes_);
  swap(channel_, other->channel_);
  swap(targetchannel_, other->targetchannel_);
}

::google::protobuf::Metadata CmdEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CmdEventResponse::InitAsDefaultInstance() {
  ::api::_CmdEventResponse_default_instance_._instance.get_mutable()->event_ = const_cast< ::api::CmdEvent*>(
      ::api::CmdEvent::internal_default_instance());
}
class CmdEventResponse::HasBitSetters {
 public:
  static const ::api::CmdEvent& event(const CmdEventResponse* msg);
};

const ::api::CmdEvent&
CmdEventResponse::HasBitSetters::event(const CmdEventResponse* msg) {
  return *msg->event_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdEventResponse::kIdFieldNumber;
const int CmdEventResponse::kNameFieldNumber;
const int CmdEventResponse::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdEventResponse::CmdEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CmdEventResponse)
}
CmdEventResponse::CmdEventResponse(const CmdEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_event()) {
    event_ = new ::api::CmdEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:api.CmdEventResponse)
}

void CmdEventResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CmdEventResponse_ultimateq_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&event_)) + sizeof(id_));
}

CmdEventResponse::~CmdEventResponse() {
  // @@protoc_insertion_point(destructor:api.CmdEventResponse)
  SharedDtor();
}

void CmdEventResponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
}

void CmdEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdEventResponse& CmdEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CmdEventResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void CmdEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CmdEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CmdEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CmdEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.CmdEventResponse.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.CmdEvent event = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::CmdEvent::_InternalParse;
        object = msg->mutable_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CmdEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CmdEventResponse.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.CmdEvent event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CmdEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CmdEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CmdEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CmdEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.CmdEventResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .api.CmdEvent event = 3;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CmdEventResponse)
}

::google::protobuf::uint8* CmdEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CmdEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.CmdEventResponse.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .api.CmdEvent event = 3;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CmdEventResponse)
  return target;
}

size_t CmdEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CmdEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .api.CmdEvent event = 3;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CmdEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CmdEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CmdEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CmdEventResponse)
    MergeFrom(*source);
  }
}

void CmdEventResponse::MergeFrom(const CmdEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CmdEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_event()) {
    mutable_event()->::api::CmdEvent::MergeFrom(from.event());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CmdEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CmdEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdEventResponse::CopyFrom(const CmdEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CmdEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdEventResponse::IsInitialized() const {
  return true;
}

void CmdEventResponse::Swap(CmdEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdEventResponse::InternalSwap(CmdEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata CmdEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IRCEventResponse::InitAsDefaultInstance() {
  ::api::_IRCEventResponse_default_instance_._instance.get_mutable()->event_ = const_cast< ::api::IRCEvent*>(
      ::api::IRCEvent::internal_default_instance());
}
class IRCEventResponse::HasBitSetters {
 public:
  static const ::api::IRCEvent& event(const IRCEventResponse* msg);
};

const ::api::IRCEvent&
IRCEventResponse::HasBitSetters::event(const IRCEventResponse* msg) {
  return *msg->event_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IRCEventResponse::kIdFieldNumber;
const int IRCEventResponse::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IRCEventResponse::IRCEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.IRCEventResponse)
}
IRCEventResponse::IRCEventResponse(const IRCEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::api::IRCEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:api.IRCEventResponse)
}

void IRCEventResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IRCEventResponse_ultimateq_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&event_)) + sizeof(id_));
}

IRCEventResponse::~IRCEventResponse() {
  // @@protoc_insertion_point(destructor:api.IRCEventResponse)
  SharedDtor();
}

void IRCEventResponse::SharedDtor() {
  if (this != internal_default_instance()) delete event_;
}

void IRCEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRCEventResponse& IRCEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IRCEventResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void IRCEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.IRCEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IRCEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IRCEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .api.IRCEvent event = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::IRCEvent::_InternalParse;
        object = msg->mutable_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IRCEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.IRCEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.IRCEvent event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.IRCEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.IRCEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IRCEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.IRCEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // .api.IRCEvent event = 2;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.IRCEventResponse)
}

::google::protobuf::uint8* IRCEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.IRCEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // .api.IRCEvent event = 2;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.IRCEventResponse)
  return target;
}

size_t IRCEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.IRCEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.IRCEvent event = 2;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRCEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.IRCEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IRCEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<IRCEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.IRCEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.IRCEventResponse)
    MergeFrom(*source);
  }
}

void IRCEventResponse::MergeFrom(const IRCEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.IRCEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    mutable_event()->::api::IRCEvent::MergeFrom(from.event());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void IRCEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.IRCEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRCEventResponse::CopyFrom(const IRCEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.IRCEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRCEventResponse::IsInitialized() const {
  return true;
}

void IRCEventResponse::Swap(IRCEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IRCEventResponse::InternalSwap(IRCEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata IRCEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IRCEvent::InitAsDefaultInstance() {
}
class IRCEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IRCEvent::kNameFieldNumber;
const int IRCEvent::kSenderFieldNumber;
const int IRCEvent::kArgsFieldNumber;
const int IRCEvent::kTimeFieldNumber;
const int IRCEvent::kNetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IRCEvent::IRCEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.IRCEvent)
}
IRCEvent::IRCEvent(const IRCEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:api.IRCEvent)
}

void IRCEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IRCEvent_ultimateq_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
}

IRCEvent::~IRCEvent() {
  // @@protoc_insertion_point(destructor:api.IRCEvent)
  SharedDtor();
}

void IRCEvent::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IRCEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRCEvent& IRCEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IRCEvent_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void IRCEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api.IRCEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IRCEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IRCEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.IRCEvent.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string sender = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.IRCEvent.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string args = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("api.IRCEvent.args");
          object = msg->add_args();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int64 time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string net = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.IRCEvent.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IRCEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.IRCEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.IRCEvent.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.IRCEvent.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args(this->args_size() - 1).data(),
            static_cast<int>(this->args(this->args_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.IRCEvent.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string net = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.IRCEvent.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.IRCEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.IRCEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IRCEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.IRCEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // string net = 5;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->net(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.IRCEvent)
}

::google::protobuf::uint8* IRCEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.IRCEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // string net = 5;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.IRCEvent.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->net(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.IRCEvent)
  return target;
}

size_t IRCEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.IRCEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string net = 5;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRCEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.IRCEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const IRCEvent* source =
      ::google::protobuf::DynamicCastToGenerated<IRCEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.IRCEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.IRCEvent)
    MergeFrom(*source);
  }
}

void IRCEvent::MergeFrom(const IRCEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.IRCEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void IRCEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.IRCEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRCEvent::CopyFrom(const IRCEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.IRCEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRCEvent::IsInitialized() const {
  return true;
}

void IRCEvent::Swap(IRCEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IRCEvent::InternalSwap(IRCEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_.InternalSwap(CastToBase(&other->args_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
}

::google::protobuf::Metadata IRCEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterCmdRequest::InitAsDefaultInstance() {
  ::api::_RegisterCmdRequest_default_instance_._instance.get_mutable()->cmd_ = const_cast< ::api::Cmd*>(
      ::api::Cmd::internal_default_instance());
}
class RegisterCmdRequest::HasBitSetters {
 public:
  static const ::api::Cmd& cmd(const RegisterCmdRequest* msg);
};

const ::api::Cmd&
RegisterCmdRequest::HasBitSetters::cmd(const RegisterCmdRequest* msg) {
  return *msg->cmd_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterCmdRequest::kExtFieldNumber;
const int RegisterCmdRequest::kNetworkFieldNumber;
const int RegisterCmdRequest::kChannelFieldNumber;
const int RegisterCmdRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterCmdRequest::RegisterCmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.RegisterCmdRequest)
}
RegisterCmdRequest::RegisterCmdRequest(const RegisterCmdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network().size() > 0) {
    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.has_cmd()) {
    cmd_ = new ::api::Cmd(*from.cmd_);
  } else {
    cmd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.RegisterCmdRequest)
}

void RegisterCmdRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterCmdRequest_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = nullptr;
}

RegisterCmdRequest::~RegisterCmdRequest() {
  // @@protoc_insertion_point(destructor:api.RegisterCmdRequest)
  SharedDtor();
}

void RegisterCmdRequest::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cmd_;
}

void RegisterCmdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterCmdRequest& RegisterCmdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterCmdRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void RegisterCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.RegisterCmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cmd_ != nullptr) {
    delete cmd_;
  }
  cmd_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterCmdRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterCmdRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterCmdRequest.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string network = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterCmdRequest.network");
        object = msg->mutable_network();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string channel = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterCmdRequest.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Cmd cmd = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::Cmd::_InternalParse;
        object = msg->mutable_cmd();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.RegisterCmdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterCmdRequest.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string network = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), static_cast<int>(this->network().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterCmdRequest.network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterCmdRequest.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Cmd cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.RegisterCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.RegisterCmdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.RegisterCmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterCmdRequest.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterCmdRequest.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network(), output);
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterCmdRequest.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // .api.Cmd cmd = 4;
  if (this->has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::cmd(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.RegisterCmdRequest)
}

::google::protobuf::uint8* RegisterCmdRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.RegisterCmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterCmdRequest.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterCmdRequest.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network(), target);
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterCmdRequest.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // .api.Cmd cmd = 4;
  if (this->has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::cmd(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.RegisterCmdRequest)
  return target;
}

size_t RegisterCmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.RegisterCmdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  // string network = 2;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // .api.Cmd cmd = 4;
  if (this->has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.RegisterCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterCmdRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterCmdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.RegisterCmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.RegisterCmdRequest)
    MergeFrom(*source);
  }
}

void RegisterCmdRequest::MergeFrom(const RegisterCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.RegisterCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.has_cmd()) {
    mutable_cmd()->::api::Cmd::MergeFrom(from.cmd());
  }
}

void RegisterCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.RegisterCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterCmdRequest::CopyFrom(const RegisterCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.RegisterCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterCmdRequest::IsInitialized() const {
  return true;
}

void RegisterCmdRequest::Swap(RegisterCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterCmdRequest::InternalSwap(RegisterCmdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  network_.Swap(&other->network_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmd_, other->cmd_);
}

::google::protobuf::Metadata RegisterCmdRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterRequest::InitAsDefaultInstance() {
}
class RegisterRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequest::kExtFieldNumber;
const int RegisterRequest::kNetworkFieldNumber;
const int RegisterRequest::kChannelFieldNumber;
const int RegisterRequest::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network().size() > 0) {
    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event().size() > 0) {
    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  // @@protoc_insertion_point(copy_constructor:api.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterRequest_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:api.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterRequest& RegisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterRequest.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string network = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterRequest.network");
        object = msg->mutable_network();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string channel = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterRequest.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string event = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.RegisterRequest.event");
        object = msg->mutable_event();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.RegisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterRequest.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string network = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), static_cast<int>(this->network().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterRequest.network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterRequest.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), static_cast<int>(this->event().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.RegisterRequest.event"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.RegisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network(), output);
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // string event = 4;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network(), target);
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // string event = 4;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.RegisterRequest.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.RegisterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  // string network = 2;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string event = 4;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  network_.Swap(&other->network_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterResponse::InitAsDefaultInstance() {
}
class RegisterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:api.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:api.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
}

void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterResponse& RegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterResponse_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.RegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.RegisterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.RegisterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscriptionRequest::InitAsDefaultInstance() {
}
class SubscriptionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionRequest::kExtFieldNumber;
const int SubscriptionRequest::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionRequest::SubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.SubscriptionRequest)
}
SubscriptionRequest::SubscriptionRequest(const SubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  // @@protoc_insertion_point(copy_constructor:api.SubscriptionRequest)
}

void SubscriptionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SubscriptionRequest_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubscriptionRequest::~SubscriptionRequest() {
  // @@protoc_insertion_point(destructor:api.SubscriptionRequest)
  SharedDtor();
}

void SubscriptionRequest::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionRequest& SubscriptionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscriptionRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriptionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscriptionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.SubscriptionRequest.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint64 ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_ids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.SubscriptionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.SubscriptionRequest.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.SubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.SubscriptionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.SubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.SubscriptionRequest.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.SubscriptionRequest)
}

::google::protobuf::uint8* SubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.SubscriptionRequest.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubscriptionRequest)
  return target;
}

size_t SubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubscriptionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubscriptionRequest)
    MergeFrom(*source);
  }
}

void SubscriptionRequest::MergeFrom(const SubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
}

void SubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRequest::CopyFrom(const SubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequest::IsInitialized() const {
  return true;
}

void SubscriptionRequest::Swap(SubscriptionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionRequest::InternalSwap(SubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SubscriptionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UnregisterRequest::InitAsDefaultInstance() {
}
class UnregisterRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnregisterRequest::kExtFieldNumber;
const int UnregisterRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnregisterRequest::UnregisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.UnregisterRequest)
}
UnregisterRequest::UnregisterRequest(const UnregisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:api.UnregisterRequest)
}

void UnregisterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UnregisterRequest_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

UnregisterRequest::~UnregisterRequest() {
  // @@protoc_insertion_point(destructor:api.UnregisterRequest)
  SharedDtor();
}

void UnregisterRequest::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnregisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterRequest& UnregisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UnregisterRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void UnregisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UnregisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnregisterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UnregisterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.UnregisterRequest.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnregisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.UnregisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.UnregisterRequest.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.UnregisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.UnregisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnregisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.UnregisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.UnregisterRequest.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.UnregisterRequest)
}

::google::protobuf::uint8* UnregisterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UnregisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.UnregisterRequest.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UnregisterRequest)
  return target;
}

size_t UnregisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UnregisterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UnregisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UnregisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UnregisterRequest)
    MergeFrom(*source);
  }
}

void UnregisterRequest::MergeFrom(const UnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void UnregisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterRequest::CopyFrom(const UnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterRequest::IsInitialized() const {
  return true;
}

void UnregisterRequest::Swap(UnregisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnregisterRequest::InternalSwap(UnregisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata UnregisterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UnregisterAllRequest::InitAsDefaultInstance() {
}
class UnregisterAllRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnregisterAllRequest::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnregisterAllRequest::UnregisterAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.UnregisterAllRequest)
}
UnregisterAllRequest::UnregisterAllRequest(const UnregisterAllRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  // @@protoc_insertion_point(copy_constructor:api.UnregisterAllRequest)
}

void UnregisterAllRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UnregisterAllRequest_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnregisterAllRequest::~UnregisterAllRequest() {
  // @@protoc_insertion_point(destructor:api.UnregisterAllRequest)
  SharedDtor();
}

void UnregisterAllRequest::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnregisterAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterAllRequest& UnregisterAllRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UnregisterAllRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void UnregisterAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UnregisterAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnregisterAllRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UnregisterAllRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.UnregisterAllRequest.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnregisterAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.UnregisterAllRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.UnregisterAllRequest.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.UnregisterAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.UnregisterAllRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnregisterAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.UnregisterAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.UnregisterAllRequest.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.UnregisterAllRequest)
}

::google::protobuf::uint8* UnregisterAllRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UnregisterAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.UnregisterAllRequest.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UnregisterAllRequest)
  return target;
}

size_t UnregisterAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UnregisterAllRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UnregisterAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterAllRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UnregisterAllRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UnregisterAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UnregisterAllRequest)
    MergeFrom(*source);
  }
}

void UnregisterAllRequest::MergeFrom(const UnregisterAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UnregisterAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
}

void UnregisterAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UnregisterAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterAllRequest::CopyFrom(const UnregisterAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UnregisterAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterAllRequest::IsInitialized() const {
  return true;
}

void UnregisterAllRequest::Swap(UnregisterAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnregisterAllRequest::InternalSwap(UnregisterAllRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UnregisterAllRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WriteRequest::InitAsDefaultInstance() {
}
class WriteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteRequest::kExtFieldNumber;
const int WriteRequest::kNetFieldNumber;
const int WriteRequest::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteRequest::WriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.net().size() > 0) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:api.WriteRequest)
}

void WriteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WriteRequest_ultimateq_2eproto.base);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:api.WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteRequest& WriteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WriteRequest_ultimateq_2eproto.base);
  return *internal_default_instance();
}


void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WriteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ext = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.WriteRequest.ext");
        object = msg->mutable_ext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string net = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.WriteRequest.net");
        object = msg->mutable_net();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes msg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.WriteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ext = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.WriteRequest.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string net = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.WriteRequest.net"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.WriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.WriteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.WriteRequest.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ext(), output);
  }

  // string net = 2;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.WriteRequest.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net(), output);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.WriteRequest)
}

::google::protobuf::uint8* WriteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.WriteRequest.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext(), target);
  }

  // string net = 2;
  if (this->net().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.WriteRequest.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WriteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ext = 1;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  // string net = 2;
  if (this->net().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net());
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  if (from.net().size() > 0) {

    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  net_.Swap(&other->net_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ultimateq_2eproto);
  return ::file_level_metadata_ultimateq_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::api::Empty* Arena::CreateMaybeMessage< ::api::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::api::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Result* Arena::CreateMaybeMessage< ::api::Result >(Arena* arena) {
  return Arena::CreateInternal< ::api::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Query* Arena::CreateMaybeMessage< ::api::Query >(Arena* arena) {
  return Arena::CreateInternal< ::api::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ListResponse* Arena::CreateMaybeMessage< ::api::ListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::ListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CountResponse* Arena::CreateMaybeMessage< ::api::CountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::CountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Access* Arena::CreateMaybeMessage< ::api::Access >(Arena* arena) {
  return Arena::CreateInternal< ::api::Access >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelModes_AddressMode* Arena::CreateMaybeMessage< ::api::ChannelModes_AddressMode >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelModes_AddressMode >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelModes_ModesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::ChannelModes_ModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelModes_ModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelModes_ArgModesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::ChannelModes_ArgModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelModes_ArgModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelModes_AddressModesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::ChannelModes_AddressModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelModes_AddressModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelModes* Arena::CreateMaybeMessage< ::api::ChannelModes >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelModes >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StateUser* Arena::CreateMaybeMessage< ::api::StateUser >(Arena* arena) {
  return Arena::CreateInternal< ::api::StateUser >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StateChannel* Arena::CreateMaybeMessage< ::api::StateChannel >(Arena* arena) {
  return Arena::CreateInternal< ::api::StateChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UserModes* Arena::CreateMaybeMessage< ::api::UserModes >(Arena* arena) {
  return Arena::CreateInternal< ::api::UserModes >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ModeKinds_UserPrefix* Arena::CreateMaybeMessage< ::api::ModeKinds_UserPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::api::ModeKinds_UserPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ModeKinds_ChannelModesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::ModeKinds_ChannelModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::ModeKinds_ChannelModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ModeKinds* Arena::CreateMaybeMessage< ::api::ModeKinds >(Arena* arena) {
  return Arena::CreateInternal< ::api::ModeKinds >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NetworkInfo_ExtrasEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::NetworkInfo_ExtrasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::NetworkInfo_ExtrasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NetworkInfo* Arena::CreateMaybeMessage< ::api::NetworkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::api::NetworkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredUser_AccessEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::StoredUser_AccessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredUser_AccessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredUser_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::StoredUser_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredUser_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredUser* Arena::CreateMaybeMessage< ::api::StoredUser >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredUser >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredChannel_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::StoredChannel_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredChannel_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredChannel* Arena::CreateMaybeMessage< ::api::StoredChannel >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SelfResponse* Arena::CreateMaybeMessage< ::api::SelfResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::SelfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NetworkQuery* Arena::CreateMaybeMessage< ::api::NetworkQuery >(Arena* arena) {
  return Arena::CreateInternal< ::api::NetworkQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelQuery* Arena::CreateMaybeMessage< ::api::ChannelQuery >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AuthUserRequest* Arena::CreateMaybeMessage< ::api::AuthUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::AuthUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UserResponse* Arena::CreateMaybeMessage< ::api::UserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::UserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UserModesResponse* Arena::CreateMaybeMessage< ::api::UserModesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::UserModesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ChannelResponse* Arena::CreateMaybeMessage< ::api::ChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::ChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredUsersResponse* Arena::CreateMaybeMessage< ::api::StoredUsersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::StoredChannelsResponse* Arena::CreateMaybeMessage< ::api::StoredChannelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::StoredChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LogoutRequest_HostUser* Arena::CreateMaybeMessage< ::api::LogoutRequest_HostUser >(Arena* arena) {
  return Arena::CreateInternal< ::api::LogoutRequest_HostUser >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LogoutRequest* Arena::CreateMaybeMessage< ::api::LogoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::LogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NetworkInfoRequest* Arena::CreateMaybeMessage< ::api::NetworkInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::NetworkInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Cmd* Arena::CreateMaybeMessage< ::api::Cmd >(Arena* arena) {
  return Arena::CreateInternal< ::api::Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CmdEvent_TargetUsersEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::CmdEvent_TargetUsersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::CmdEvent_TargetUsersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::CmdEvent_TargetStoredUsersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CmdEvent_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::CmdEvent_ArgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::api::CmdEvent_ArgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CmdEvent* Arena::CreateMaybeMessage< ::api::CmdEvent >(Arena* arena) {
  return Arena::CreateInternal< ::api::CmdEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CmdEventResponse* Arena::CreateMaybeMessage< ::api::CmdEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::CmdEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::IRCEventResponse* Arena::CreateMaybeMessage< ::api::IRCEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::IRCEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::IRCEvent* Arena::CreateMaybeMessage< ::api::IRCEvent >(Arena* arena) {
  return Arena::CreateInternal< ::api::IRCEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api::RegisterCmdRequest* Arena::CreateMaybeMessage< ::api::RegisterCmdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::RegisterCmdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::RegisterRequest* Arena::CreateMaybeMessage< ::api::RegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::RegisterResponse* Arena::CreateMaybeMessage< ::api::RegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubscriptionRequest* Arena::CreateMaybeMessage< ::api::SubscriptionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::SubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UnregisterRequest* Arena::CreateMaybeMessage< ::api::UnregisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::UnregisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UnregisterAllRequest* Arena::CreateMaybeMessage< ::api::UnregisterAllRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::UnregisterAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WriteRequest* Arena::CreateMaybeMessage< ::api::WriteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::WriteRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
