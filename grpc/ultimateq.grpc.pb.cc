// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ultimateq.proto

#include "ultimateq.pb.h"
#include "ultimateq.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace api {

static const char* Ext_method_names[] = {
  "/api.Ext/Events",
  "/api.Ext/Commands",
  "/api.Ext/Write",
  "/api.Ext/Register",
  "/api.Ext/RegisterCmd",
  "/api.Ext/Unregister",
  "/api.Ext/UnregisterCmd",
  "/api.Ext/UnregisterAll",
  "/api.Ext/NetworkInformation",
  "/api.Ext/StateSelf",
  "/api.Ext/StateUsers",
  "/api.Ext/StateUsersByChan",
  "/api.Ext/StateUsersByChanCount",
  "/api.Ext/StateUserModes",
  "/api.Ext/StateChannel",
  "/api.Ext/StateChannels",
  "/api.Ext/StateChannelCount",
  "/api.Ext/StateIsOn",
  "/api.Ext/StoreAuthUser",
  "/api.Ext/StoreAuthedUser",
  "/api.Ext/StoreUser",
  "/api.Ext/StoreUsers",
  "/api.Ext/StoreUsersByNetwork",
  "/api.Ext/StoreUsersByChannel",
  "/api.Ext/StoreChannel",
  "/api.Ext/StoreChannels",
  "/api.Ext/StorePutUser",
  "/api.Ext/StorePutChannel",
  "/api.Ext/StoreDeleteUser",
  "/api.Ext/StoreDeleteChannel",
  "/api.Ext/StoreLogout",
  "/api.Ext/StoreLogoutByUser",
};

std::unique_ptr< Ext::Stub> Ext::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Ext::Stub> stub(new Ext::Stub(channel));
  return stub;
}

Ext::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Events_(Ext_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Commands_(Ext_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Write_(Ext_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(Ext_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterCmd_(Ext_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unregister_(Ext_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterCmd_(Ext_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterAll_(Ext_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NetworkInformation_(Ext_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateSelf_(Ext_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateUsers_(Ext_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateUsersByChan_(Ext_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateUsersByChanCount_(Ext_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateUserModes_(Ext_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateChannel_(Ext_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateChannels_(Ext_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateChannelCount_(Ext_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StateIsOn_(Ext_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreAuthUser_(Ext_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreAuthedUser_(Ext_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreUser_(Ext_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreUsers_(Ext_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreUsersByNetwork_(Ext_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreUsersByChannel_(Ext_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreChannel_(Ext_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreChannels_(Ext_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorePutUser_(Ext_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorePutChannel_(Ext_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreDeleteUser_(Ext_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreDeleteChannel_(Ext_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreLogout_(Ext_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreLogoutByUser_(Ext_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::api::IRCEventResponse>* Ext::Stub::EventsRaw(::grpc::ClientContext* context, const ::api::SubscriptionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::IRCEventResponse>::Create(channel_.get(), rpcmethod_Events_, context, request);
}

void Ext::Stub::experimental_async::Events(::grpc::ClientContext* context, ::api::SubscriptionRequest* request, ::grpc::experimental::ClientReadReactor< ::api::IRCEventResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::IRCEventResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Events_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::IRCEventResponse>* Ext::Stub::AsyncEventsRaw(::grpc::ClientContext* context, const ::api::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::IRCEventResponse>::Create(channel_.get(), cq, rpcmethod_Events_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::IRCEventResponse>* Ext::Stub::PrepareAsyncEventsRaw(::grpc::ClientContext* context, const ::api::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::IRCEventResponse>::Create(channel_.get(), cq, rpcmethod_Events_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::CmdEventResponse>* Ext::Stub::CommandsRaw(::grpc::ClientContext* context, const ::api::SubscriptionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::CmdEventResponse>::Create(channel_.get(), rpcmethod_Commands_, context, request);
}

void Ext::Stub::experimental_async::Commands(::grpc::ClientContext* context, ::api::SubscriptionRequest* request, ::grpc::experimental::ClientReadReactor< ::api::CmdEventResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::CmdEventResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Commands_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::CmdEventResponse>* Ext::Stub::AsyncCommandsRaw(::grpc::ClientContext* context, const ::api::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::CmdEventResponse>::Create(channel_.get(), cq, rpcmethod_Commands_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::CmdEventResponse>* Ext::Stub::PrepareAsyncCommandsRaw(::grpc::ClientContext* context, const ::api::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::CmdEventResponse>::Create(channel_.get(), cq, rpcmethod_Commands_, context, request, false, nullptr);
}

::grpc::Status Ext::Stub::Write(::grpc::ClientContext* context, const ::api::WriteRequest& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Write_, context, request, response);
}

void Ext::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::api::WriteRequest* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::api::WriteRequest* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::api::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::api::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, false);
}

::grpc::Status Ext::Stub::Register(::grpc::ClientContext* context, const ::api::RegisterRequest& request, ::api::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void Ext::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::api::RegisterRequest* request, ::api::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::api::RegisterRequest* request, ::api::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::RegisterResponse>* Ext::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::api::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::RegisterResponse>* Ext::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::api::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status Ext::Stub::RegisterCmd(::grpc::ClientContext* context, const ::api::RegisterCmdRequest& request, ::api::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterCmd_, context, request, response);
}

void Ext::Stub::experimental_async::RegisterCmd(::grpc::ClientContext* context, const ::api::RegisterCmdRequest* request, ::api::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterCmd_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::RegisterCmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterCmd_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::RegisterCmd(::grpc::ClientContext* context, const ::api::RegisterCmdRequest* request, ::api::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterCmd_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::RegisterCmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterCmd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::RegisterResponse>* Ext::Stub::AsyncRegisterCmdRaw(::grpc::ClientContext* context, const ::api::RegisterCmdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterCmd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::RegisterResponse>* Ext::Stub::PrepareAsyncRegisterCmdRaw(::grpc::ClientContext* context, const ::api::RegisterCmdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterCmd_, context, request, false);
}

::grpc::Status Ext::Stub::Unregister(::grpc::ClientContext* context, const ::api::UnregisterRequest& request, ::api::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unregister_, context, request, response);
}

void Ext::Stub::experimental_async::Unregister(::grpc::ClientContext* context, const ::api::UnregisterRequest* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unregister_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::Unregister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unregister_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::Unregister(::grpc::ClientContext* context, const ::api::UnregisterRequest* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Unregister_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::Unregister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Unregister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::AsyncUnregisterRaw(::grpc::ClientContext* context, const ::api::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_Unregister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::PrepareAsyncUnregisterRaw(::grpc::ClientContext* context, const ::api::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_Unregister_, context, request, false);
}

::grpc::Status Ext::Stub::UnregisterCmd(::grpc::ClientContext* context, const ::api::UnregisterRequest& request, ::api::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterCmd_, context, request, response);
}

void Ext::Stub::experimental_async::UnregisterCmd(::grpc::ClientContext* context, const ::api::UnregisterRequest* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterCmd_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::UnregisterCmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterCmd_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::UnregisterCmd(::grpc::ClientContext* context, const ::api::UnregisterRequest* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterCmd_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::UnregisterCmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterCmd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::AsyncUnregisterCmdRaw(::grpc::ClientContext* context, const ::api::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_UnregisterCmd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::PrepareAsyncUnregisterCmdRaw(::grpc::ClientContext* context, const ::api::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_UnregisterCmd_, context, request, false);
}

::grpc::Status Ext::Stub::UnregisterAll(::grpc::ClientContext* context, const ::api::UnregisterAllRequest& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterAll_, context, request, response);
}

void Ext::Stub::experimental_async::UnregisterAll(::grpc::ClientContext* context, const ::api::UnregisterAllRequest* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterAll_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::UnregisterAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterAll_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::UnregisterAll(::grpc::ClientContext* context, const ::api::UnregisterAllRequest* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterAll_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::UnregisterAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncUnregisterAllRaw(::grpc::ClientContext* context, const ::api::UnregisterAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_UnregisterAll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncUnregisterAllRaw(::grpc::ClientContext* context, const ::api::UnregisterAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_UnregisterAll_, context, request, false);
}

::grpc::Status Ext::Stub::NetworkInformation(::grpc::ClientContext* context, const ::api::NetworkInfoRequest& request, ::api::NetworkInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NetworkInformation_, context, request, response);
}

void Ext::Stub::experimental_async::NetworkInformation(::grpc::ClientContext* context, const ::api::NetworkInfoRequest* request, ::api::NetworkInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NetworkInformation_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::NetworkInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::NetworkInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NetworkInformation_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::NetworkInformation(::grpc::ClientContext* context, const ::api::NetworkInfoRequest* request, ::api::NetworkInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NetworkInformation_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::NetworkInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::NetworkInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NetworkInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::NetworkInfo>* Ext::Stub::AsyncNetworkInformationRaw(::grpc::ClientContext* context, const ::api::NetworkInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::NetworkInfo>::Create(channel_.get(), cq, rpcmethod_NetworkInformation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::NetworkInfo>* Ext::Stub::PrepareAsyncNetworkInformationRaw(::grpc::ClientContext* context, const ::api::NetworkInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::NetworkInfo>::Create(channel_.get(), cq, rpcmethod_NetworkInformation_, context, request, false);
}

::grpc::Status Ext::Stub::StateSelf(::grpc::ClientContext* context, const ::api::Query& request, ::api::SelfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateSelf_, context, request, response);
}

void Ext::Stub::experimental_async::StateSelf(::grpc::ClientContext* context, const ::api::Query* request, ::api::SelfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateSelf_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateSelf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SelfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateSelf_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateSelf(::grpc::ClientContext* context, const ::api::Query* request, ::api::SelfResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateSelf_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateSelf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SelfResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateSelf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::SelfResponse>* Ext::Stub::AsyncStateSelfRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::SelfResponse>::Create(channel_.get(), cq, rpcmethod_StateSelf_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::SelfResponse>* Ext::Stub::PrepareAsyncStateSelfRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::SelfResponse>::Create(channel_.get(), cq, rpcmethod_StateSelf_, context, request, false);
}

::grpc::Status Ext::Stub::StateUsers(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::StateUser* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateUsers_, context, request, response);
}

void Ext::Stub::experimental_async::StateUsers(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StateUser* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUsers_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StateUser* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUsers_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUsers(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StateUser* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUsers_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StateUser* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StateUser>* Ext::Stub::AsyncStateUsersRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StateUser>::Create(channel_.get(), cq, rpcmethod_StateUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StateUser>* Ext::Stub::PrepareAsyncStateUsersRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StateUser>::Create(channel_.get(), cq, rpcmethod_StateUsers_, context, request, false);
}

::grpc::Status Ext::Stub::StateUsersByChan(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateUsersByChan_, context, request, response);
}

void Ext::Stub::experimental_async::StateUsersByChan(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChan_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUsersByChan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChan_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUsersByChan(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChan_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateUsersByChan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::ListResponse>* Ext::Stub::AsyncStateUsersByChanRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ListResponse>::Create(channel_.get(), cq, rpcmethod_StateUsersByChan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::ListResponse>* Ext::Stub::PrepareAsyncStateUsersByChanRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ListResponse>::Create(channel_.get(), cq, rpcmethod_StateUsersByChan_, context, request, false);
}

::grpc::Status Ext::Stub::StateUsersByChanCount(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::CountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateUsersByChanCount_, context, request, response);
}

void Ext::Stub::experimental_async::StateUsersByChanCount(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::CountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChanCount_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUsersByChanCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::CountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChanCount_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUsersByChanCount(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::CountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChanCount_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateUsersByChanCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::CountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUsersByChanCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::CountResponse>* Ext::Stub::AsyncStateUsersByChanCountRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::CountResponse>::Create(channel_.get(), cq, rpcmethod_StateUsersByChanCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::CountResponse>* Ext::Stub::PrepareAsyncStateUsersByChanCountRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::CountResponse>::Create(channel_.get(), cq, rpcmethod_StateUsersByChanCount_, context, request, false);
}

::grpc::Status Ext::Stub::StateUserModes(::grpc::ClientContext* context, const ::api::ChannelQuery& request, ::api::UserModes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateUserModes_, context, request, response);
}

void Ext::Stub::experimental_async::StateUserModes(::grpc::ClientContext* context, const ::api::ChannelQuery* request, ::api::UserModes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUserModes_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUserModes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::UserModes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateUserModes_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateUserModes(::grpc::ClientContext* context, const ::api::ChannelQuery* request, ::api::UserModes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUserModes_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateUserModes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::UserModes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateUserModes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::UserModes>* Ext::Stub::AsyncStateUserModesRaw(::grpc::ClientContext* context, const ::api::ChannelQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::UserModes>::Create(channel_.get(), cq, rpcmethod_StateUserModes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::UserModes>* Ext::Stub::PrepareAsyncStateUserModesRaw(::grpc::ClientContext* context, const ::api::ChannelQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::UserModes>::Create(channel_.get(), cq, rpcmethod_StateUserModes_, context, request, false);
}

::grpc::Status Ext::Stub::StateChannel(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::ChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateChannel_, context, request, response);
}

void Ext::Stub::experimental_async::StateChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::ChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::ChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateChannel_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::ChannelResponse>* Ext::Stub::AsyncStateChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ChannelResponse>::Create(channel_.get(), cq, rpcmethod_StateChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::ChannelResponse>* Ext::Stub::PrepareAsyncStateChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ChannelResponse>::Create(channel_.get(), cq, rpcmethod_StateChannel_, context, request, false);
}

::grpc::Status Ext::Stub::StateChannels(::grpc::ClientContext* context, const ::api::Query& request, ::api::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateChannels_, context, request, response);
}

void Ext::Stub::experimental_async::StateChannels(::grpc::ClientContext* context, const ::api::Query* request, ::api::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateChannels_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateChannels_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateChannels(::grpc::ClientContext* context, const ::api::Query* request, ::api::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateChannels_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::ListResponse>* Ext::Stub::AsyncStateChannelsRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ListResponse>::Create(channel_.get(), cq, rpcmethod_StateChannels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::ListResponse>* Ext::Stub::PrepareAsyncStateChannelsRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ListResponse>::Create(channel_.get(), cq, rpcmethod_StateChannels_, context, request, false);
}

::grpc::Status Ext::Stub::StateChannelCount(::grpc::ClientContext* context, const ::api::Query& request, ::api::CountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateChannelCount_, context, request, response);
}

void Ext::Stub::experimental_async::StateChannelCount(::grpc::ClientContext* context, const ::api::Query* request, ::api::CountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateChannelCount_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateChannelCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::CountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateChannelCount_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateChannelCount(::grpc::ClientContext* context, const ::api::Query* request, ::api::CountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateChannelCount_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateChannelCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::CountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateChannelCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::CountResponse>* Ext::Stub::AsyncStateChannelCountRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::CountResponse>::Create(channel_.get(), cq, rpcmethod_StateChannelCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::CountResponse>* Ext::Stub::PrepareAsyncStateChannelCountRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::CountResponse>::Create(channel_.get(), cq, rpcmethod_StateChannelCount_, context, request, false);
}

::grpc::Status Ext::Stub::StateIsOn(::grpc::ClientContext* context, const ::api::ChannelQuery& request, ::api::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StateIsOn_, context, request, response);
}

void Ext::Stub::experimental_async::StateIsOn(::grpc::ClientContext* context, const ::api::ChannelQuery* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateIsOn_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateIsOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StateIsOn_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StateIsOn(::grpc::ClientContext* context, const ::api::ChannelQuery* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateIsOn_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StateIsOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StateIsOn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::AsyncStateIsOnRaw(::grpc::ClientContext* context, const ::api::ChannelQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_StateIsOn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::PrepareAsyncStateIsOnRaw(::grpc::ClientContext* context, const ::api::ChannelQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_StateIsOn_, context, request, false);
}

::grpc::Status Ext::Stub::StoreAuthUser(::grpc::ClientContext* context, const ::api::AuthUserRequest& request, ::api::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreAuthUser_, context, request, response);
}

void Ext::Stub::experimental_async::StoreAuthUser(::grpc::ClientContext* context, const ::api::AuthUserRequest* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreAuthUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreAuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreAuthUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreAuthUser(::grpc::ClientContext* context, const ::api::AuthUserRequest* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreAuthUser_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreAuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreAuthUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::AsyncStoreAuthUserRaw(::grpc::ClientContext* context, const ::api::AuthUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_StoreAuthUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Result>* Ext::Stub::PrepareAsyncStoreAuthUserRaw(::grpc::ClientContext* context, const ::api::AuthUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Result>::Create(channel_.get(), cq, rpcmethod_StoreAuthUser_, context, request, false);
}

::grpc::Status Ext::Stub::StoreAuthedUser(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::StoredUser* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreAuthedUser_, context, request, response);
}

void Ext::Stub::experimental_async::StoreAuthedUser(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StoredUser* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreAuthedUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreAuthedUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUser* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreAuthedUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreAuthedUser(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StoredUser* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreAuthedUser_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreAuthedUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUser* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreAuthedUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUser>* Ext::Stub::AsyncStoreAuthedUserRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUser>::Create(channel_.get(), cq, rpcmethod_StoreAuthedUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUser>* Ext::Stub::PrepareAsyncStoreAuthedUserRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUser>::Create(channel_.get(), cq, rpcmethod_StoreAuthedUser_, context, request, false);
}

::grpc::Status Ext::Stub::StoreUser(::grpc::ClientContext* context, const ::api::Query& request, ::api::StoredUser* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreUser_, context, request, response);
}

void Ext::Stub::experimental_async::StoreUser(::grpc::ClientContext* context, const ::api::Query* request, ::api::StoredUser* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUser* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUser(::grpc::ClientContext* context, const ::api::Query* request, ::api::StoredUser* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUser_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUser* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUser>* Ext::Stub::AsyncStoreUserRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUser>::Create(channel_.get(), cq, rpcmethod_StoreUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUser>* Ext::Stub::PrepareAsyncStoreUserRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUser>::Create(channel_.get(), cq, rpcmethod_StoreUser_, context, request, false);
}

::grpc::Status Ext::Stub::StoreUsers(::grpc::ClientContext* context, const ::api::Empty& request, ::api::StoredUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreUsers_, context, request, response);
}

void Ext::Stub::experimental_async::StoreUsers(::grpc::ClientContext* context, const ::api::Empty* request, ::api::StoredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUsers_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUsers_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUsers(::grpc::ClientContext* context, const ::api::Empty* request, ::api::StoredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUsers_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUsersResponse>* Ext::Stub::AsyncStoreUsersRaw(::grpc::ClientContext* context, const ::api::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUsersResponse>::Create(channel_.get(), cq, rpcmethod_StoreUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUsersResponse>* Ext::Stub::PrepareAsyncStoreUsersRaw(::grpc::ClientContext* context, const ::api::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUsersResponse>::Create(channel_.get(), cq, rpcmethod_StoreUsers_, context, request, false);
}

::grpc::Status Ext::Stub::StoreUsersByNetwork(::grpc::ClientContext* context, const ::api::Query& request, ::api::StoredUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreUsersByNetwork_, context, request, response);
}

void Ext::Stub::experimental_async::StoreUsersByNetwork(::grpc::ClientContext* context, const ::api::Query* request, ::api::StoredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByNetwork_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUsersByNetwork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByNetwork_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUsersByNetwork(::grpc::ClientContext* context, const ::api::Query* request, ::api::StoredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByNetwork_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreUsersByNetwork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByNetwork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUsersResponse>* Ext::Stub::AsyncStoreUsersByNetworkRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUsersResponse>::Create(channel_.get(), cq, rpcmethod_StoreUsersByNetwork_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUsersResponse>* Ext::Stub::PrepareAsyncStoreUsersByNetworkRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUsersResponse>::Create(channel_.get(), cq, rpcmethod_StoreUsersByNetwork_, context, request, false);
}

::grpc::Status Ext::Stub::StoreUsersByChannel(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::StoredUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreUsersByChannel_, context, request, response);
}

void Ext::Stub::experimental_async::StoreUsersByChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StoredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUsersByChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreUsersByChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StoredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByChannel_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreUsersByChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreUsersByChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUsersResponse>* Ext::Stub::AsyncStoreUsersByChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUsersResponse>::Create(channel_.get(), cq, rpcmethod_StoreUsersByChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredUsersResponse>* Ext::Stub::PrepareAsyncStoreUsersByChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredUsersResponse>::Create(channel_.get(), cq, rpcmethod_StoreUsersByChannel_, context, request, false);
}

::grpc::Status Ext::Stub::StoreChannel(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::StoredChannel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreChannel_, context, request, response);
}

void Ext::Stub::experimental_async::StoreChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StoredChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::StoredChannel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreChannel_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredChannel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredChannel>* Ext::Stub::AsyncStoreChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredChannel>::Create(channel_.get(), cq, rpcmethod_StoreChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredChannel>* Ext::Stub::PrepareAsyncStoreChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredChannel>::Create(channel_.get(), cq, rpcmethod_StoreChannel_, context, request, false);
}

::grpc::Status Ext::Stub::StoreChannels(::grpc::ClientContext* context, const ::api::Empty& request, ::api::StoredChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreChannels_, context, request, response);
}

void Ext::Stub::experimental_async::StoreChannels(::grpc::ClientContext* context, const ::api::Empty* request, ::api::StoredChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreChannels_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreChannels_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreChannels(::grpc::ClientContext* context, const ::api::Empty* request, ::api::StoredChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreChannels_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StoredChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StoredChannelsResponse>* Ext::Stub::AsyncStoreChannelsRaw(::grpc::ClientContext* context, const ::api::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredChannelsResponse>::Create(channel_.get(), cq, rpcmethod_StoreChannels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StoredChannelsResponse>* Ext::Stub::PrepareAsyncStoreChannelsRaw(::grpc::ClientContext* context, const ::api::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StoredChannelsResponse>::Create(channel_.get(), cq, rpcmethod_StoreChannels_, context, request, false);
}

::grpc::Status Ext::Stub::StorePutUser(::grpc::ClientContext* context, const ::api::StoredUser& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StorePutUser_, context, request, response);
}

void Ext::Stub::experimental_async::StorePutUser(::grpc::ClientContext* context, const ::api::StoredUser* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StorePutUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StorePutUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StorePutUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StorePutUser(::grpc::ClientContext* context, const ::api::StoredUser* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StorePutUser_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StorePutUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StorePutUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncStorePutUserRaw(::grpc::ClientContext* context, const ::api::StoredUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StorePutUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncStorePutUserRaw(::grpc::ClientContext* context, const ::api::StoredUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StorePutUser_, context, request, false);
}

::grpc::Status Ext::Stub::StorePutChannel(::grpc::ClientContext* context, const ::api::StoredChannel& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StorePutChannel_, context, request, response);
}

void Ext::Stub::experimental_async::StorePutChannel(::grpc::ClientContext* context, const ::api::StoredChannel* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StorePutChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StorePutChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StorePutChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StorePutChannel(::grpc::ClientContext* context, const ::api::StoredChannel* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StorePutChannel_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StorePutChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StorePutChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncStorePutChannelRaw(::grpc::ClientContext* context, const ::api::StoredChannel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StorePutChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncStorePutChannelRaw(::grpc::ClientContext* context, const ::api::StoredChannel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StorePutChannel_, context, request, false);
}

::grpc::Status Ext::Stub::StoreDeleteUser(::grpc::ClientContext* context, const ::api::Query& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreDeleteUser_, context, request, response);
}

void Ext::Stub::experimental_async::StoreDeleteUser(::grpc::ClientContext* context, const ::api::Query* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreDeleteUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreDeleteUser(::grpc::ClientContext* context, const ::api::Query* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteUser_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreDeleteUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncStoreDeleteUserRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreDeleteUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncStoreDeleteUserRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreDeleteUser_, context, request, false);
}

::grpc::Status Ext::Stub::StoreDeleteChannel(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreDeleteChannel_, context, request, response);
}

void Ext::Stub::experimental_async::StoreDeleteChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreDeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteChannel_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreDeleteChannel(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteChannel_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreDeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreDeleteChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncStoreDeleteChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreDeleteChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncStoreDeleteChannelRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreDeleteChannel_, context, request, false);
}

::grpc::Status Ext::Stub::StoreLogout(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreLogout_, context, request, response);
}

void Ext::Stub::experimental_async::StoreLogout(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreLogout_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreLogout_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreLogout(::grpc::ClientContext* context, const ::api::NetworkQuery* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreLogout_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreLogout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncStoreLogoutRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreLogout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncStoreLogoutRaw(::grpc::ClientContext* context, const ::api::NetworkQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreLogout_, context, request, false);
}

::grpc::Status Ext::Stub::StoreLogoutByUser(::grpc::ClientContext* context, const ::api::Query& request, ::api::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreLogoutByUser_, context, request, response);
}

void Ext::Stub::experimental_async::StoreLogoutByUser(::grpc::ClientContext* context, const ::api::Query* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreLogoutByUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreLogoutByUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StoreLogoutByUser_, context, request, response, std::move(f));
}

void Ext::Stub::experimental_async::StoreLogoutByUser(::grpc::ClientContext* context, const ::api::Query* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreLogoutByUser_, context, request, response, reactor);
}

void Ext::Stub::experimental_async::StoreLogoutByUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StoreLogoutByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::AsyncStoreLogoutByUserRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreLogoutByUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::Empty>* Ext::Stub::PrepareAsyncStoreLogoutByUserRaw(::grpc::ClientContext* context, const ::api::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::Empty>::Create(channel_.get(), cq, rpcmethod_StoreLogoutByUser_, context, request, false);
}

Ext::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Ext::Service, ::api::SubscriptionRequest, ::api::IRCEventResponse>(
          std::mem_fn(&Ext::Service::Events), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Ext::Service, ::api::SubscriptionRequest, ::api::CmdEventResponse>(
          std::mem_fn(&Ext::Service::Commands), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::WriteRequest, ::api::Empty>(
          std::mem_fn(&Ext::Service::Write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::RegisterRequest, ::api::RegisterResponse>(
          std::mem_fn(&Ext::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::RegisterCmdRequest, ::api::RegisterResponse>(
          std::mem_fn(&Ext::Service::RegisterCmd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::UnregisterRequest, ::api::Result>(
          std::mem_fn(&Ext::Service::Unregister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::UnregisterRequest, ::api::Result>(
          std::mem_fn(&Ext::Service::UnregisterCmd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::UnregisterAllRequest, ::api::Empty>(
          std::mem_fn(&Ext::Service::UnregisterAll), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkInfoRequest, ::api::NetworkInfo>(
          std::mem_fn(&Ext::Service::NetworkInformation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::SelfResponse>(
          std::mem_fn(&Ext::Service::StateSelf), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::StateUser>(
          std::mem_fn(&Ext::Service::StateUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::ListResponse>(
          std::mem_fn(&Ext::Service::StateUsersByChan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::CountResponse>(
          std::mem_fn(&Ext::Service::StateUsersByChanCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::ChannelQuery, ::api::UserModes>(
          std::mem_fn(&Ext::Service::StateUserModes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::ChannelResponse>(
          std::mem_fn(&Ext::Service::StateChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::ListResponse>(
          std::mem_fn(&Ext::Service::StateChannels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::CountResponse>(
          std::mem_fn(&Ext::Service::StateChannelCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::ChannelQuery, ::api::Result>(
          std::mem_fn(&Ext::Service::StateIsOn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::AuthUserRequest, ::api::Result>(
          std::mem_fn(&Ext::Service::StoreAuthUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::StoredUser>(
          std::mem_fn(&Ext::Service::StoreAuthedUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::StoredUser>(
          std::mem_fn(&Ext::Service::StoreUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Empty, ::api::StoredUsersResponse>(
          std::mem_fn(&Ext::Service::StoreUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::StoredUsersResponse>(
          std::mem_fn(&Ext::Service::StoreUsersByNetwork), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::StoredUsersResponse>(
          std::mem_fn(&Ext::Service::StoreUsersByChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::StoredChannel>(
          std::mem_fn(&Ext::Service::StoreChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Empty, ::api::StoredChannelsResponse>(
          std::mem_fn(&Ext::Service::StoreChannels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::StoredUser, ::api::Empty>(
          std::mem_fn(&Ext::Service::StorePutUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::StoredChannel, ::api::Empty>(
          std::mem_fn(&Ext::Service::StorePutChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::Empty>(
          std::mem_fn(&Ext::Service::StoreDeleteUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::Empty>(
          std::mem_fn(&Ext::Service::StoreDeleteChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::NetworkQuery, ::api::Empty>(
          std::mem_fn(&Ext::Service::StoreLogout), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ext_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ext::Service, ::api::Query, ::api::Empty>(
          std::mem_fn(&Ext::Service::StoreLogoutByUser), this)));
}

Ext::Service::~Service() {
}

::grpc::Status Ext::Service::Events(::grpc::ServerContext* context, const ::api::SubscriptionRequest* request, ::grpc::ServerWriter< ::api::IRCEventResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::Commands(::grpc::ServerContext* context, const ::api::SubscriptionRequest* request, ::grpc::ServerWriter< ::api::CmdEventResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::Write(::grpc::ServerContext* context, const ::api::WriteRequest* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::Register(::grpc::ServerContext* context, const ::api::RegisterRequest* request, ::api::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::RegisterCmd(::grpc::ServerContext* context, const ::api::RegisterCmdRequest* request, ::api::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::Unregister(::grpc::ServerContext* context, const ::api::UnregisterRequest* request, ::api::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::UnregisterCmd(::grpc::ServerContext* context, const ::api::UnregisterRequest* request, ::api::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::UnregisterAll(::grpc::ServerContext* context, const ::api::UnregisterAllRequest* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::NetworkInformation(::grpc::ServerContext* context, const ::api::NetworkInfoRequest* request, ::api::NetworkInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateSelf(::grpc::ServerContext* context, const ::api::Query* request, ::api::SelfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateUsers(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::StateUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateUsersByChan(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateUsersByChanCount(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::CountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateUserModes(::grpc::ServerContext* context, const ::api::ChannelQuery* request, ::api::UserModes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateChannel(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::ChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateChannels(::grpc::ServerContext* context, const ::api::Query* request, ::api::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateChannelCount(::grpc::ServerContext* context, const ::api::Query* request, ::api::CountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StateIsOn(::grpc::ServerContext* context, const ::api::ChannelQuery* request, ::api::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreAuthUser(::grpc::ServerContext* context, const ::api::AuthUserRequest* request, ::api::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreAuthedUser(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::StoredUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreUser(::grpc::ServerContext* context, const ::api::Query* request, ::api::StoredUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreUsers(::grpc::ServerContext* context, const ::api::Empty* request, ::api::StoredUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreUsersByNetwork(::grpc::ServerContext* context, const ::api::Query* request, ::api::StoredUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreUsersByChannel(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::StoredUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreChannel(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::StoredChannel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreChannels(::grpc::ServerContext* context, const ::api::Empty* request, ::api::StoredChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StorePutUser(::grpc::ServerContext* context, const ::api::StoredUser* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StorePutChannel(::grpc::ServerContext* context, const ::api::StoredChannel* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreDeleteUser(::grpc::ServerContext* context, const ::api::Query* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreDeleteChannel(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreLogout(::grpc::ServerContext* context, const ::api::NetworkQuery* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ext::Service::StoreLogoutByUser(::grpc::ServerContext* context, const ::api::Query* request, ::api::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

